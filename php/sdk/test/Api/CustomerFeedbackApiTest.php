<?php
/**
 * CustomerFeedbackApiTest
 * PHP version 8.3
 *
 * @category Class
 * @package  SpApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * The Selling Partner API for CustomerFeedback
 *
 * The Selling Partner API for Customer Feedback (Customer Feedback API) provides information about customer reviews and returns at both the item and browse node level.
 *
 * The version of the OpenAPI document: 2024-06-01
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace SpApi\Test\Api;

use SpApi\ApiException;
use SpApi\Api\customerFeedback\v2024_06_01\CustomerFeedbackApi;
use SpApi\ObjectSerializer;

/**
 * CustomerFeedbackApiTest Class Doc Comment
 *
 * @category Class
 * @package  SpApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class CustomerFeedbackApiTest extends BaseTestCase
{
    private CustomerFeedbackApi $apiInstance;
    public function setUp(): void
    {
        parent::setUp();
        // Initialize parameter value specific to case
        $this->testHelper->setSpecificValue('CustomerFeedbackApi', $this->getName());
        $this->apiInstance = new CustomerFeedbackApi($this->config, null);
        // Change Time Format if it requires
        $specificTimeFormat = $this->testHelper->getDateTimeFormatForCase('CustomerFeedbackApi');
        if ($specificTimeFormat) {
            ObjectSerializer::setDateTimeFormat($specificTimeFormat);
        }
    }

    /**
     * Test case for getBrowseNodeReturnTopics_200
     */
    public function testGetBrowseNodeReturnTopics200()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testGetBrowseNodeReturnTopics200', 'CustomerFeedbackApi')) {
                $this->assertTrue(true);
                return;
            }
            $jsonSchema = '{
  &quot;description&quot; : &quot;Success.&quot;,
  &quot;headers&quot; : {
    &quot;x-amzn-RequestId&quot; : {
      &quot;description&quot; : &quot;Unique request reference identifier.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    },
    &quot;x-amzn-RateLimit-Limit&quot; : {
      &quot;description&quot; : &quot;Your rate limit (requests per second) for this operation.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    }
  },
  &quot;content&quot; : {
    &quot;application/json&quot; : {
      &quot;schema&quot; : {
        &quot;$ref&quot; : &quot;#/components/schemas/BrowseNodeReturnTopicsResponse&quot;
      },
      &quot;example&quot; : {
        &quot;browseNodeId&quot; : &quot;123456789&quot;,
        &quot;displayName&quot; : &quot;Shoe rack&quot;,
        &quot;marketplaceId&quot; : &quot;ATVPDKIKX0DER&quot;,
        &quot;countryCode&quot; : &quot;US&quot;,
        &quot;dateRange&quot; : {
          &quot;startDate&quot; : &quot;2024-03-22T08:35:43.717Z&quot;,
          &quot;endDate&quot; : &quot;2024-03-22T08:35:43.717Z&quot;
        },
        &quot;topics&quot; : [ {
          &quot;topic&quot; : &quot;Weak fragile &quot;,
          &quot;browseNodeMetrics&quot; : {
            &quot;occurrencePercentage&quot; : {
              &quot;allProducts&quot; : 27.5
            }
          }
        }, {
          &quot;topic&quot; : &quot;Assembly/Installation &quot;,
          &quot;browseNodeMetrics&quot; : {
            &quot;occurrencePercentage&quot; : {
              &quot;allProducts&quot; : 23.5
            }
          }
        }, {
          &quot;topic&quot; : &quot;Quality-Overall &quot;,
          &quot;browseNodeMetrics&quot; : {
            &quot;occurrencePercentage&quot; : {
              &quot;allProducts&quot; : 17.5
            }
          }
        }, {
          &quot;topic&quot; : &quot;Value for Money &quot;,
          &quot;browseNodeMetrics&quot; : {
            &quot;occurrencePercentage&quot; : {
              &quot;allProducts&quot; : 10.5
            }
          }
        }, {
          &quot;topic&quot; : &quot;Storage Capacity &quot;,
          &quot;browseNodeMetrics&quot; : {
            &quot;occurrencePercentage&quot; : {
              &quot;allProducts&quot; : 7.5
            }
          }
        } ]
      }
    }
  },
  &quot;x-amzn-api-sandbox&quot; : {
    &quot;static&quot; : [ {
      &quot;request&quot; : {
        &quot;parameters&quot; : {
          &quot;browseNodeId&quot; : {
            &quot;value&quot; : &quot;123456789&quot;
          },
          &quot;marketplaceId&quot; : {
            &quot;value&quot; : &quot;ATVPDKIKX0DER&quot;
          }
        }
      },
      &quot;response&quot; : {
        &quot;browseNodeId&quot; : &quot;123456789&quot;,
        &quot;displayName&quot; : &quot;Shoe rack&quot;,
        &quot;marketplaceId&quot; : &quot;ATVPDKIKX0DER&quot;,
        &quot;countryCode&quot; : &quot;US&quot;,
        &quot;dateRange&quot; : {
          &quot;startDate&quot; : &quot;2024-03-22T08:35:43.717Z&quot;,
          &quot;endDate&quot; : &quot;2024-03-22T08:35:43.717Z&quot;
        },
        &quot;topics&quot; : [ {
          &quot;topic&quot; : &quot;Weak fragile &quot;,
          &quot;browseNodeMetrics&quot; : {
            &quot;occurrencePercentage&quot; : {
              &quot;allProducts&quot; : 27.5
            }
          }
        }, {
          &quot;topic&quot; : &quot;Assembly/Installation &quot;,
          &quot;browseNodeMetrics&quot; : {
            &quot;occurrencePercentage&quot; : {
              &quot;allProducts&quot; : 23.5
            }
          }
        }, {
          &quot;topic&quot; : &quot;Quality-Overall &quot;,
          &quot;browseNodeMetrics&quot; : {
            &quot;occurrencePercentage&quot; : {
              &quot;allProducts&quot; : 17.5
            }
          }
        }, {
          &quot;topic&quot; : &quot;Value for Money &quot;,
          &quot;browseNodeMetrics&quot; : {
            &quot;occurrencePercentage&quot; : {
              &quot;allProducts&quot; : 10.5
            }
          }
        }, {
          &quot;topic&quot; : &quot;Storage Capacity &quot;,
          &quot;browseNodeMetrics&quot; : {
            &quot;occurrencePercentage&quot; : {
              &quot;allProducts&quot; : 7.5
            }
          }
        } ]
      }
    } ]
  }
}';
            $result = $this->testHelper->extractRequestAndResponse(
                $this->apiInstance,
                $jsonSchema,
                'getBrowseNodeReturnTopics'
            );
            $requestParams = $result['requestParams'];
            $expectedResponse = $result['expectedResponse'];

            // Change Time Format if it requires
            $specificTimeFormat = $this->testHelper->getDateTimeFormatForCase('CustomerFeedbackApi');
            if ($specificTimeFormat) {
                ObjectSerializer::setDateTimeFormat($specificTimeFormat);
            }

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->getBrowseNodeReturnTopicsWithHttpInfo(...array_values($requestParams));

            // Assert the response code
            $this->assertHttpStatusCode(200, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 200, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 200);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for getBrowseNodeReturnTopics_204
     */
    public function testGetBrowseNodeReturnTopics204()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testGetBrowseNodeReturnTopics204', 'CustomerFeedbackApi')) {
                $this->assertTrue(true);
                return;
            }
            $jsonSchema = '{
  &quot;description&quot; : &quot;Success.&quot;,
  &quot;headers&quot; : {
    &quot;x-amzn-RequestId&quot; : {
      &quot;description&quot; : &quot;Unique request reference identifier.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    },
    &quot;x-amzn-RateLimit-Limit&quot; : {
      &quot;description&quot; : &quot;Your rate limit (requests per second) for this operation.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    }
  },
  &quot;content&quot; : {
    &quot;application/json&quot; : {
      &quot;example&quot; : { }
    }
  },
  &quot;x-amzn-api-sandbox&quot; : {
    &quot;static&quot; : [ {
      &quot;request&quot; : {
        &quot;parameters&quot; : {
          &quot;browseNodeId&quot; : {
            &quot;value&quot; : &quot;123456789&quot;
          },
          &quot;marketplaceId&quot; : {
            &quot;value&quot; : &quot;ATVPDKIKR0DER&quot;
          }
        }
      },
      &quot;response&quot; : { }
    } ]
  }
}';
            $result = $this->testHelper->extractRequestAndResponse(
                $this->apiInstance,
                $jsonSchema,
                'getBrowseNodeReturnTopics'
            );
            $requestParams = $result['requestParams'];
            $expectedResponse = $result['expectedResponse'];

            // Change Time Format if it requires
            $specificTimeFormat = $this->testHelper->getDateTimeFormatForCase('CustomerFeedbackApi');
            if ($specificTimeFormat) {
                ObjectSerializer::setDateTimeFormat($specificTimeFormat);
            }

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->getBrowseNodeReturnTopicsWithHttpInfo(...array_values($requestParams));

            // Assert the response code
            $this->assertHttpStatusCode(204, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 204, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 204);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for getBrowseNodeReturnTopics_400
     */
    public function testGetBrowseNodeReturnTopics400()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testGetBrowseNodeReturnTopics400', 'CustomerFeedbackApi')) {
                $this->assertTrue(true);
                return;
            }
            $jsonSchema = '{
  &quot;description&quot; : &quot;Request has missing or invalid parameters and cannot be parsed.&quot;,
  &quot;headers&quot; : {
    &quot;x-amzn-RequestId&quot; : {
      &quot;description&quot; : &quot;Unique request reference identifier.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    },
    &quot;x-amzn-RateLimit-Limit&quot; : {
      &quot;description&quot; : &quot;Your rate limit (requests per second) for this operation.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    }
  },
  &quot;content&quot; : {
    &quot;application/json&quot; : {
      &quot;schema&quot; : {
        &quot;$ref&quot; : &quot;#/components/schemas/ErrorList&quot;
      }
    }
  },
  &quot;x-amzn-api-sandbox&quot; : {
    &quot;static&quot; : [ {
      &quot;request&quot; : {
        &quot;parameters&quot; : {
          &quot;browseNodeId&quot; : {
            &quot;value&quot; : &quot;123456&quot;
          },
          &quot;marketplaceId&quot; : {
            &quot;value&quot; : &quot;abcd&quot;
          }
        }
      },
      &quot;response&quot; : {
        &quot;errors&quot; : [ {
          &quot;code&quot; : &quot;InvalidInput&quot;,
          &quot;message&quot; : &quot;Invalid input.&quot;
        } ]
      }
    } ]
  }
}';
            $result = $this->testHelper->extractRequestAndResponse(
                $this->apiInstance,
                $jsonSchema,
                'getBrowseNodeReturnTopics'
            );
            $requestParams = $result['requestParams'];
            $expectedResponse = $result['expectedResponse'];

            // Change Time Format if it requires
            $specificTimeFormat = $this->testHelper->getDateTimeFormatForCase('CustomerFeedbackApi');
            if ($specificTimeFormat) {
                ObjectSerializer::setDateTimeFormat($specificTimeFormat);
            }

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->getBrowseNodeReturnTopicsWithHttpInfo(...array_values($requestParams));

            // Assert the response code
            $this->assertHttpStatusCode(400, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 400, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 400);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for getBrowseNodeReturnTopics_403
     */
    public function testGetBrowseNodeReturnTopics403()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getBrowseNodeReturnTopics_404
     */
    public function testGetBrowseNodeReturnTopics404()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getBrowseNodeReturnTopics_413
     */
    public function testGetBrowseNodeReturnTopics413()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getBrowseNodeReturnTopics_415
     */
    public function testGetBrowseNodeReturnTopics415()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getBrowseNodeReturnTopics_429
     */
    public function testGetBrowseNodeReturnTopics429()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getBrowseNodeReturnTopics_500
     */
    public function testGetBrowseNodeReturnTopics500()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getBrowseNodeReturnTopics_503
     */
    public function testGetBrowseNodeReturnTopics503()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getBrowseNodeReturnTrends_200
     */
    public function testGetBrowseNodeReturnTrends200()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testGetBrowseNodeReturnTrends200', 'CustomerFeedbackApi')) {
                $this->assertTrue(true);
                return;
            }
            $jsonSchema = '{
  &quot;description&quot; : &quot;Success.&quot;,
  &quot;headers&quot; : {
    &quot;x-amzn-RequestId&quot; : {
      &quot;description&quot; : &quot;Unique request reference identifier.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    },
    &quot;x-amzn-RateLimit-Limit&quot; : {
      &quot;description&quot; : &quot;Your rate limit (requests per second) for this operation.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    }
  },
  &quot;content&quot; : {
    &quot;application/json&quot; : {
      &quot;schema&quot; : {
        &quot;$ref&quot; : &quot;#/components/schemas/BrowseNodeReturnTrendsResponse&quot;
      },
      &quot;example&quot; : {
        &quot;browseNodeId&quot; : &quot;123456789&quot;,
        &quot;displayName&quot; : &quot;Shoe rack&quot;,
        &quot;marketplaceId&quot; : &quot;ATVPDKIKX0DER&quot;,
        &quot;countryCode&quot; : &quot;US&quot;,
        &quot;dateRange&quot; : {
          &quot;startDate&quot; : &quot;2024-03-22T08:35:43.717Z&quot;,
          &quot;endDate&quot; : &quot;2024-03-22T08:35:43.717Z&quot;
        },
        &quot;returnTrends&quot; : [ {
          &quot;topic&quot; : &quot;Weak fragile &quot;,
          &quot;trendMetrics&quot; : [ {
            &quot;dateRange&quot; : {
              &quot;startDate&quot; : &quot;2024-06-01T00:00:00.000Z&quot;,
              &quot;endDate&quot; : &quot;2024-06-30T00:00:00.000Z&quot;
            },
            &quot;browseNodeMetrics&quot; : {
              &quot;occurrencePercentage&quot; : {
                &quot;allProducts&quot; : 27.54
              }
            }
          }, {
            &quot;dateRange&quot; : {
              &quot;startDate&quot; : &quot;2024-07-01T00:00:00.000Z&quot;,
              &quot;endDate&quot; : &quot;2024-07-30T00:00:00.000Z&quot;
            },
            &quot;browseNodeMetrics&quot; : {
              &quot;occurrencePercentage&quot; : {
                &quot;allProducts&quot; : 27.54
              }
            }
          }, {
            &quot;dateRange&quot; : {
              &quot;startDate&quot; : &quot;2024-08-01T00:00:00.000Z&quot;,
              &quot;endDate&quot; : &quot;2024-08-30T00:00:00.000Z&quot;
            },
            &quot;browseNodeMetrics&quot; : {
              &quot;occurrencePercentage&quot; : {
                &quot;allProducts&quot; : 27.54
              }
            }
          }, {
            &quot;dateRange&quot; : {
              &quot;startDate&quot; : &quot;2024-09-01T00:00:00.000Z&quot;,
              &quot;endDate&quot; : &quot;2024-09-30T00:00:00.000Z&quot;
            },
            &quot;browseNodeMetrics&quot; : {
              &quot;occurrencePercentage&quot; : {
                &quot;allProducts&quot; : 27.54
              }
            }
          }, {
            &quot;dateRange&quot; : {
              &quot;startDate&quot; : &quot;2024-10-01T00:00:00.000Z&quot;,
              &quot;endDate&quot; : &quot;2024-10-30T00:00:00.000Z&quot;
            },
            &quot;browseNodeMetrics&quot; : {
              &quot;occurrencePercentage&quot; : {
                &quot;allProducts&quot; : 27.54
              }
            }
          }, {
            &quot;dateRange&quot; : {
              &quot;startDate&quot; : &quot;2024-10-01T00:00:00.000Z&quot;,
              &quot;endDate&quot; : &quot;2024-10-30T00:00:00.000Z&quot;
            },
            &quot;browseNodeMetrics&quot; : {
              &quot;occurrencePercentage&quot; : {
                &quot;allProducts&quot; : 27.54
              }
            }
          } ]
        }, {
          &quot;topic&quot; : &quot;Value for Money &quot;,
          &quot;trendMetrics&quot; : [ {
            &quot;dateRange&quot; : {
              &quot;startDate&quot; : &quot;2024-06-01T00:00:00.000Z&quot;,
              &quot;endDate&quot; : &quot;2024-06-30T00:00:00.000Z&quot;
            },
            &quot;browseNodeMetrics&quot; : {
              &quot;occurrencePercentage&quot; : {
                &quot;allProducts&quot; : 27.54
              }
            }
          }, {
            &quot;dateRange&quot; : {
              &quot;startDate&quot; : &quot;2024-07-01T00:00:00.000Z&quot;,
              &quot;endDate&quot; : &quot;2024-07-30T00:00:00.000Z&quot;
            },
            &quot;browseNodeMetrics&quot; : {
              &quot;occurrencePercentage&quot; : {
                &quot;allProducts&quot; : 27.54
              }
            }
          }, {
            &quot;dateRange&quot; : {
              &quot;startDate&quot; : &quot;2024-08-01T00:00:00.000Z&quot;,
              &quot;endDate&quot; : &quot;2024-08-30T00:00:00.000Z&quot;
            },
            &quot;browseNodeMetrics&quot; : {
              &quot;occurrencePercentage&quot; : {
                &quot;allProducts&quot; : 27.54
              }
            }
          }, {
            &quot;dateRange&quot; : {
              &quot;startDate&quot; : &quot;2024-09-01T00:00:00.000Z&quot;,
              &quot;endDate&quot; : &quot;2024-09-30T00:00:00.000Z&quot;
            },
            &quot;browseNodeMetrics&quot; : {
              &quot;occurrencePercentage&quot; : {
                &quot;allProducts&quot; : 27.54
              }
            }
          }, {
            &quot;dateRange&quot; : {
              &quot;startDate&quot; : &quot;2024-10-01T00:00:00.000Z&quot;,
              &quot;endDate&quot; : &quot;2024-10-30T00:00:00.000Z&quot;
            },
            &quot;browseNodeMetrics&quot; : {
              &quot;occurrencePercentage&quot; : {
                &quot;allProducts&quot; : 27.54
              }
            }
          }, {
            &quot;dateRange&quot; : {
              &quot;startDate&quot; : &quot;2024-10-01T00:00:00.000Z&quot;,
              &quot;endDate&quot; : &quot;2024-10-30T00:00:00.000Z&quot;
            },
            &quot;browseNodeMetrics&quot; : {
              &quot;occurrencePercentage&quot; : {
                &quot;allProducts&quot; : 27.54
              }
            }
          } ]
        } ]
      }
    }
  },
  &quot;x-amzn-api-sandbox&quot; : {
    &quot;static&quot; : [ {
      &quot;request&quot; : {
        &quot;parameters&quot; : {
          &quot;browseNodeId&quot; : {
            &quot;value&quot; : &quot;123456789&quot;
          },
          &quot;marketplaceId&quot; : {
            &quot;value&quot; : &quot;ATVPDKIKX0DER&quot;
          }
        }
      },
      &quot;response&quot; : {
        &quot;browseNodeId&quot; : &quot;123456789&quot;,
        &quot;displayName&quot; : &quot;Shoe rack&quot;,
        &quot;marketplaceId&quot; : &quot;ATVPDKIKX0DER&quot;,
        &quot;countryCode&quot; : &quot;US&quot;,
        &quot;dateRange&quot; : {
          &quot;startDate&quot; : &quot;2024-03-22T08:35:43.717Z&quot;,
          &quot;endDate&quot; : &quot;2024-03-22T08:35:43.717Z&quot;
        },
        &quot;returnTrends&quot; : [ {
          &quot;topic&quot; : &quot;Weak fragile &quot;,
          &quot;trendMetrics&quot; : [ {
            &quot;dateRange&quot; : {
              &quot;startDate&quot; : &quot;2024-06-01T00:00:00.000Z&quot;,
              &quot;endDate&quot; : &quot;2024-06-30T00:00:00.000Z&quot;
            },
            &quot;browseNodeMetrics&quot; : {
              &quot;occurrencePercentage&quot; : {
                &quot;allProducts&quot; : 27.54
              }
            }
          }, {
            &quot;dateRange&quot; : {
              &quot;startDate&quot; : &quot;2024-07-01T00:00:00.000Z&quot;,
              &quot;endDate&quot; : &quot;2024-07-30T00:00:00.000Z&quot;
            },
            &quot;browseNodeMetrics&quot; : {
              &quot;occurrencePercentage&quot; : {
                &quot;allProducts&quot; : 27.54
              }
            }
          }, {
            &quot;dateRange&quot; : {
              &quot;startDate&quot; : &quot;2024-08-01T00:00:00.000Z&quot;,
              &quot;endDate&quot; : &quot;2024-08-30T00:00:00.000Z&quot;
            },
            &quot;browseNodeMetrics&quot; : {
              &quot;occurrencePercentage&quot; : {
                &quot;allProducts&quot; : 27.54
              }
            }
          }, {
            &quot;dateRange&quot; : {
              &quot;startDate&quot; : &quot;2024-09-01T00:00:00.000Z&quot;,
              &quot;endDate&quot; : &quot;2024-09-30T00:00:00.000Z&quot;
            },
            &quot;browseNodeMetrics&quot; : {
              &quot;occurrencePercentage&quot; : {
                &quot;allProducts&quot; : 27.54
              }
            }
          }, {
            &quot;dateRange&quot; : {
              &quot;startDate&quot; : &quot;2024-10-01T00:00:00.000Z&quot;,
              &quot;endDate&quot; : &quot;2024-10-30T00:00:00.000Z&quot;
            },
            &quot;browseNodeMetrics&quot; : {
              &quot;occurrencePercentage&quot; : {
                &quot;allProducts&quot; : 27.54
              }
            }
          }, {
            &quot;dateRange&quot; : {
              &quot;startDate&quot; : &quot;2024-10-01T00:00:00.000Z&quot;,
              &quot;endDate&quot; : &quot;2024-10-30T00:00:00.000Z&quot;
            },
            &quot;browseNodeMetrics&quot; : {
              &quot;occurrencePercentage&quot; : {
                &quot;allProducts&quot; : 27.54
              }
            }
          } ]
        }, {
          &quot;topic&quot; : &quot;Value for Money &quot;,
          &quot;trendMetrics&quot; : [ {
            &quot;dateRange&quot; : {
              &quot;startDate&quot; : &quot;2024-06-01T00:00:00.000Z&quot;,
              &quot;endDate&quot; : &quot;2024-06-30T00:00:00.000Z&quot;
            },
            &quot;browseNodeMetrics&quot; : {
              &quot;occurrencePercentage&quot; : {
                &quot;allProducts&quot; : 27.54
              }
            }
          }, {
            &quot;dateRange&quot; : {
              &quot;startDate&quot; : &quot;2024-07-01T00:00:00.000Z&quot;,
              &quot;endDate&quot; : &quot;2024-07-30T00:00:00.000Z&quot;
            },
            &quot;browseNodeMetrics&quot; : {
              &quot;occurrencePercentage&quot; : {
                &quot;allProducts&quot; : 27.54
              }
            }
          }, {
            &quot;dateRange&quot; : {
              &quot;startDate&quot; : &quot;2024-08-01T00:00:00.000Z&quot;,
              &quot;endDate&quot; : &quot;2024-08-30T00:00:00.000Z&quot;
            },
            &quot;browseNodeMetrics&quot; : {
              &quot;occurrencePercentage&quot; : {
                &quot;allProducts&quot; : 27.54
              }
            }
          }, {
            &quot;dateRange&quot; : {
              &quot;startDate&quot; : &quot;2024-09-01T00:00:00.000Z&quot;,
              &quot;endDate&quot; : &quot;2024-09-30T00:00:00.000Z&quot;
            },
            &quot;browseNodeMetrics&quot; : {
              &quot;occurrencePercentage&quot; : {
                &quot;allProducts&quot; : 27.54
              }
            }
          }, {
            &quot;dateRange&quot; : {
              &quot;startDate&quot; : &quot;2024-10-01T00:00:00.000Z&quot;,
              &quot;endDate&quot; : &quot;2024-10-30T00:00:00.000Z&quot;
            },
            &quot;browseNodeMetrics&quot; : {
              &quot;occurrencePercentage&quot; : {
                &quot;allProducts&quot; : 27.54
              }
            }
          }, {
            &quot;dateRange&quot; : {
              &quot;startDate&quot; : &quot;2024-10-01T00:00:00.000Z&quot;,
              &quot;endDate&quot; : &quot;2024-10-30T00:00:00.000Z&quot;
            },
            &quot;browseNodeMetrics&quot; : {
              &quot;occurrencePercentage&quot; : {
                &quot;allProducts&quot; : 27.54
              }
            }
          } ]
        } ]
      }
    } ]
  }
}';
            $result = $this->testHelper->extractRequestAndResponse(
                $this->apiInstance,
                $jsonSchema,
                'getBrowseNodeReturnTrends'
            );
            $requestParams = $result['requestParams'];
            $expectedResponse = $result['expectedResponse'];

            // Change Time Format if it requires
            $specificTimeFormat = $this->testHelper->getDateTimeFormatForCase('CustomerFeedbackApi');
            if ($specificTimeFormat) {
                ObjectSerializer::setDateTimeFormat($specificTimeFormat);
            }

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->getBrowseNodeReturnTrendsWithHttpInfo(...array_values($requestParams));

            // Assert the response code
            $this->assertHttpStatusCode(200, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 200, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 200);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for getBrowseNodeReturnTrends_204
     */
    public function testGetBrowseNodeReturnTrends204()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testGetBrowseNodeReturnTrends204', 'CustomerFeedbackApi')) {
                $this->assertTrue(true);
                return;
            }
            $jsonSchema = '{
  &quot;description&quot; : &quot;Success.&quot;,
  &quot;headers&quot; : {
    &quot;x-amzn-RequestId&quot; : {
      &quot;description&quot; : &quot;Unique request reference identifier.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    },
    &quot;x-amzn-RateLimit-Limit&quot; : {
      &quot;description&quot; : &quot;Your rate limit (requests per second) for this operation.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    }
  },
  &quot;content&quot; : {
    &quot;application/json&quot; : {
      &quot;example&quot; : { }
    }
  },
  &quot;x-amzn-api-sandbox&quot; : {
    &quot;static&quot; : [ {
      &quot;request&quot; : {
        &quot;parameters&quot; : {
          &quot;browseNodeId&quot; : {
            &quot;value&quot; : &quot;123456789&quot;
          },
          &quot;marketplaceId&quot; : {
            &quot;value&quot; : &quot;ATVPDKIKR0DER&quot;
          }
        }
      },
      &quot;response&quot; : { }
    } ]
  }
}';
            $result = $this->testHelper->extractRequestAndResponse(
                $this->apiInstance,
                $jsonSchema,
                'getBrowseNodeReturnTrends'
            );
            $requestParams = $result['requestParams'];
            $expectedResponse = $result['expectedResponse'];

            // Change Time Format if it requires
            $specificTimeFormat = $this->testHelper->getDateTimeFormatForCase('CustomerFeedbackApi');
            if ($specificTimeFormat) {
                ObjectSerializer::setDateTimeFormat($specificTimeFormat);
            }

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->getBrowseNodeReturnTrendsWithHttpInfo(...array_values($requestParams));

            // Assert the response code
            $this->assertHttpStatusCode(204, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 204, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 204);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for getBrowseNodeReturnTrends_400
     */
    public function testGetBrowseNodeReturnTrends400()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testGetBrowseNodeReturnTrends400', 'CustomerFeedbackApi')) {
                $this->assertTrue(true);
                return;
            }
            $jsonSchema = '{
  &quot;description&quot; : &quot;Request has missing or invalid parameters and cannot be parsed.&quot;,
  &quot;headers&quot; : {
    &quot;x-amzn-RequestId&quot; : {
      &quot;description&quot; : &quot;Unique request reference identifier.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    },
    &quot;x-amzn-RateLimit-Limit&quot; : {
      &quot;description&quot; : &quot;Your rate limit (requests per second) for this operation.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    }
  },
  &quot;content&quot; : {
    &quot;application/json&quot; : {
      &quot;schema&quot; : {
        &quot;$ref&quot; : &quot;#/components/schemas/ErrorList&quot;
      }
    }
  },
  &quot;x-amzn-api-sandbox&quot; : {
    &quot;static&quot; : [ {
      &quot;request&quot; : {
        &quot;parameters&quot; : {
          &quot;browseNodeId&quot; : {
            &quot;value&quot; : &quot;123456&quot;
          },
          &quot;marketplaceId&quot; : {
            &quot;value&quot; : &quot;abcd&quot;
          }
        }
      },
      &quot;response&quot; : {
        &quot;errors&quot; : [ {
          &quot;code&quot; : &quot;InvalidInput&quot;,
          &quot;message&quot; : &quot;Invalid input.&quot;
        } ]
      }
    } ]
  }
}';
            $result = $this->testHelper->extractRequestAndResponse(
                $this->apiInstance,
                $jsonSchema,
                'getBrowseNodeReturnTrends'
            );
            $requestParams = $result['requestParams'];
            $expectedResponse = $result['expectedResponse'];

            // Change Time Format if it requires
            $specificTimeFormat = $this->testHelper->getDateTimeFormatForCase('CustomerFeedbackApi');
            if ($specificTimeFormat) {
                ObjectSerializer::setDateTimeFormat($specificTimeFormat);
            }

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->getBrowseNodeReturnTrendsWithHttpInfo(...array_values($requestParams));

            // Assert the response code
            $this->assertHttpStatusCode(400, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 400, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 400);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for getBrowseNodeReturnTrends_403
     */
    public function testGetBrowseNodeReturnTrends403()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getBrowseNodeReturnTrends_404
     */
    public function testGetBrowseNodeReturnTrends404()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getBrowseNodeReturnTrends_413
     */
    public function testGetBrowseNodeReturnTrends413()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getBrowseNodeReturnTrends_415
     */
    public function testGetBrowseNodeReturnTrends415()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getBrowseNodeReturnTrends_429
     */
    public function testGetBrowseNodeReturnTrends429()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getBrowseNodeReturnTrends_500
     */
    public function testGetBrowseNodeReturnTrends500()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getBrowseNodeReturnTrends_503
     */
    public function testGetBrowseNodeReturnTrends503()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getBrowseNodeReviewTopics_200
     */
    public function testGetBrowseNodeReviewTopics200()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testGetBrowseNodeReviewTopics200', 'CustomerFeedbackApi')) {
                $this->assertTrue(true);
                return;
            }
            $jsonSchema = '{
  &quot;description&quot; : &quot;Success.&quot;,
  &quot;headers&quot; : {
    &quot;x-amzn-RequestId&quot; : {
      &quot;description&quot; : &quot;Unique request reference identifier.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    },
    &quot;x-amzn-RateLimit-Limit&quot; : {
      &quot;description&quot; : &quot;Your rate limit (requests per second) for this operation.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    }
  },
  &quot;content&quot; : {
    &quot;application/json&quot; : {
      &quot;schema&quot; : {
        &quot;$ref&quot; : &quot;#/components/schemas/BrowseNodeReviewTopicsResponse&quot;
      },
      &quot;example&quot; : {
        &quot;browseNodeId&quot; : &quot;123456789&quot;,
        &quot;displayName&quot; : &quot;Shoe rack&quot;,
        &quot;marketplaceId&quot; : &quot;US&quot;,
        &quot;countryCode&quot; : &quot;US&quot;,
        &quot;dateRange&quot; : {
          &quot;startDate&quot; : &quot;2024-03-22T08:35:43.717Z&quot;,
          &quot;endDate&quot; : &quot;2024-03-22T08:35:43.717Z&quot;
        },
        &quot;topics&quot; : {
          &quot;positiveTopics&quot; : [ {
            &quot;topic&quot; : &quot;Assembly/Installation&quot;,
            &quot;browseNodeMetrics&quot; : {
              &quot;occurrencePercentage&quot; : {
                &quot;allProducts&quot; : 27.5,
                &quot;topTwentyFivePercentProducts&quot; : 13.5
              },
              &quot;starRatingImpact&quot; : {
                &quot;topTwentyFivePercentProducts&quot; : 1.85,
                &quot;allProducts&quot; : 1.1
              }
            },
            &quot;reviewSnippets&quot; : [ &quot;Easy installation!&quot;, &quot;Easy to install.&quot;, &quot;Easy to assemble&quot; ],
            &quot;subtopics&quot; : [ {
              &quot;subtopic&quot; : &quot;Simple and easy to assemble&quot;,
              &quot;metrics&quot; : {
                &quot;occurrencePercentage&quot; : 45.47
              },
              &quot;reviewSnippets&quot; : [ &quot;Easy installation!&quot;, &quot;Not difficult to assemble.&quot;, &quot;Easy to assemble&quot; ]
            }, {
              &quot;subtopic&quot; : &quot;easy to put together and quick&quot;,
              &quot;metrics&quot; : {
                &quot;occurrencePercentage&quot; : 24.47
              },
              &quot;reviewSnippets&quot; : [ &quot;Easy to put together!!.&quot;, &quot;Putting the product togetherwas alot however this saved so much room in my closet&quot;, &quot;love that it came with the one little tool you needed to putit all together!&quot; ]
            }, {
              &quot;subtopic&quot; : &quot;quick and easy to install&quot;,
              &quot;metrics&quot; : {
                &quot;occurrencePercentage&quot; : 14.47
              },
              &quot;reviewSnippets&quot; : [ &quot;Easy installation!&quot;, &quot;Easy to install.&quot;, &quot;install was straight forward.&quot; ]
            } ]
          }, {
            &quot;topic&quot; : &quot;Strong&quot;,
            &quot;browseNodeMetrics&quot; : {
              &quot;occurrencePercentage&quot; : {
                &quot;allProducts&quot; : 27.3,
                &quot;topTwentyFivePercentProducts&quot; : 13.5
              },
              &quot;starRatingImpact&quot; : {
                &quot;topTwentyFivePercentProducts&quot; : 1.85,
                &quot;allProducts&quot; : 1.1
              }
            },
            &quot;reviewSnippets&quot; : [ &quot;Sturdy and strong.&quot;, &quot;Fairly sturdy.&quot;, &quot;very sturdy&quot; ],
            &quot;subtopics&quot; : [ {
              &quot;subtopic&quot; : &quot;sturdy and well built&quot;,
              &quot;metrics&quot; : {
                &quot;occurrencePercentage&quot; : 24.47
              },
              &quot;reviewSnippets&quot; : [ &quot;very sturdy&quot;, &quot;Sturdiness is ok.&quot;, &quot;Sturdier than expected.&quot; ]
            }, {
              &quot;subtopic&quot; : &quot;durable and sturdy&quot;,
              &quot;metrics&quot; : {
                &quot;occurrencePercentage&quot; : 18.47
              },
              &quot;reviewSnippets&quot; : [ &quot;This IS sturdy.&quot;, &quot;Sturdiness construction.&quot;, &quot;it much sturdier than the other two brands that I have purchased.&quot; ]
            }, {
              &quot;subtopic&quot; : &quot;strong and durable&quot;,
              &quot;metrics&quot; : {
                &quot;occurrencePercentage&quot; : 11.47
              },
              &quot;reviewSnippets&quot; : [ &quot;This IS sturdy.&quot;, &quot;Sturdiness construction.&quot;, &quot;it much sturdier than the other two brands that I have purchased.&quot; ]
            } ]
          } ],
          &quot;negativeTopics&quot; : [ {
            &quot;topic&quot; : &quot;Assembly/Installation&quot;,
            &quot;browseNodeMetrics&quot; : {
              &quot;occurrencePercentage&quot; : {
                &quot;allProducts&quot; : 22,
                &quot;topTwentyFivePercentProducts&quot; : 13.5
              },
              &quot;starRatingImpact&quot; : {
                &quot;topTwentyFivePercentProducts&quot; : -1.85,
                &quot;allProducts&quot; : -1.1
              }
            },
            &quot;reviewSnippets&quot; : [ &quot;Difficult to assemble&quot;, &quot;Difficult to assemble&quot;, &quot;impossible to put together&quot; ],
            &quot;subtopics&quot; : [ {
              &quot;subtopic&quot; : &quot;difficult to put together&quot;,
              &quot;metrics&quot; : {
                &quot;occurrencePercentage&quot; : 24.47
              },
              &quot;reviewSnippets&quot; : [ &quot;impossible to put together&quot;, &quot;Had a little hard time putting together either.&quot; ]
            }, {
              &quot;subtopic&quot; : &quot;hard to assemble&quot;,
              &quot;metrics&quot; : {
                &quot;occurrencePercentage&quot; : 21.47
              },
              &quot;reviewSnippets&quot; : [ &quot;impossible to put together&quot;, &quot;Had a little hard time putting together either.&quot; ]
            } ]
          } ]
        }
      }
    }
  },
  &quot;x-amzn-api-sandbox&quot; : {
    &quot;static&quot; : [ {
      &quot;request&quot; : {
        &quot;parameters&quot; : {
          &quot;browseNodeId&quot; : {
            &quot;value&quot; : &quot;123456789&quot;
          },
          &quot;marketplaceId&quot; : {
            &quot;value&quot; : &quot;ATVPDKIKX0DER&quot;
          },
          &quot;sortBy&quot; : {
            &quot;value&quot; : &quot;STAR_RATING_IMPACT&quot;
          }
        }
      },
      &quot;response&quot; : {
        &quot;browseNodeId&quot; : &quot;123456789&quot;,
        &quot;displayName&quot; : &quot;Shoe rack&quot;,
        &quot;marketplaceId&quot; : &quot;US&quot;,
        &quot;countryCode&quot; : &quot;US&quot;,
        &quot;dateRange&quot; : {
          &quot;startDate&quot; : &quot;2024-03-22T08:35:43.717Z&quot;,
          &quot;endDate&quot; : &quot;2024-03-22T08:35:43.717Z&quot;
        },
        &quot;topics&quot; : {
          &quot;positiveTopics&quot; : [ {
            &quot;topic&quot; : &quot;Assembly/Installation&quot;,
            &quot;browseNodeMetrics&quot; : {
              &quot;occurrencePercentage&quot; : {
                &quot;allProducts&quot; : 27.5,
                &quot;topTwentyFivePercentProducts&quot; : 13.5
              },
              &quot;starRatingImpact&quot; : {
                &quot;topTwentyFivePercentProducts&quot; : 1.85,
                &quot;allProducts&quot; : 1.1
              }
            },
            &quot;reviewSnippets&quot; : [ &quot;Easy installation!&quot;, &quot;Easy to install.&quot;, &quot;Easy to assemble&quot; ],
            &quot;subtopics&quot; : [ {
              &quot;subtopic&quot; : &quot;Simple and easy to assemble&quot;,
              &quot;metrics&quot; : {
                &quot;occurrencePercentage&quot; : 45.47
              },
              &quot;reviewSnippets&quot; : [ &quot;Easy installation!&quot;, &quot;Not difficult to assemble.&quot;, &quot;Easy to assemble&quot; ]
            }, {
              &quot;subtopic&quot; : &quot;easy to put together and quick&quot;,
              &quot;metrics&quot; : {
                &quot;occurrencePercentage&quot; : 24.47
              },
              &quot;reviewSnippets&quot; : [ &quot;Easy to put together!!.&quot;, &quot;Putting the product togetherwas alot however this saved so much room in my closet&quot;, &quot;love that it came with the one little tool you needed to putit all together!&quot; ]
            }, {
              &quot;subtopic&quot; : &quot;quick and easy to install&quot;,
              &quot;metrics&quot; : {
                &quot;occurrencePercentage&quot; : 14.47
              },
              &quot;reviewSnippets&quot; : [ &quot;Easy installation!&quot;, &quot;Easy to install.&quot;, &quot;install was straight forward.&quot; ]
            } ]
          }, {
            &quot;topic&quot; : &quot;Strong&quot;,
            &quot;browseNodeMetrics&quot; : {
              &quot;occurrencePercentage&quot; : {
                &quot;allProducts&quot; : 27.3,
                &quot;topTwentyFivePercentProducts&quot; : 13.5
              },
              &quot;starRatingImpact&quot; : {
                &quot;topTwentyFivePercentProducts&quot; : 1.85,
                &quot;allProducts&quot; : 1.1
              }
            },
            &quot;reviewSnippets&quot; : [ &quot;Sturdy and strong.&quot;, &quot;Fairly sturdy.&quot;, &quot;very sturdy&quot; ],
            &quot;subtopics&quot; : [ {
              &quot;subtopic&quot; : &quot;sturdy and well built&quot;,
              &quot;metrics&quot; : {
                &quot;occurrencePercentage&quot; : 24.47
              },
              &quot;reviewSnippets&quot; : [ &quot;very sturdy&quot;, &quot;Sturdiness is ok.&quot;, &quot;Sturdier than expected.&quot; ]
            }, {
              &quot;subtopic&quot; : &quot;durable and sturdy&quot;,
              &quot;metrics&quot; : {
                &quot;occurrencePercentage&quot; : 18.47
              },
              &quot;reviewSnippets&quot; : [ &quot;This IS sturdy.&quot;, &quot;Sturdiness construction.&quot;, &quot;it much sturdier than the other two brands that I have purchased.&quot; ]
            }, {
              &quot;subtopic&quot; : &quot;strong and durable&quot;,
              &quot;metrics&quot; : {
                &quot;occurrencePercentage&quot; : 11.47
              },
              &quot;reviewSnippets&quot; : [ &quot;This IS sturdy.&quot;, &quot;Sturdiness construction.&quot;, &quot;it much sturdier than the other two brands that I have purchased.&quot; ]
            } ]
          } ],
          &quot;negativeTopics&quot; : [ {
            &quot;topic&quot; : &quot;Assembly/Installation&quot;,
            &quot;browseNodeMetrics&quot; : {
              &quot;occurrencePercentage&quot; : {
                &quot;allProducts&quot; : 22,
                &quot;topTwentyFivePercentProducts&quot; : 13.5
              },
              &quot;starRatingImpact&quot; : {
                &quot;topTwentyFivePercentProducts&quot; : -1.85,
                &quot;allProducts&quot; : -1.1
              }
            },
            &quot;reviewSnippets&quot; : [ &quot;Difficult to assemble&quot;, &quot;Difficult to assemble&quot;, &quot;impossible to put together&quot; ],
            &quot;subtopics&quot; : [ {
              &quot;subtopic&quot; : &quot;difficult to put together&quot;,
              &quot;metrics&quot; : {
                &quot;occurrencePercentage&quot; : 24.47
              },
              &quot;reviewSnippets&quot; : [ &quot;impossible to put together&quot;, &quot;Had a little hard time putting together either.&quot; ]
            }, {
              &quot;subtopic&quot; : &quot;hard to assemble&quot;,
              &quot;metrics&quot; : {
                &quot;occurrencePercentage&quot; : 21.47
              },
              &quot;reviewSnippets&quot; : [ &quot;impossible to put together&quot;, &quot;Had a little hard time putting together either.&quot; ]
            } ]
          } ]
        }
      }
    } ]
  }
}';
            $result = $this->testHelper->extractRequestAndResponse(
                $this->apiInstance,
                $jsonSchema,
                'getBrowseNodeReviewTopics'
            );
            $requestParams = $result['requestParams'];
            $expectedResponse = $result['expectedResponse'];

            // Change Time Format if it requires
            $specificTimeFormat = $this->testHelper->getDateTimeFormatForCase('CustomerFeedbackApi');
            if ($specificTimeFormat) {
                ObjectSerializer::setDateTimeFormat($specificTimeFormat);
            }

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->getBrowseNodeReviewTopicsWithHttpInfo(...array_values($requestParams));

            // Assert the response code
            $this->assertHttpStatusCode(200, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 200, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 200);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for getBrowseNodeReviewTopics_204
     */
    public function testGetBrowseNodeReviewTopics204()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testGetBrowseNodeReviewTopics204', 'CustomerFeedbackApi')) {
                $this->assertTrue(true);
                return;
            }
            $jsonSchema = '{
  &quot;description&quot; : &quot;Success.&quot;,
  &quot;headers&quot; : {
    &quot;x-amzn-RequestId&quot; : {
      &quot;description&quot; : &quot;Unique request reference identifier.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    },
    &quot;x-amzn-RateLimit-Limit&quot; : {
      &quot;description&quot; : &quot;Your rate limit (requests per second) for this operation.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    }
  },
  &quot;content&quot; : {
    &quot;application/json&quot; : {
      &quot;example&quot; : { }
    }
  },
  &quot;x-amzn-api-sandbox&quot; : {
    &quot;static&quot; : [ {
      &quot;request&quot; : {
        &quot;parameters&quot; : {
          &quot;browseNodeId&quot; : {
            &quot;value&quot; : &quot;123456789&quot;
          },
          &quot;marketplaceId&quot; : {
            &quot;value&quot; : &quot;ATVPTKIKX0DER&quot;
          },
          &quot;sortBy&quot; : {
            &quot;value&quot; : &quot;STAR_RATING_IMPACT&quot;
          }
        }
      },
      &quot;response&quot; : { }
    } ]
  }
}';
            $result = $this->testHelper->extractRequestAndResponse(
                $this->apiInstance,
                $jsonSchema,
                'getBrowseNodeReviewTopics'
            );
            $requestParams = $result['requestParams'];
            $expectedResponse = $result['expectedResponse'];

            // Change Time Format if it requires
            $specificTimeFormat = $this->testHelper->getDateTimeFormatForCase('CustomerFeedbackApi');
            if ($specificTimeFormat) {
                ObjectSerializer::setDateTimeFormat($specificTimeFormat);
            }

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->getBrowseNodeReviewTopicsWithHttpInfo(...array_values($requestParams));

            // Assert the response code
            $this->assertHttpStatusCode(204, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 204, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 204);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for getBrowseNodeReviewTopics_400
     */
    public function testGetBrowseNodeReviewTopics400()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testGetBrowseNodeReviewTopics400', 'CustomerFeedbackApi')) {
                $this->assertTrue(true);
                return;
            }
            $jsonSchema = '{
  &quot;description&quot; : &quot;Request has missing or invalid parameters and cannot be parsed.&quot;,
  &quot;headers&quot; : {
    &quot;x-amzn-RequestId&quot; : {
      &quot;description&quot; : &quot;Unique request reference identifier.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    },
    &quot;x-amzn-RateLimit-Limit&quot; : {
      &quot;description&quot; : &quot;Your rate limit (requests per second) for this operation.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    }
  },
  &quot;content&quot; : {
    &quot;application/json&quot; : {
      &quot;schema&quot; : {
        &quot;$ref&quot; : &quot;#/components/schemas/ErrorList&quot;
      }
    }
  },
  &quot;x-amzn-api-sandbox&quot; : {
    &quot;static&quot; : [ {
      &quot;request&quot; : {
        &quot;parameters&quot; : {
          &quot;browseNodeId&quot; : {
            &quot;value&quot; : &quot;123456&quot;
          },
          &quot;marketplaceId&quot; : {
            &quot;value&quot; : &quot;abcd&quot;
          },
          &quot;sortBy&quot; : {
            &quot;value&quot; : &quot;STAR_RATING_IMPACT&quot;
          }
        }
      },
      &quot;response&quot; : {
        &quot;errors&quot; : [ {
          &quot;code&quot; : &quot;InvalidInput&quot;,
          &quot;message&quot; : &quot;Invalid input.&quot;
        } ]
      }
    } ]
  }
}';
            $result = $this->testHelper->extractRequestAndResponse(
                $this->apiInstance,
                $jsonSchema,
                'getBrowseNodeReviewTopics'
            );
            $requestParams = $result['requestParams'];
            $expectedResponse = $result['expectedResponse'];

            // Change Time Format if it requires
            $specificTimeFormat = $this->testHelper->getDateTimeFormatForCase('CustomerFeedbackApi');
            if ($specificTimeFormat) {
                ObjectSerializer::setDateTimeFormat($specificTimeFormat);
            }

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->getBrowseNodeReviewTopicsWithHttpInfo(...array_values($requestParams));

            // Assert the response code
            $this->assertHttpStatusCode(400, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 400, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 400);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for getBrowseNodeReviewTopics_403
     */
    public function testGetBrowseNodeReviewTopics403()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getBrowseNodeReviewTopics_404
     */
    public function testGetBrowseNodeReviewTopics404()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getBrowseNodeReviewTopics_413
     */
    public function testGetBrowseNodeReviewTopics413()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getBrowseNodeReviewTopics_415
     */
    public function testGetBrowseNodeReviewTopics415()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getBrowseNodeReviewTopics_429
     */
    public function testGetBrowseNodeReviewTopics429()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getBrowseNodeReviewTopics_500
     */
    public function testGetBrowseNodeReviewTopics500()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getBrowseNodeReviewTopics_503
     */
    public function testGetBrowseNodeReviewTopics503()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getBrowseNodeReviewTrends_200
     */
    public function testGetBrowseNodeReviewTrends200()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testGetBrowseNodeReviewTrends200', 'CustomerFeedbackApi')) {
                $this->assertTrue(true);
                return;
            }
            $jsonSchema = '{
  &quot;description&quot; : &quot;Success.&quot;,
  &quot;headers&quot; : {
    &quot;x-amzn-RequestId&quot; : {
      &quot;description&quot; : &quot;Unique request reference identifier.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    },
    &quot;x-amzn-RateLimit-Limit&quot; : {
      &quot;description&quot; : &quot;Your rate limit (requests per second) for this operation.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    }
  },
  &quot;content&quot; : {
    &quot;application/json&quot; : {
      &quot;schema&quot; : {
        &quot;$ref&quot; : &quot;#/components/schemas/BrowseNodeReviewTrendsResponse&quot;
      },
      &quot;example&quot; : {
        &quot;browseNodeId&quot; : &quot;123456789&quot;,
        &quot;displayName&quot; : &quot;Shoe rack&quot;,
        &quot;marketplaceId&quot; : &quot;ATVPDKIKX0DER&quot;,
        &quot;countryCode&quot; : &quot;US&quot;,
        &quot;dateRange&quot; : {
          &quot;startDate&quot; : &quot;2024-03-22T08:35:43.717Z&quot;,
          &quot;endDate&quot; : &quot;2024-03-22T08:35:43.717Z&quot;
        },
        &quot;reviewTrends&quot; : {
          &quot;positiveTopics&quot; : [ {
            &quot;topic&quot; : &quot;Quality-Overall &quot;,
            &quot;trendMetrics&quot; : [ {
              &quot;dateRange&quot; : {
                &quot;startDate&quot; : &quot;2024-06-01T00:00:00.000Z&quot;,
                &quot;endDate&quot; : &quot;2024-06-30T00:00:00.000Z&quot;
              },
              &quot;browseNodeMetrics&quot; : {
                &quot;occurrencePercentage&quot; : {
                  &quot;topTwentyFivePercentProducts&quot; : 27.58,
                  &quot;allProducts&quot; : 15.78
                }
              }
            }, {
              &quot;dateRange&quot; : {
                &quot;startDate&quot; : &quot;2024-07-01T00:00:00.000Z&quot;,
                &quot;endDate&quot; : &quot;2024-07-30T00:00:00.000Z&quot;
              },
              &quot;browseNodeMetrics&quot; : {
                &quot;occurrencePercentage&quot; : {
                  &quot;topTwentyFivePercentProducts&quot; : 27.58,
                  &quot;allProducts&quot; : 15.78
                }
              }
            }, {
              &quot;dateRange&quot; : {
                &quot;startDate&quot; : &quot;2024-08-01T00:00:00.000Z&quot;,
                &quot;endDate&quot; : &quot;2024-08-30T00:00:00.000Z&quot;
              },
              &quot;browseNodeMetrics&quot; : {
                &quot;occurrencePercentage&quot; : {
                  &quot;topTwentyFivePercentProducts&quot; : 27.58,
                  &quot;allProducts&quot; : 15.78
                }
              }
            }, {
              &quot;dateRange&quot; : {
                &quot;startDate&quot; : &quot;2024-09-01T00:00:00.000Z&quot;,
                &quot;endDate&quot; : &quot;2024-09-30T00:00:00.000Z&quot;
              },
              &quot;browseNodeMetrics&quot; : {
                &quot;occurrencePercentage&quot; : {
                  &quot;topTwentyFivePercentProducts&quot; : 27.58,
                  &quot;allProducts&quot; : 15.78
                }
              }
            }, {
              &quot;dateRange&quot; : {
                &quot;startDate&quot; : &quot;2024-10-01T00:00:00.000Z&quot;,
                &quot;endDate&quot; : &quot;2024-10-30T00:00:00.000Z&quot;
              },
              &quot;browseNodeMetrics&quot; : {
                &quot;occurrencePercentage&quot; : {
                  &quot;topTwentyFivePercentProducts&quot; : 27.58,
                  &quot;allProducts&quot; : 15.78
                }
              }
            }, {
              &quot;dateRange&quot; : {
                &quot;startDate&quot; : &quot;2024-10-01T00:00:00.000Z&quot;,
                &quot;endDate&quot; : &quot;2024-10-30T00:00:00.000Z&quot;
              },
              &quot;browseNodeMetrics&quot; : {
                &quot;occurrencePercentage&quot; : {
                  &quot;topTwentyFivePercentProducts&quot; : 27.58,
                  &quot;allProducts&quot; : 15.78
                }
              }
            } ]
          }, {
            &quot;topic&quot; : &quot;Assembly/Installation &quot;,
            &quot;trendMetrics&quot; : [ {
              &quot;dateRange&quot; : {
                &quot;startDate&quot; : &quot;2024-06-01T00:00:00.000Z&quot;,
                &quot;endDate&quot; : &quot;2024-06-30T00:00:00.000Z&quot;
              },
              &quot;browseNodeMetrics&quot; : {
                &quot;occurrencePercentage&quot; : {
                  &quot;topTwentyFivePercentProducts&quot; : 27.58,
                  &quot;allProducts&quot; : 15.78
                }
              }
            }, {
              &quot;dateRange&quot; : {
                &quot;startDate&quot; : &quot;2024-07-01T00:00:00.000Z&quot;,
                &quot;endDate&quot; : &quot;2024-07-30T00:00:00.000Z&quot;
              },
              &quot;browseNodeMetrics&quot; : {
                &quot;occurrencePercentage&quot; : {
                  &quot;topTwentyFivePercentProducts&quot; : 27.58,
                  &quot;allProducts&quot; : 15.78
                }
              }
            }, {
              &quot;dateRange&quot; : {
                &quot;startDate&quot; : &quot;2024-08-01T00:00:00.000Z&quot;,
                &quot;endDate&quot; : &quot;2024-08-30T00:00:00.000Z&quot;
              },
              &quot;browseNodeMetrics&quot; : {
                &quot;occurrencePercentage&quot; : {
                  &quot;topTwentyFivePercentProducts&quot; : 27.58,
                  &quot;allProducts&quot; : 15.78
                }
              }
            }, {
              &quot;dateRange&quot; : {
                &quot;startDate&quot; : &quot;2024-09-01T00:00:00.000Z&quot;,
                &quot;endDate&quot; : &quot;2024-09-30T00:00:00.000Z&quot;
              },
              &quot;browseNodeMetrics&quot; : {
                &quot;occurrencePercentage&quot; : {
                  &quot;topTwentyFivePercentProducts&quot; : 27.58,
                  &quot;allProducts&quot; : 15.78
                }
              }
            }, {
              &quot;dateRange&quot; : {
                &quot;startDate&quot; : &quot;2024-10-01T00:00:00.000Z&quot;,
                &quot;endDate&quot; : &quot;2024-10-30T00:00:00.000Z&quot;
              },
              &quot;browseNodeMetrics&quot; : {
                &quot;occurrencePercentage&quot; : {
                  &quot;topTwentyFivePercentProducts&quot; : 27.58,
                  &quot;allProducts&quot; : 15.78
                }
              }
            }, {
              &quot;dateRange&quot; : {
                &quot;startDate&quot; : &quot;2024-10-01T00:00:00.000Z&quot;,
                &quot;endDate&quot; : &quot;2024-10-30T00:00:00.000Z&quot;
              },
              &quot;browseNodeMetrics&quot; : {
                &quot;occurrencePercentage&quot; : {
                  &quot;topTwentyFivePercentProducts&quot; : 27.58,
                  &quot;allProducts&quot; : 15.78
                }
              }
            } ]
          } ],
          &quot;negativeTopics&quot; : [ {
            &quot;topic&quot; : &quot;Weak fragile &quot;,
            &quot;trendMetrics&quot; : [ {
              &quot;dateRange&quot; : {
                &quot;startDate&quot; : &quot;2024-06-01T00:00:00.000Z&quot;,
                &quot;endDate&quot; : &quot;2024-06-30T00:00:00.000Z&quot;
              },
              &quot;browseNodeMetrics&quot; : {
                &quot;occurrencePercentage&quot; : {
                  &quot;topTwentyFivePercentProducts&quot; : 27.58,
                  &quot;allProducts&quot; : 15.78
                }
              }
            }, {
              &quot;dateRange&quot; : {
                &quot;startDate&quot; : &quot;2024-07-01T00:00:00.000Z&quot;,
                &quot;endDate&quot; : &quot;2024-07-30T00:00:00.000Z&quot;
              },
              &quot;browseNodeMetrics&quot; : {
                &quot;occurrencePercentage&quot; : {
                  &quot;topTwentyFivePercentProducts&quot; : 27.58,
                  &quot;allProducts&quot; : 15.78
                }
              }
            }, {
              &quot;dateRange&quot; : {
                &quot;startDate&quot; : &quot;2024-08-01T00:00:00.000Z&quot;,
                &quot;endDate&quot; : &quot;2024-08-30T00:00:00.000Z&quot;
              },
              &quot;browseNodeMetrics&quot; : {
                &quot;occurrencePercentage&quot; : {
                  &quot;topTwentyFivePercentProducts&quot; : 27.58,
                  &quot;allProducts&quot; : 15.78
                }
              }
            }, {
              &quot;dateRange&quot; : {
                &quot;startDate&quot; : &quot;2024-09-01T00:00:00.000Z&quot;,
                &quot;endDate&quot; : &quot;2024-09-30T00:00:00.000Z&quot;
              },
              &quot;browseNodeMetrics&quot; : {
                &quot;occurrencePercentage&quot; : {
                  &quot;topTwentyFivePercentProducts&quot; : 27.58,
                  &quot;allProducts&quot; : 15.78
                }
              }
            }, {
              &quot;dateRange&quot; : {
                &quot;startDate&quot; : &quot;2024-10-01T00:00:00.000Z&quot;,
                &quot;endDate&quot; : &quot;2024-10-30T00:00:00.000Z&quot;
              },
              &quot;browseNodeMetrics&quot; : {
                &quot;occurrencePercentage&quot; : {
                  &quot;topTwentyFivePercentProducts&quot; : 27.58,
                  &quot;allProducts&quot; : 15.78
                }
              }
            }, {
              &quot;dateRange&quot; : {
                &quot;startDate&quot; : &quot;2024-10-01T00:00:00.000Z&quot;,
                &quot;endDate&quot; : &quot;2024-10-30T00:00:00.000Z&quot;
              },
              &quot;browseNodeMetrics&quot; : {
                &quot;occurrencePercentage&quot; : {
                  &quot;topTwentyFivePercentProducts&quot; : 27.58,
                  &quot;allProducts&quot; : 15.78
                }
              }
            } ]
          }, {
            &quot;topic&quot; : &quot;Value for Money &quot;,
            &quot;trendMetrics&quot; : [ {
              &quot;dateRange&quot; : {
                &quot;startDate&quot; : &quot;2024-06-01T00:00:00.000Z&quot;,
                &quot;endDate&quot; : &quot;2024-06-30T00:00:00.000Z&quot;
              },
              &quot;browseNodeMetrics&quot; : {
                &quot;occurrencePercentage&quot; : {
                  &quot;topTwentyFivePercentProducts&quot; : 27.58,
                  &quot;allProducts&quot; : 15.78
                }
              }
            }, {
              &quot;dateRange&quot; : {
                &quot;startDate&quot; : &quot;2024-07-01T00:00:00.000Z&quot;,
                &quot;endDate&quot; : &quot;2024-07-30T00:00:00.000Z&quot;
              },
              &quot;browseNodeMetrics&quot; : {
                &quot;occurrencePercentage&quot; : {
                  &quot;topTwentyFivePercentProducts&quot; : 27.58,
                  &quot;allProducts&quot; : 15.78
                }
              }
            }, {
              &quot;dateRange&quot; : {
                &quot;startDate&quot; : &quot;2024-08-01T00:00:00.000Z&quot;,
                &quot;endDate&quot; : &quot;2024-08-30T00:00:00.000Z&quot;
              },
              &quot;browseNodeMetrics&quot; : {
                &quot;occurrencePercentage&quot; : {
                  &quot;topTwentyFivePercentProducts&quot; : 27.58,
                  &quot;allProducts&quot; : 15.78
                }
              }
            }, {
              &quot;dateRange&quot; : {
                &quot;startDate&quot; : &quot;2024-09-01T00:00:00.000Z&quot;,
                &quot;endDate&quot; : &quot;2024-09-30T00:00:00.000Z&quot;
              },
              &quot;browseNodeMetrics&quot; : {
                &quot;occurrencePercentage&quot; : {
                  &quot;topTwentyFivePercentProducts&quot; : 27.58,
                  &quot;allProducts&quot; : 15.78
                }
              }
            }, {
              &quot;dateRange&quot; : {
                &quot;startDate&quot; : &quot;2024-10-01T00:00:00.000Z&quot;,
                &quot;endDate&quot; : &quot;2024-10-30T00:00:00.000Z&quot;
              },
              &quot;browseNodeMetrics&quot; : {
                &quot;occurrencePercentage&quot; : {
                  &quot;topTwentyFivePercentProducts&quot; : 27.58,
                  &quot;allProducts&quot; : 15.78
                }
              }
            }, {
              &quot;dateRange&quot; : {
                &quot;startDate&quot; : &quot;2024-10-01T00:00:00.000Z&quot;,
                &quot;endDate&quot; : &quot;2024-10-30T00:00:00.000Z&quot;
              },
              &quot;browseNodeMetrics&quot; : {
                &quot;occurrencePercentage&quot; : {
                  &quot;topTwentyFivePercentProducts&quot; : 27.58,
                  &quot;allProducts&quot; : 15.78
                }
              }
            } ]
          } ]
        }
      }
    }
  },
  &quot;x-amzn-api-sandbox&quot; : {
    &quot;static&quot; : [ {
      &quot;request&quot; : {
        &quot;parameters&quot; : {
          &quot;browseNodeId&quot; : {
            &quot;value&quot; : &quot;123456789&quot;
          },
          &quot;marketplaceId&quot; : {
            &quot;value&quot; : &quot;ATVPDKIKX0DER&quot;
          }
        }
      },
      &quot;response&quot; : {
        &quot;browseNodeId&quot; : &quot;123456789&quot;,
        &quot;displayName&quot; : &quot;Shoe rack&quot;,
        &quot;marketplaceId&quot; : &quot;ATVPDKIKX0DER&quot;,
        &quot;countryCode&quot; : &quot;US&quot;,
        &quot;dateRange&quot; : {
          &quot;startDate&quot; : &quot;2024-03-22T08:35:43.717Z&quot;,
          &quot;endDate&quot; : &quot;2024-03-22T08:35:43.717Z&quot;
        },
        &quot;reviewTrends&quot; : {
          &quot;positiveTopics&quot; : [ {
            &quot;topic&quot; : &quot;Quality-Overall &quot;,
            &quot;trendMetrics&quot; : [ {
              &quot;dateRange&quot; : {
                &quot;startDate&quot; : &quot;2024-06-01T00:00:00.000Z&quot;,
                &quot;endDate&quot; : &quot;2024-06-30T00:00:00.000Z&quot;
              },
              &quot;browseNodeMetrics&quot; : {
                &quot;occurrencePercentage&quot; : {
                  &quot;topTwentyFivePercentProducts&quot; : 27.58,
                  &quot;allProducts&quot; : 15.78
                }
              }
            }, {
              &quot;dateRange&quot; : {
                &quot;startDate&quot; : &quot;2024-07-01T00:00:00.000Z&quot;,
                &quot;endDate&quot; : &quot;2024-07-30T00:00:00.000Z&quot;
              },
              &quot;browseNodeMetrics&quot; : {
                &quot;occurrencePercentage&quot; : {
                  &quot;topTwentyFivePercentProducts&quot; : 27.58,
                  &quot;allProducts&quot; : 15.78
                }
              }
            }, {
              &quot;dateRange&quot; : {
                &quot;startDate&quot; : &quot;2024-08-01T00:00:00.000Z&quot;,
                &quot;endDate&quot; : &quot;2024-08-30T00:00:00.000Z&quot;
              },
              &quot;browseNodeMetrics&quot; : {
                &quot;occurrencePercentage&quot; : {
                  &quot;topTwentyFivePercentProducts&quot; : 27.58,
                  &quot;allProducts&quot; : 15.78
                }
              }
            }, {
              &quot;dateRange&quot; : {
                &quot;startDate&quot; : &quot;2024-09-01T00:00:00.000Z&quot;,
                &quot;endDate&quot; : &quot;2024-09-30T00:00:00.000Z&quot;
              },
              &quot;browseNodeMetrics&quot; : {
                &quot;occurrencePercentage&quot; : {
                  &quot;topTwentyFivePercentProducts&quot; : 27.58,
                  &quot;allProducts&quot; : 15.78
                }
              }
            }, {
              &quot;dateRange&quot; : {
                &quot;startDate&quot; : &quot;2024-10-01T00:00:00.000Z&quot;,
                &quot;endDate&quot; : &quot;2024-10-30T00:00:00.000Z&quot;
              },
              &quot;browseNodeMetrics&quot; : {
                &quot;occurrencePercentage&quot; : {
                  &quot;topTwentyFivePercentProducts&quot; : 27.58,
                  &quot;allProducts&quot; : 15.78
                }
              }
            }, {
              &quot;dateRange&quot; : {
                &quot;startDate&quot; : &quot;2024-10-01T00:00:00.000Z&quot;,
                &quot;endDate&quot; : &quot;2024-10-30T00:00:00.000Z&quot;
              },
              &quot;browseNodeMetrics&quot; : {
                &quot;occurrencePercentage&quot; : {
                  &quot;topTwentyFivePercentProducts&quot; : 27.58,
                  &quot;allProducts&quot; : 15.78
                }
              }
            } ]
          }, {
            &quot;topic&quot; : &quot;Assembly/Installation &quot;,
            &quot;trendMetrics&quot; : [ {
              &quot;dateRange&quot; : {
                &quot;startDate&quot; : &quot;2024-06-01T00:00:00.000Z&quot;,
                &quot;endDate&quot; : &quot;2024-06-30T00:00:00.000Z&quot;
              },
              &quot;browseNodeMetrics&quot; : {
                &quot;occurrencePercentage&quot; : {
                  &quot;topTwentyFivePercentProducts&quot; : 27.58,
                  &quot;allProducts&quot; : 15.78
                }
              }
            }, {
              &quot;dateRange&quot; : {
                &quot;startDate&quot; : &quot;2024-07-01T00:00:00.000Z&quot;,
                &quot;endDate&quot; : &quot;2024-07-30T00:00:00.000Z&quot;
              },
              &quot;browseNodeMetrics&quot; : {
                &quot;occurrencePercentage&quot; : {
                  &quot;topTwentyFivePercentProducts&quot; : 27.58,
                  &quot;allProducts&quot; : 15.78
                }
              }
            }, {
              &quot;dateRange&quot; : {
                &quot;startDate&quot; : &quot;2024-08-01T00:00:00.000Z&quot;,
                &quot;endDate&quot; : &quot;2024-08-30T00:00:00.000Z&quot;
              },
              &quot;browseNodeMetrics&quot; : {
                &quot;occurrencePercentage&quot; : {
                  &quot;topTwentyFivePercentProducts&quot; : 27.58,
                  &quot;allProducts&quot; : 15.78
                }
              }
            }, {
              &quot;dateRange&quot; : {
                &quot;startDate&quot; : &quot;2024-09-01T00:00:00.000Z&quot;,
                &quot;endDate&quot; : &quot;2024-09-30T00:00:00.000Z&quot;
              },
              &quot;browseNodeMetrics&quot; : {
                &quot;occurrencePercentage&quot; : {
                  &quot;topTwentyFivePercentProducts&quot; : 27.58,
                  &quot;allProducts&quot; : 15.78
                }
              }
            }, {
              &quot;dateRange&quot; : {
                &quot;startDate&quot; : &quot;2024-10-01T00:00:00.000Z&quot;,
                &quot;endDate&quot; : &quot;2024-10-30T00:00:00.000Z&quot;
              },
              &quot;browseNodeMetrics&quot; : {
                &quot;occurrencePercentage&quot; : {
                  &quot;topTwentyFivePercentProducts&quot; : 27.58,
                  &quot;allProducts&quot; : 15.78
                }
              }
            }, {
              &quot;dateRange&quot; : {
                &quot;startDate&quot; : &quot;2024-10-01T00:00:00.000Z&quot;,
                &quot;endDate&quot; : &quot;2024-10-30T00:00:00.000Z&quot;
              },
              &quot;browseNodeMetrics&quot; : {
                &quot;occurrencePercentage&quot; : {
                  &quot;topTwentyFivePercentProducts&quot; : 27.58,
                  &quot;allProducts&quot; : 15.78
                }
              }
            } ]
          } ],
          &quot;negativeTopics&quot; : [ {
            &quot;topic&quot; : &quot;Weak fragile &quot;,
            &quot;trendMetrics&quot; : [ {
              &quot;dateRange&quot; : {
                &quot;startDate&quot; : &quot;2024-06-01T00:00:00.000Z&quot;,
                &quot;endDate&quot; : &quot;2024-06-30T00:00:00.000Z&quot;
              },
              &quot;browseNodeMetrics&quot; : {
                &quot;occurrencePercentage&quot; : {
                  &quot;topTwentyFivePercentProducts&quot; : 27.58,
                  &quot;allProducts&quot; : 15.78
                }
              }
            }, {
              &quot;dateRange&quot; : {
                &quot;startDate&quot; : &quot;2024-07-01T00:00:00.000Z&quot;,
                &quot;endDate&quot; : &quot;2024-07-30T00:00:00.000Z&quot;
              },
              &quot;browseNodeMetrics&quot; : {
                &quot;occurrencePercentage&quot; : {
                  &quot;topTwentyFivePercentProducts&quot; : 27.58,
                  &quot;allProducts&quot; : 15.78
                }
              }
            }, {
              &quot;dateRange&quot; : {
                &quot;startDate&quot; : &quot;2024-08-01T00:00:00.000Z&quot;,
                &quot;endDate&quot; : &quot;2024-08-30T00:00:00.000Z&quot;
              },
              &quot;browseNodeMetrics&quot; : {
                &quot;occurrencePercentage&quot; : {
                  &quot;topTwentyFivePercentProducts&quot; : 27.58,
                  &quot;allProducts&quot; : 15.78
                }
              }
            }, {
              &quot;dateRange&quot; : {
                &quot;startDate&quot; : &quot;2024-09-01T00:00:00.000Z&quot;,
                &quot;endDate&quot; : &quot;2024-09-30T00:00:00.000Z&quot;
              },
              &quot;browseNodeMetrics&quot; : {
                &quot;occurrencePercentage&quot; : {
                  &quot;topTwentyFivePercentProducts&quot; : 27.58,
                  &quot;allProducts&quot; : 15.78
                }
              }
            }, {
              &quot;dateRange&quot; : {
                &quot;startDate&quot; : &quot;2024-10-01T00:00:00.000Z&quot;,
                &quot;endDate&quot; : &quot;2024-10-30T00:00:00.000Z&quot;
              },
              &quot;browseNodeMetrics&quot; : {
                &quot;occurrencePercentage&quot; : {
                  &quot;topTwentyFivePercentProducts&quot; : 27.58,
                  &quot;allProducts&quot; : 15.78
                }
              }
            }, {
              &quot;dateRange&quot; : {
                &quot;startDate&quot; : &quot;2024-10-01T00:00:00.000Z&quot;,
                &quot;endDate&quot; : &quot;2024-10-30T00:00:00.000Z&quot;
              },
              &quot;browseNodeMetrics&quot; : {
                &quot;occurrencePercentage&quot; : {
                  &quot;topTwentyFivePercentProducts&quot; : 27.58,
                  &quot;allProducts&quot; : 15.78
                }
              }
            } ]
          }, {
            &quot;topic&quot; : &quot;Value for Money &quot;,
            &quot;trendMetrics&quot; : [ {
              &quot;dateRange&quot; : {
                &quot;startDate&quot; : &quot;2024-06-01T00:00:00.000Z&quot;,
                &quot;endDate&quot; : &quot;2024-06-30T00:00:00.000Z&quot;
              },
              &quot;browseNodeMetrics&quot; : {
                &quot;occurrencePercentage&quot; : {
                  &quot;topTwentyFivePercentProducts&quot; : 27.58,
                  &quot;allProducts&quot; : 15.78
                }
              }
            }, {
              &quot;dateRange&quot; : {
                &quot;startDate&quot; : &quot;2024-07-01T00:00:00.000Z&quot;,
                &quot;endDate&quot; : &quot;2024-07-30T00:00:00.000Z&quot;
              },
              &quot;browseNodeMetrics&quot; : {
                &quot;occurrencePercentage&quot; : {
                  &quot;topTwentyFivePercentProducts&quot; : 27.58,
                  &quot;allProducts&quot; : 15.78
                }
              }
            }, {
              &quot;dateRange&quot; : {
                &quot;startDate&quot; : &quot;2024-08-01T00:00:00.000Z&quot;,
                &quot;endDate&quot; : &quot;2024-08-30T00:00:00.000Z&quot;
              },
              &quot;browseNodeMetrics&quot; : {
                &quot;occurrencePercentage&quot; : {
                  &quot;topTwentyFivePercentProducts&quot; : 27.58,
                  &quot;allProducts&quot; : 15.78
                }
              }
            }, {
              &quot;dateRange&quot; : {
                &quot;startDate&quot; : &quot;2024-09-01T00:00:00.000Z&quot;,
                &quot;endDate&quot; : &quot;2024-09-30T00:00:00.000Z&quot;
              },
              &quot;browseNodeMetrics&quot; : {
                &quot;occurrencePercentage&quot; : {
                  &quot;topTwentyFivePercentProducts&quot; : 27.58,
                  &quot;allProducts&quot; : 15.78
                }
              }
            }, {
              &quot;dateRange&quot; : {
                &quot;startDate&quot; : &quot;2024-10-01T00:00:00.000Z&quot;,
                &quot;endDate&quot; : &quot;2024-10-30T00:00:00.000Z&quot;
              },
              &quot;browseNodeMetrics&quot; : {
                &quot;occurrencePercentage&quot; : {
                  &quot;topTwentyFivePercentProducts&quot; : 27.58,
                  &quot;allProducts&quot; : 15.78
                }
              }
            }, {
              &quot;dateRange&quot; : {
                &quot;startDate&quot; : &quot;2024-10-01T00:00:00.000Z&quot;,
                &quot;endDate&quot; : &quot;2024-10-30T00:00:00.000Z&quot;
              },
              &quot;browseNodeMetrics&quot; : {
                &quot;occurrencePercentage&quot; : {
                  &quot;topTwentyFivePercentProducts&quot; : 27.58,
                  &quot;allProducts&quot; : 15.78
                }
              }
            } ]
          } ]
        }
      }
    } ]
  }
}';
            $result = $this->testHelper->extractRequestAndResponse(
                $this->apiInstance,
                $jsonSchema,
                'getBrowseNodeReviewTrends'
            );
            $requestParams = $result['requestParams'];
            $expectedResponse = $result['expectedResponse'];

            // Change Time Format if it requires
            $specificTimeFormat = $this->testHelper->getDateTimeFormatForCase('CustomerFeedbackApi');
            if ($specificTimeFormat) {
                ObjectSerializer::setDateTimeFormat($specificTimeFormat);
            }

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->getBrowseNodeReviewTrendsWithHttpInfo(...array_values($requestParams));

            // Assert the response code
            $this->assertHttpStatusCode(200, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 200, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 200);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for getBrowseNodeReviewTrends_204
     */
    public function testGetBrowseNodeReviewTrends204()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testGetBrowseNodeReviewTrends204', 'CustomerFeedbackApi')) {
                $this->assertTrue(true);
                return;
            }
            $jsonSchema = '{
  &quot;description&quot; : &quot;Success.&quot;,
  &quot;headers&quot; : {
    &quot;x-amzn-RequestId&quot; : {
      &quot;description&quot; : &quot;Unique request reference identifier.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    },
    &quot;x-amzn-RateLimit-Limit&quot; : {
      &quot;description&quot; : &quot;Your rate limit (requests per second) for this operation.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    }
  },
  &quot;content&quot; : {
    &quot;application/json&quot; : {
      &quot;example&quot; : { }
    }
  },
  &quot;x-amzn-api-sandbox&quot; : {
    &quot;static&quot; : [ {
      &quot;request&quot; : {
        &quot;parameters&quot; : {
          &quot;browseNodeId&quot; : {
            &quot;value&quot; : &quot;123456789&quot;
          },
          &quot;marketplaceId&quot; : {
            &quot;value&quot; : &quot;ATVPDKIKR0DER&quot;
          }
        }
      },
      &quot;response&quot; : { }
    } ]
  }
}';
            $result = $this->testHelper->extractRequestAndResponse(
                $this->apiInstance,
                $jsonSchema,
                'getBrowseNodeReviewTrends'
            );
            $requestParams = $result['requestParams'];
            $expectedResponse = $result['expectedResponse'];

            // Change Time Format if it requires
            $specificTimeFormat = $this->testHelper->getDateTimeFormatForCase('CustomerFeedbackApi');
            if ($specificTimeFormat) {
                ObjectSerializer::setDateTimeFormat($specificTimeFormat);
            }

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->getBrowseNodeReviewTrendsWithHttpInfo(...array_values($requestParams));

            // Assert the response code
            $this->assertHttpStatusCode(204, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 204, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 204);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for getBrowseNodeReviewTrends_400
     */
    public function testGetBrowseNodeReviewTrends400()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testGetBrowseNodeReviewTrends400', 'CustomerFeedbackApi')) {
                $this->assertTrue(true);
                return;
            }
            $jsonSchema = '{
  &quot;description&quot; : &quot;Request has missing or invalid parameters and cannot be parsed.&quot;,
  &quot;headers&quot; : {
    &quot;x-amzn-RequestId&quot; : {
      &quot;description&quot; : &quot;Unique request reference identifier.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    },
    &quot;x-amzn-RateLimit-Limit&quot; : {
      &quot;description&quot; : &quot;Your rate limit (requests per second) for this operation.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    }
  },
  &quot;content&quot; : {
    &quot;application/json&quot; : {
      &quot;schema&quot; : {
        &quot;$ref&quot; : &quot;#/components/schemas/ErrorList&quot;
      }
    }
  },
  &quot;x-amzn-api-sandbox&quot; : {
    &quot;static&quot; : [ {
      &quot;request&quot; : {
        &quot;parameters&quot; : {
          &quot;browseNodeId&quot; : {
            &quot;value&quot; : &quot;123456789&quot;
          },
          &quot;marketplaceId&quot; : {
            &quot;value&quot; : &quot;abcd&quot;
          }
        }
      },
      &quot;response&quot; : {
        &quot;errors&quot; : [ {
          &quot;code&quot; : &quot;InvalidInput&quot;,
          &quot;message&quot; : &quot;Invalid input.&quot;
        } ]
      }
    } ]
  }
}';
            $result = $this->testHelper->extractRequestAndResponse(
                $this->apiInstance,
                $jsonSchema,
                'getBrowseNodeReviewTrends'
            );
            $requestParams = $result['requestParams'];
            $expectedResponse = $result['expectedResponse'];

            // Change Time Format if it requires
            $specificTimeFormat = $this->testHelper->getDateTimeFormatForCase('CustomerFeedbackApi');
            if ($specificTimeFormat) {
                ObjectSerializer::setDateTimeFormat($specificTimeFormat);
            }

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->getBrowseNodeReviewTrendsWithHttpInfo(...array_values($requestParams));

            // Assert the response code
            $this->assertHttpStatusCode(400, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 400, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 400);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for getBrowseNodeReviewTrends_403
     */
    public function testGetBrowseNodeReviewTrends403()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getBrowseNodeReviewTrends_404
     */
    public function testGetBrowseNodeReviewTrends404()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getBrowseNodeReviewTrends_413
     */
    public function testGetBrowseNodeReviewTrends413()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getBrowseNodeReviewTrends_415
     */
    public function testGetBrowseNodeReviewTrends415()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getBrowseNodeReviewTrends_429
     */
    public function testGetBrowseNodeReviewTrends429()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getBrowseNodeReviewTrends_500
     */
    public function testGetBrowseNodeReviewTrends500()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getBrowseNodeReviewTrends_503
     */
    public function testGetBrowseNodeReviewTrends503()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getItemBrowseNode_200
     */
    public function testGetItemBrowseNode200()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testGetItemBrowseNode200', 'CustomerFeedbackApi')) {
                $this->assertTrue(true);
                return;
            }
            $jsonSchema = '{
  &quot;description&quot; : &quot;Success.&quot;,
  &quot;headers&quot; : {
    &quot;x-amzn-RequestId&quot; : {
      &quot;description&quot; : &quot;Unique request reference identifier.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    },
    &quot;x-amzn-RateLimit-Limit&quot; : {
      &quot;description&quot; : &quot;Your rate limit (requests per second) for this operation.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    }
  },
  &quot;content&quot; : {
    &quot;application/json&quot; : {
      &quot;schema&quot; : {
        &quot;$ref&quot; : &quot;#/components/schemas/BrowseNodeResponse&quot;
      },
      &quot;example&quot; : {
        &quot;browseNodeId&quot; : &quot;37584319&quot;,
        &quot;displayName&quot; : &quot;Shoes &amp; Jewelry&quot;
      }
    }
  },
  &quot;x-amzn-api-sandbox&quot; : {
    &quot;static&quot; : [ {
      &quot;request&quot; : {
        &quot;parameters&quot; : {
          &quot;asin&quot; : {
            &quot;value&quot; : &quot;B08PD3JNPF&quot;
          },
          &quot;marketplaceId&quot; : {
            &quot;value&quot; : &quot;ATVPDKIKX0DER&quot;
          }
        }
      },
      &quot;response&quot; : {
        &quot;browseNodeId&quot; : &quot;37584319&quot;,
        &quot;displayName&quot; : &quot;Shoes &amp; Jewelry&quot;
      }
    } ]
  }
}';
            $result = $this->testHelper->extractRequestAndResponse(
                $this->apiInstance,
                $jsonSchema,
                'getItemBrowseNode'
            );
            $requestParams = $result['requestParams'];
            $expectedResponse = $result['expectedResponse'];

            // Change Time Format if it requires
            $specificTimeFormat = $this->testHelper->getDateTimeFormatForCase('CustomerFeedbackApi');
            if ($specificTimeFormat) {
                ObjectSerializer::setDateTimeFormat($specificTimeFormat);
            }

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->getItemBrowseNodeWithHttpInfo(...array_values($requestParams));

            // Assert the response code
            $this->assertHttpStatusCode(200, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 200, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 200);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for getItemBrowseNode_204
     */
    public function testGetItemBrowseNode204()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testGetItemBrowseNode204', 'CustomerFeedbackApi')) {
                $this->assertTrue(true);
                return;
            }
            $jsonSchema = '{
  &quot;description&quot; : &quot;Success.&quot;,
  &quot;headers&quot; : {
    &quot;x-amzn-RequestId&quot; : {
      &quot;description&quot; : &quot;Unique request reference identifier.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    },
    &quot;x-amzn-RateLimit-Limit&quot; : {
      &quot;description&quot; : &quot;Your rate limit (requests per second) for this operation.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    }
  },
  &quot;content&quot; : {
    &quot;application/json&quot; : {
      &quot;example&quot; : { }
    }
  },
  &quot;x-amzn-api-sandbox&quot; : {
    &quot;static&quot; : [ {
      &quot;request&quot; : {
        &quot;parameters&quot; : {
          &quot;asin&quot; : {
            &quot;value&quot; : &quot;B08PD3JTPF&quot;
          },
          &quot;marketplaceId&quot; : {
            &quot;value&quot; : &quot;ATVPDKIKR0DER&quot;
          }
        }
      },
      &quot;response&quot; : { }
    } ]
  }
}';
            $result = $this->testHelper->extractRequestAndResponse(
                $this->apiInstance,
                $jsonSchema,
                'getItemBrowseNode'
            );
            $requestParams = $result['requestParams'];
            $expectedResponse = $result['expectedResponse'];

            // Change Time Format if it requires
            $specificTimeFormat = $this->testHelper->getDateTimeFormatForCase('CustomerFeedbackApi');
            if ($specificTimeFormat) {
                ObjectSerializer::setDateTimeFormat($specificTimeFormat);
            }

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->getItemBrowseNodeWithHttpInfo(...array_values($requestParams));

            // Assert the response code
            $this->assertHttpStatusCode(204, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 204, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 204);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for getItemBrowseNode_400
     */
    public function testGetItemBrowseNode400()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testGetItemBrowseNode400', 'CustomerFeedbackApi')) {
                $this->assertTrue(true);
                return;
            }
            $jsonSchema = '{
  &quot;description&quot; : &quot;Request has missing or invalid parameters and cannot be parsed.&quot;,
  &quot;headers&quot; : {
    &quot;x-amzn-RequestId&quot; : {
      &quot;description&quot; : &quot;Unique request reference identifier.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    },
    &quot;x-amzn-RateLimit-Limit&quot; : {
      &quot;description&quot; : &quot;Your rate limit (requests per second) for this operation.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    }
  },
  &quot;content&quot; : {
    &quot;application/json&quot; : {
      &quot;schema&quot; : {
        &quot;$ref&quot; : &quot;#/components/schemas/ErrorList&quot;
      }
    }
  },
  &quot;x-amzn-api-sandbox&quot; : {
    &quot;static&quot; : [ {
      &quot;request&quot; : {
        &quot;parameters&quot; : {
          &quot;asin&quot; : {
            &quot;value&quot; : &quot;123456&quot;
          },
          &quot;marketplaceId&quot; : {
            &quot;value&quot; : &quot;abcd&quot;
          }
        }
      },
      &quot;response&quot; : {
        &quot;errors&quot; : [ {
          &quot;code&quot; : &quot;InvalidInput&quot;,
          &quot;message&quot; : &quot;Invalid input.&quot;
        } ]
      }
    } ]
  }
}';
            $result = $this->testHelper->extractRequestAndResponse(
                $this->apiInstance,
                $jsonSchema,
                'getItemBrowseNode'
            );
            $requestParams = $result['requestParams'];
            $expectedResponse = $result['expectedResponse'];

            // Change Time Format if it requires
            $specificTimeFormat = $this->testHelper->getDateTimeFormatForCase('CustomerFeedbackApi');
            if ($specificTimeFormat) {
                ObjectSerializer::setDateTimeFormat($specificTimeFormat);
            }

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->getItemBrowseNodeWithHttpInfo(...array_values($requestParams));

            // Assert the response code
            $this->assertHttpStatusCode(400, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 400, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 400);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for getItemBrowseNode_403
     */
    public function testGetItemBrowseNode403()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getItemBrowseNode_404
     */
    public function testGetItemBrowseNode404()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getItemBrowseNode_413
     */
    public function testGetItemBrowseNode413()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getItemBrowseNode_415
     */
    public function testGetItemBrowseNode415()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getItemBrowseNode_429
     */
    public function testGetItemBrowseNode429()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getItemBrowseNode_500
     */
    public function testGetItemBrowseNode500()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getItemBrowseNode_503
     */
    public function testGetItemBrowseNode503()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getItemReviewTopics_200
     */
    public function testGetItemReviewTopics200()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testGetItemReviewTopics200', 'CustomerFeedbackApi')) {
                $this->assertTrue(true);
                return;
            }
            $jsonSchema = '{
  &quot;description&quot; : &quot;Success.&quot;,
  &quot;headers&quot; : {
    &quot;x-amzn-RequestId&quot; : {
      &quot;description&quot; : &quot;Unique request reference identifier.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    },
    &quot;x-amzn-RateLimit-Limit&quot; : {
      &quot;description&quot; : &quot;Your rate limit (requests per second) for this operation.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    }
  },
  &quot;content&quot; : {
    &quot;application/json&quot; : {
      &quot;schema&quot; : {
        &quot;$ref&quot; : &quot;#/components/schemas/ItemReviewTopicsResponse&quot;
      },
      &quot;example&quot; : {
        &quot;asin&quot; : &quot;B0BT5K9B2T&quot;,
        &quot;itemName&quot; : &quot;LANTEFUL 10 Tiers Tall Shoe Rack 20-25 Pairs Boots Organizer Storage Sturdy Narrow Shoe Shelf for Entryway Closets with Hooks Black&quot;,
        &quot;marketplaceId&quot; : &quot;ATVPDKIKX0DER&quot;,
        &quot;countryCode&quot; : &quot;US&quot;,
        &quot;dateRange&quot; : {
          &quot;startDate&quot; : &quot;2024-03-22T08:35:43.717Z&quot;,
          &quot;endDate&quot; : &quot;2024-09-22T08:35:43.717Z&quot;
        },
        &quot;topics&quot; : {
          &quot;positiveTopics&quot; : [ {
            &quot;topic&quot; : &quot;Assembly/Installation&quot;,
            &quot;asinMetrics&quot; : {
              &quot;numberOfMentions&quot; : 36,
              &quot;occurrencePercentage&quot; : 17.31,
              &quot;starRatingImpact&quot; : 4
            },
            &quot;parentAsinMetrics&quot; : {
              &quot;numberOfMentions&quot; : 107,
              &quot;occurrencePercentage&quot; : 18.01,
              &quot;starRatingImpact&quot; : 3
            },
            &quot;browseNodeMetrics&quot; : {
              &quot;occurrencePercentage&quot; : {
                &quot;allProducts&quot; : 16.41
              },
              &quot;starRatingImpact&quot; : {
                &quot;allProducts&quot; : 1.5
              }
            },
            &quot;childAsinMetrics&quot; : {
              &quot;mostMentions&quot; : {
                &quot;asin&quot; : &quot;B08576RCY4&quot;,
                &quot;numberOfMentions&quot; : 36
              },
              &quot;leastMentions&quot; : {
                &quot;asin&quot; : &quot;B08576DCY4&quot;,
                &quot;numberOfMentions&quot; : 4
              }
            },
            &quot;reviewSnippets&quot; : [ &quot;Easy installation!&quot;, &quot;Easy to install.&quot;, &quot;Easy to assemble&quot; ],
            &quot;subtopics&quot; : [ {
              &quot;subtopic&quot; : &quot;Simple and easy to assemble&quot;,
              &quot;metrics&quot; : {
                &quot;numberOfMentions&quot; : 9,
                &quot;occurrencePercentage&quot; : 25.01
              },
              &quot;reviewSnippets&quot; : [ &quot;Easy installation!&quot;, &quot;Not difficult to assemble.&quot;, &quot;Easy to assemble&quot; ]
            }, {
              &quot;subtopic&quot; : &quot;easy to put together and quick&quot;,
              &quot;metrics&quot; : {
                &quot;numberOfMentions&quot; : 5,
                &quot;occurrencePercentage&quot; : 13.01
              },
              &quot;reviewSnippets&quot; : [ &quot;Easy to put together!!.&quot;, &quot;Putting the product togetherwas alot however this saved so much room in my closet&quot;, &quot;love that it came with the one little tool you needed to putit all together!&quot; ]
            }, {
              &quot;subtopic&quot; : &quot;quick and easy to install&quot;,
              &quot;metrics&quot; : {
                &quot;numberOfMentions&quot; : 3,
                &quot;occurrencePercentage&quot; : 9.01
              },
              &quot;reviewSnippets&quot; : [ &quot;Easy installation!&quot;, &quot;Easy to install.&quot;, &quot;install was straight forward.&quot; ]
            } ]
          }, {
            &quot;topic&quot; : &quot;Strong&quot;,
            &quot;asinMetrics&quot; : {
              &quot;numberOfMentions&quot; : 36,
              &quot;occurrencePercentage&quot; : 17.31,
              &quot;starRatingImpact&quot; : 4.7
            },
            &quot;parentAsinMetrics&quot; : {
              &quot;numberOfMentions&quot; : 107,
              &quot;occurrencePercentage&quot; : 18.01,
              &quot;starRatingImpact&quot; : 3.8
            },
            &quot;browseNodeMetrics&quot; : {
              &quot;occurrencePercentage&quot; : {
                &quot;allProducts&quot; : 16.41
              },
              &quot;starRatingImpact&quot; : {
                &quot;allProducts&quot; : 1.5
              }
            },
            &quot;childAsinMetrics&quot; : {
              &quot;mostMentions&quot; : {
                &quot;asin&quot; : &quot;B08576RCY4&quot;,
                &quot;numberOfMentions&quot; : 36
              },
              &quot;leastMentions&quot; : {
                &quot;asin&quot; : &quot;B08576DCY4&quot;,
                &quot;numberOfMentions&quot; : 4
              }
            },
            &quot;reviewSnippets&quot; : [ &quot;Sturdy and strong.&quot;, &quot;Fairly sturdy.&quot;, &quot;very sturdy&quot; ],
            &quot;subtopics&quot; : [ {
              &quot;subtopic&quot; : &quot;sturdy and well built&quot;,
              &quot;metrics&quot; : {
                &quot;numberOfMentions&quot; : 9,
                &quot;occurrencePercentage&quot; : 25.01
              },
              &quot;reviewSnippets&quot; : [ &quot;very sturdy&quot;, &quot;Sturdiness is ok.&quot;, &quot;Sturdier than expected.&quot; ]
            }, {
              &quot;subtopic&quot; : &quot;durable and sturdy&quot;,
              &quot;metrics&quot; : {
                &quot;numberOfMentions&quot; : 4,
                &quot;occurrencePercentage&quot; : 12.01
              },
              &quot;reviewSnippets&quot; : [ &quot;This IS sturdy.&quot;, &quot;Sturdiness construction.&quot;, &quot;it much sturdier than the other two brands that I have purchased.&quot; ]
            }, {
              &quot;subtopic&quot; : &quot;strong and durable&quot;,
              &quot;metrics&quot; : {
                &quot;numberOfMentions&quot; : 2,
                &quot;occurrencePercentage&quot; : 6.01
              },
              &quot;reviewSnippets&quot; : [ &quot;This IS sturdy.&quot;, &quot;Sturdiness construction.&quot;, &quot;it much sturdier than the other two brands that I have purchased.&quot; ]
            } ]
          } ],
          &quot;negativeTopics&quot; : [ {
            &quot;topic&quot; : &quot;Assembly/Installation&quot;,
            &quot;asinMetrics&quot; : {
              &quot;numberOfMentions&quot; : 36,
              &quot;occurrencePercentage&quot; : 17.31,
              &quot;starRatingImpact&quot; : -2.3
            },
            &quot;parentAsinMetrics&quot; : {
              &quot;numberOfMentions&quot; : 107,
              &quot;occurrencePercentage&quot; : 18.01,
              &quot;starRatingImpact&quot; : -2.6
            },
            &quot;browseNodeMetrics&quot; : {
              &quot;occurrencePercentage&quot; : {
                &quot;allProducts&quot; : 16.41
              },
              &quot;starRatingImpact&quot; : {
                &quot;allProducts&quot; : -1.5
              }
            },
            &quot;childAsinMetrics&quot; : {
              &quot;mostMentions&quot; : {
                &quot;asin&quot; : &quot;B08576RCY4&quot;,
                &quot;numberOfMentions&quot; : 36
              },
              &quot;leastMentions&quot; : {
                &quot;asin&quot; : &quot;B08576DCY4&quot;,
                &quot;numberOfMentions&quot; : 4
              }
            },
            &quot;reviewSnippets&quot; : [ &quot;Difficult to assemble&quot;, &quot;Difficult to assemble&quot;, &quot;impossible to put together&quot; ],
            &quot;subtopics&quot; : [ {
              &quot;subtopic&quot; : &quot;difficult to put together&quot;,
              &quot;metrics&quot; : {
                &quot;numberOfMentions&quot; : 9,
                &quot;occurrencePercentage&quot; : 25.01
              },
              &quot;reviewSnippets&quot; : [ &quot;impossible to put together&quot;, &quot;Had a little hard time putting together either.&quot; ]
            }, {
              &quot;subtopic&quot; : &quot;hard to assemble&quot;,
              &quot;metrics&quot; : {
                &quot;numberOfMentions&quot; : 6,
                &quot;occurrencePercentage&quot; : 18.01
              },
              &quot;reviewSnippets&quot; : [ &quot;impossible to put together&quot;, &quot;Had a little hard time putting together either.&quot; ]
            } ]
          } ]
        }
      }
    }
  },
  &quot;x-amzn-api-sandbox&quot; : {
    &quot;static&quot; : [ {
      &quot;request&quot; : {
        &quot;parameters&quot; : {
          &quot;asin&quot; : {
            &quot;value&quot; : &quot;B08PD3JNPF&quot;
          },
          &quot;marketplaceId&quot; : {
            &quot;value&quot; : &quot;ATVPDKIKX0DER&quot;
          },
          &quot;sortBy&quot; : {
            &quot;value&quot; : &quot;MENTIONS&quot;
          }
        }
      },
      &quot;response&quot; : {
        &quot;asin&quot; : &quot;B0BT5K9B2T&quot;,
        &quot;itemName&quot; : &quot;LANTEFUL 10 Tiers Tall Shoe Rack 20-25 Pairs Boots Organizer Storage Sturdy Narrow Shoe Shelf for Entryway Closets with Hooks Black&quot;,
        &quot;marketplaceId&quot; : &quot;ATVPDKIKX0DER&quot;,
        &quot;countryCode&quot; : &quot;US&quot;,
        &quot;dateRange&quot; : {
          &quot;startDate&quot; : &quot;2024-03-22T08:35:43.717Z&quot;,
          &quot;endDate&quot; : &quot;2024-09-22T08:35:43.717Z&quot;
        },
        &quot;topics&quot; : {
          &quot;positiveTopics&quot; : [ {
            &quot;topic&quot; : &quot;Assembly/Installation&quot;,
            &quot;asinMetrics&quot; : {
              &quot;numberOfMentions&quot; : 36,
              &quot;occurrencePercentage&quot; : 17.31,
              &quot;starRatingImpact&quot; : 4
            },
            &quot;parentAsinMetrics&quot; : {
              &quot;numberOfMentions&quot; : 107,
              &quot;occurrencePercentage&quot; : 18.01,
              &quot;starRatingImpact&quot; : 3
            },
            &quot;browseNodeMetrics&quot; : {
              &quot;occurrencePercentage&quot; : {
                &quot;allProducts&quot; : 16.41
              },
              &quot;starRatingImpact&quot; : {
                &quot;allProducts&quot; : 1.5
              }
            },
            &quot;childAsinMetrics&quot; : {
              &quot;mostMentions&quot; : {
                &quot;asin&quot; : &quot;B08576RCY4&quot;,
                &quot;numberOfMentions&quot; : 36
              },
              &quot;leastMentions&quot; : {
                &quot;asin&quot; : &quot;B08576DCY4&quot;,
                &quot;numberOfMentions&quot; : 4
              }
            },
            &quot;reviewSnippets&quot; : [ &quot;Easy installation!&quot;, &quot;Easy to install.&quot;, &quot;Easy to assemble&quot; ],
            &quot;subtopics&quot; : [ {
              &quot;subtopic&quot; : &quot;Simple and easy to assemble&quot;,
              &quot;metrics&quot; : {
                &quot;numberOfMentions&quot; : 9,
                &quot;occurrencePercentage&quot; : 25.01
              },
              &quot;reviewSnippets&quot; : [ &quot;Easy installation!&quot;, &quot;Not difficult to assemble.&quot;, &quot;Easy to assemble&quot; ]
            }, {
              &quot;subtopic&quot; : &quot;easy to put together and quick&quot;,
              &quot;metrics&quot; : {
                &quot;numberOfMentions&quot; : 5,
                &quot;occurrencePercentage&quot; : 13.01
              },
              &quot;reviewSnippets&quot; : [ &quot;Easy to put together!!.&quot;, &quot;Putting the product togetherwas alot however this saved so much room in my closet&quot;, &quot;love that it came with the one little tool you needed to putit all together!&quot; ]
            }, {
              &quot;subtopic&quot; : &quot;quick and easy to install&quot;,
              &quot;metrics&quot; : {
                &quot;numberOfMentions&quot; : 3,
                &quot;occurrencePercentage&quot; : 9.01
              },
              &quot;reviewSnippets&quot; : [ &quot;Easy installation!&quot;, &quot;Easy to install.&quot;, &quot;install was straight forward.&quot; ]
            } ]
          }, {
            &quot;topic&quot; : &quot;Strong&quot;,
            &quot;asinMetrics&quot; : {
              &quot;numberOfMentions&quot; : 36,
              &quot;occurrencePercentage&quot; : 17.31,
              &quot;starRatingImpact&quot; : 4.7
            },
            &quot;parentAsinMetrics&quot; : {
              &quot;numberOfMentions&quot; : 107,
              &quot;occurrencePercentage&quot; : 18.01,
              &quot;starRatingImpact&quot; : 3.8
            },
            &quot;browseNodeMetrics&quot; : {
              &quot;occurrencePercentage&quot; : {
                &quot;allProducts&quot; : 16.41
              },
              &quot;starRatingImpact&quot; : {
                &quot;allProducts&quot; : 1.5
              }
            },
            &quot;childAsinMetrics&quot; : {
              &quot;mostMentions&quot; : {
                &quot;asin&quot; : &quot;B08576RCY4&quot;,
                &quot;numberOfMentions&quot; : 36
              },
              &quot;leastMentions&quot; : {
                &quot;asin&quot; : &quot;B08576DCY4&quot;,
                &quot;numberOfMentions&quot; : 4
              }
            },
            &quot;reviewSnippets&quot; : [ &quot;Sturdy and strong.&quot;, &quot;Fairly sturdy.&quot;, &quot;very sturdy&quot; ],
            &quot;subtopics&quot; : [ {
              &quot;subtopic&quot; : &quot;sturdy and well built&quot;,
              &quot;metrics&quot; : {
                &quot;numberOfMentions&quot; : 9,
                &quot;occurrencePercentage&quot; : 25.01
              },
              &quot;reviewSnippets&quot; : [ &quot;very sturdy&quot;, &quot;Sturdiness is ok.&quot;, &quot;Sturdier than expected.&quot; ]
            }, {
              &quot;subtopic&quot; : &quot;durable and sturdy&quot;,
              &quot;metrics&quot; : {
                &quot;numberOfMentions&quot; : 4,
                &quot;occurrencePercentage&quot; : 12.01
              },
              &quot;reviewSnippets&quot; : [ &quot;This IS sturdy.&quot;, &quot;Sturdiness construction.&quot;, &quot;it much sturdier than the other two brands that I have purchased.&quot; ]
            }, {
              &quot;subtopic&quot; : &quot;strong and durable&quot;,
              &quot;metrics&quot; : {
                &quot;numberOfMentions&quot; : 2,
                &quot;occurrencePercentage&quot; : 6.01
              },
              &quot;reviewSnippets&quot; : [ &quot;This IS sturdy.&quot;, &quot;Sturdiness construction.&quot;, &quot;it much sturdier than the other two brands that I have purchased.&quot; ]
            } ]
          } ],
          &quot;negativeTopics&quot; : [ {
            &quot;topic&quot; : &quot;Assembly/Installation&quot;,
            &quot;asinMetrics&quot; : {
              &quot;numberOfMentions&quot; : 36,
              &quot;occurrencePercentage&quot; : 17.31,
              &quot;starRatingImpact&quot; : -2.3
            },
            &quot;parentAsinMetrics&quot; : {
              &quot;numberOfMentions&quot; : 107,
              &quot;occurrencePercentage&quot; : 18.01,
              &quot;starRatingImpact&quot; : -2.6
            },
            &quot;browseNodeMetrics&quot; : {
              &quot;occurrencePercentage&quot; : {
                &quot;allProducts&quot; : 16.41
              },
              &quot;starRatingImpact&quot; : {
                &quot;allProducts&quot; : -1.5
              }
            },
            &quot;childAsinMetrics&quot; : {
              &quot;mostMentions&quot; : {
                &quot;asin&quot; : &quot;B08576RCY4&quot;,
                &quot;numberOfMentions&quot; : 36
              },
              &quot;leastMentions&quot; : {
                &quot;asin&quot; : &quot;B08576DCY4&quot;,
                &quot;numberOfMentions&quot; : 4
              }
            },
            &quot;reviewSnippets&quot; : [ &quot;Difficult to assemble&quot;, &quot;Difficult to assemble&quot;, &quot;impossible to put together&quot; ],
            &quot;subtopics&quot; : [ {
              &quot;subtopic&quot; : &quot;difficult to put together&quot;,
              &quot;metrics&quot; : {
                &quot;numberOfMentions&quot; : 9,
                &quot;occurrencePercentage&quot; : 25.01
              },
              &quot;reviewSnippets&quot; : [ &quot;impossible to put together&quot;, &quot;Had a little hard time putting together either.&quot; ]
            }, {
              &quot;subtopic&quot; : &quot;hard to assemble&quot;,
              &quot;metrics&quot; : {
                &quot;numberOfMentions&quot; : 6,
                &quot;occurrencePercentage&quot; : 18.01
              },
              &quot;reviewSnippets&quot; : [ &quot;impossible to put together&quot;, &quot;Had a little hard time putting together either.&quot; ]
            } ]
          } ]
        }
      }
    } ]
  }
}';
            $result = $this->testHelper->extractRequestAndResponse(
                $this->apiInstance,
                $jsonSchema,
                'getItemReviewTopics'
            );
            $requestParams = $result['requestParams'];
            $expectedResponse = $result['expectedResponse'];

            // Change Time Format if it requires
            $specificTimeFormat = $this->testHelper->getDateTimeFormatForCase('CustomerFeedbackApi');
            if ($specificTimeFormat) {
                ObjectSerializer::setDateTimeFormat($specificTimeFormat);
            }

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->getItemReviewTopicsWithHttpInfo(...array_values($requestParams));

            // Assert the response code
            $this->assertHttpStatusCode(200, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 200, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 200);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for getItemReviewTopics_204
     */
    public function testGetItemReviewTopics204()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testGetItemReviewTopics204', 'CustomerFeedbackApi')) {
                $this->assertTrue(true);
                return;
            }
            $jsonSchema = '{
  &quot;description&quot; : &quot;Success.&quot;,
  &quot;headers&quot; : {
    &quot;x-amzn-RequestId&quot; : {
      &quot;description&quot; : &quot;Unique request reference identifier.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    },
    &quot;x-amzn-RateLimit-Limit&quot; : {
      &quot;description&quot; : &quot;Your rate limit (requests per second) for this operation.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    }
  },
  &quot;content&quot; : {
    &quot;application/json&quot; : {
      &quot;example&quot; : { }
    }
  },
  &quot;x-amzn-api-sandbox&quot; : {
    &quot;static&quot; : [ {
      &quot;request&quot; : {
        &quot;parameters&quot; : {
          &quot;asin&quot; : {
            &quot;value&quot; : &quot;B08PD3JTPF&quot;
          },
          &quot;marketplaceId&quot; : {
            &quot;value&quot; : &quot;ATVPDKIKR0DER&quot;
          },
          &quot;sortBy&quot; : {
            &quot;value&quot; : &quot;MENTIONS&quot;
          }
        }
      },
      &quot;response&quot; : { }
    } ]
  }
}';
            $result = $this->testHelper->extractRequestAndResponse(
                $this->apiInstance,
                $jsonSchema,
                'getItemReviewTopics'
            );
            $requestParams = $result['requestParams'];
            $expectedResponse = $result['expectedResponse'];

            // Change Time Format if it requires
            $specificTimeFormat = $this->testHelper->getDateTimeFormatForCase('CustomerFeedbackApi');
            if ($specificTimeFormat) {
                ObjectSerializer::setDateTimeFormat($specificTimeFormat);
            }

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->getItemReviewTopicsWithHttpInfo(...array_values($requestParams));

            // Assert the response code
            $this->assertHttpStatusCode(204, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 204, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 204);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for getItemReviewTopics_400
     */
    public function testGetItemReviewTopics400()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testGetItemReviewTopics400', 'CustomerFeedbackApi')) {
                $this->assertTrue(true);
                return;
            }
            $jsonSchema = '{
  &quot;description&quot; : &quot;Request has missing or invalid parameters and cannot be parsed.&quot;,
  &quot;headers&quot; : {
    &quot;x-amzn-RequestId&quot; : {
      &quot;description&quot; : &quot;Unique request reference identifier.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    },
    &quot;x-amzn-RateLimit-Limit&quot; : {
      &quot;description&quot; : &quot;Your rate limit (requests per second) for this operation.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    }
  },
  &quot;content&quot; : {
    &quot;application/json&quot; : {
      &quot;schema&quot; : {
        &quot;$ref&quot; : &quot;#/components/schemas/ErrorList&quot;
      }
    }
  },
  &quot;x-amzn-api-sandbox&quot; : {
    &quot;static&quot; : [ {
      &quot;request&quot; : {
        &quot;parameters&quot; : {
          &quot;asin&quot; : {
            &quot;value&quot; : &quot;123456&quot;
          },
          &quot;marketplaceId&quot; : {
            &quot;value&quot; : &quot;abcd&quot;
          },
          &quot;sortBy&quot; : {
            &quot;value&quot; : &quot;starRatingImpact&quot;
          }
        }
      },
      &quot;response&quot; : {
        &quot;errors&quot; : [ {
          &quot;code&quot; : &quot;InvalidInput&quot;,
          &quot;message&quot; : &quot;Invalid input.&quot;
        } ]
      }
    } ]
  }
}';
            $result = $this->testHelper->extractRequestAndResponse(
                $this->apiInstance,
                $jsonSchema,
                'getItemReviewTopics'
            );
            $requestParams = $result['requestParams'];
            $expectedResponse = $result['expectedResponse'];

            // Change Time Format if it requires
            $specificTimeFormat = $this->testHelper->getDateTimeFormatForCase('CustomerFeedbackApi');
            if ($specificTimeFormat) {
                ObjectSerializer::setDateTimeFormat($specificTimeFormat);
            }

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->getItemReviewTopicsWithHttpInfo(...array_values($requestParams));

            // Assert the response code
            $this->assertHttpStatusCode(400, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 400, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 400);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for getItemReviewTopics_403
     */
    public function testGetItemReviewTopics403()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getItemReviewTopics_404
     */
    public function testGetItemReviewTopics404()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getItemReviewTopics_413
     */
    public function testGetItemReviewTopics413()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getItemReviewTopics_415
     */
    public function testGetItemReviewTopics415()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getItemReviewTopics_429
     */
    public function testGetItemReviewTopics429()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getItemReviewTopics_500
     */
    public function testGetItemReviewTopics500()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getItemReviewTopics_503
     */
    public function testGetItemReviewTopics503()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getItemReviewTrends_200
     */
    public function testGetItemReviewTrends200()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testGetItemReviewTrends200', 'CustomerFeedbackApi')) {
                $this->assertTrue(true);
                return;
            }
            $jsonSchema = '{
  &quot;description&quot; : &quot;Success.&quot;,
  &quot;headers&quot; : {
    &quot;x-amzn-RequestId&quot; : {
      &quot;description&quot; : &quot;Unique request reference identifier.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    },
    &quot;x-amzn-RateLimit-Limit&quot; : {
      &quot;description&quot; : &quot;Your rate limit (requests per second) for this operation.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    }
  },
  &quot;content&quot; : {
    &quot;application/json&quot; : {
      &quot;schema&quot; : {
        &quot;$ref&quot; : &quot;#/components/schemas/ItemReviewTrendsResponse&quot;
      },
      &quot;example&quot; : {
        &quot;asin&quot; : &quot;B0BN5K9B2T&quot;,
        &quot;itemName&quot; : &quot;LANTEFUL 10 Tiers Tall Shoe Rack 20-25 Pairs Boots Organizer Storage Sturdy Narrow Shoe Shelf for Entryway Closets with Hooks Black&quot;,
        &quot;marketplaceId&quot; : &quot;ATVPDKIKX0DER&quot;,
        &quot;countryCode&quot; : &quot;US&quot;,
        &quot;dateRange&quot; : {
          &quot;startDate&quot; : &quot;2024-03-22T08:35:43.717Z&quot;,
          &quot;endDate&quot; : &quot;2024-03-22T08:35:43.717Z&quot;
        },
        &quot;reviewTrends&quot; : {
          &quot;positiveTopics&quot; : [ {
            &quot;topic&quot; : &quot;Quality-Overall &quot;,
            &quot;trendMetrics&quot; : [ {
              &quot;dateRange&quot; : {
                &quot;startDate&quot; : &quot;2024-06-01T00:00:00.000Z&quot;,
                &quot;endDate&quot; : &quot;2024-06-30T00:00:00.000Z&quot;
              },
              &quot;asinMetrics&quot; : {
                &quot;occurrencePercentage&quot; : 27.58
              },
              &quot;parentAsinMetrics&quot; : {
                &quot;occurrencePercentage&quot; : 27.58
              },
              &quot;browseNodeMetrics&quot; : {
                &quot;occurrencePercentage&quot; : {
                  &quot;allProducts&quot; : 13.6
                }
              }
            }, {
              &quot;dateRange&quot; : {
                &quot;startDate&quot; : &quot;2024-05-01T00:00:00.000Z&quot;,
                &quot;endDate&quot; : &quot;2024-05-30T00:00:00.000Z&quot;
              },
              &quot;asinMetrics&quot; : {
                &quot;occurrencePercentage&quot; : 27.58
              },
              &quot;parentAsinMetrics&quot; : {
                &quot;occurrencePercentage&quot; : 27.58
              },
              &quot;browseNodeMetrics&quot; : {
                &quot;occurrencePercentage&quot; : {
                  &quot;allProducts&quot; : 13.6
                }
              }
            }, {
              &quot;dateRange&quot; : {
                &quot;startDate&quot; : &quot;2024-04-01T00:00:00.000Z&quot;,
                &quot;endDate&quot; : &quot;2024-04-30T00:00:00.000Z&quot;
              },
              &quot;asinMetrics&quot; : {
                &quot;occurrencePercentage&quot; : 27.58
              },
              &quot;parentAsinMetrics&quot; : {
                &quot;occurrencePercentage&quot; : 27.58
              },
              &quot;browseNodeMetrics&quot; : {
                &quot;occurrencePercentage&quot; : {
                  &quot;allProducts&quot; : 13.6
                }
              }
            }, {
              &quot;dateRange&quot; : {
                &quot;startDate&quot; : &quot;2024-03-01T00:00:00.000Z&quot;,
                &quot;endDate&quot; : &quot;2024-03-30T00:00:00.000Z&quot;
              },
              &quot;asinMetrics&quot; : {
                &quot;occurrencePercentage&quot; : 27.58
              },
              &quot;parentAsinMetrics&quot; : {
                &quot;occurrencePercentage&quot; : 27.58
              },
              &quot;browseNodeMetrics&quot; : {
                &quot;occurrencePercentage&quot; : {
                  &quot;allProducts&quot; : 13.6
                }
              }
            }, {
              &quot;dateRange&quot; : {
                &quot;startDate&quot; : &quot;2024-02-01T00:00:00.000Z&quot;,
                &quot;endDate&quot; : &quot;2024-02-30T00:00:00.000Z&quot;
              },
              &quot;asinMetrics&quot; : {
                &quot;occurrencePercentage&quot; : 27.58
              },
              &quot;parentAsinMetrics&quot; : {
                &quot;occurrencePercentage&quot; : 27.58
              },
              &quot;browseNodeMetrics&quot; : {
                &quot;occurrencePercentage&quot; : {
                  &quot;allProducts&quot; : 13.6
                }
              }
            }, {
              &quot;dateRange&quot; : {
                &quot;startDate&quot; : &quot;2024-01-01T00:00:00.000Z&quot;,
                &quot;endDate&quot; : &quot;2024-01-30T00:00:00.000Z&quot;
              },
              &quot;asinMetrics&quot; : {
                &quot;occurrencePercentage&quot; : 27.58
              },
              &quot;parentAsinMetrics&quot; : {
                &quot;occurrencePercentage&quot; : 27.58
              },
              &quot;browseNodeMetrics&quot; : {
                &quot;occurrencePercentage&quot; : {
                  &quot;allProducts&quot; : 13.6
                }
              }
            } ]
          }, {
            &quot;topic&quot; : &quot;Assembly/Installation &quot;,
            &quot;trendMetrics&quot; : [ {
              &quot;dateRange&quot; : {
                &quot;startDate&quot; : &quot;2024-06-01T00:00:00.000Z&quot;,
                &quot;endDate&quot; : &quot;2024-06-30T00:00:00.000Z&quot;
              },
              &quot;asinMetrics&quot; : {
                &quot;occurrencePercentage&quot; : 27.58
              },
              &quot;parentAsinMetrics&quot; : {
                &quot;occurrencePercentage&quot; : 27.58
              },
              &quot;browseNodeMetrics&quot; : {
                &quot;occurrencePercentage&quot; : {
                  &quot;allProducts&quot; : 13.6
                }
              }
            }, {
              &quot;dateRange&quot; : {
                &quot;startDate&quot; : &quot;2024-05-01T00:00:00.000Z&quot;,
                &quot;endDate&quot; : &quot;2024-05-30T00:00:00.000Z&quot;
              },
              &quot;asinMetrics&quot; : {
                &quot;occurrencePercentage&quot; : 27.58
              },
              &quot;parentAsinMetrics&quot; : {
                &quot;occurrencePercentage&quot; : 27.58
              },
              &quot;browseNodeMetrics&quot; : {
                &quot;occurrencePercentage&quot; : {
                  &quot;allProducts&quot; : 13.6
                }
              }
            }, {
              &quot;dateRange&quot; : {
                &quot;startDate&quot; : &quot;2024-04-01T00:00:00.000Z&quot;,
                &quot;endDate&quot; : &quot;2024-04-30T00:00:00.000Z&quot;
              },
              &quot;asinMetrics&quot; : {
                &quot;occurrencePercentage&quot; : 27.58
              },
              &quot;parentAsinMetrics&quot; : {
                &quot;occurrencePercentage&quot; : 27.58
              },
              &quot;browseNodeMetrics&quot; : {
                &quot;occurrencePercentage&quot; : {
                  &quot;allProducts&quot; : 13.6
                }
              }
            }, {
              &quot;dateRange&quot; : {
                &quot;startDate&quot; : &quot;2024-03-01T00:00:00.000Z&quot;,
                &quot;endDate&quot; : &quot;2024-03-30T00:00:00.000Z&quot;
              },
              &quot;asinMetrics&quot; : {
                &quot;occurrencePercentage&quot; : 27.58
              },
              &quot;parentAsinMetrics&quot; : {
                &quot;occurrencePercentage&quot; : 27.58
              },
              &quot;browseNodeMetrics&quot; : {
                &quot;occurrencePercentage&quot; : {
                  &quot;allProducts&quot; : 13.6
                }
              }
            }, {
              &quot;dateRange&quot; : {
                &quot;startDate&quot; : &quot;2024-02-01T00:00:00.000Z&quot;,
                &quot;endDate&quot; : &quot;2024-02-30T00:00:00.000Z&quot;
              },
              &quot;asinMetrics&quot; : {
                &quot;occurrencePercentage&quot; : 27.58
              },
              &quot;parentAsinMetrics&quot; : {
                &quot;occurrencePercentage&quot; : 27.58
              },
              &quot;browseNodeMetrics&quot; : {
                &quot;occurrencePercentage&quot; : {
                  &quot;allProducts&quot; : 13.6
                }
              }
            }, {
              &quot;dateRange&quot; : {
                &quot;startDate&quot; : &quot;2024-01-01T00:00:00.000Z&quot;,
                &quot;endDate&quot; : &quot;2024-01-30T00:00:00.000Z&quot;
              },
              &quot;asinMetrics&quot; : {
                &quot;occurrencePercentage&quot; : 27.58
              },
              &quot;parentAsinMetrics&quot; : {
                &quot;occurrencePercentage&quot; : 27.58
              },
              &quot;browseNodeMetrics&quot; : {
                &quot;occurrencePercentage&quot; : {
                  &quot;allProducts&quot; : 13.6
                }
              }
            } ]
          } ],
          &quot;negativeTopics&quot; : [ {
            &quot;topic&quot; : &quot;Weak and fragile&quot;,
            &quot;trendMetrics&quot; : [ {
              &quot;dateRange&quot; : {
                &quot;startDate&quot; : &quot;2024-06-01T00:00:00.000Z&quot;,
                &quot;endDate&quot; : &quot;2024-06-30T00:00:00.000Z&quot;
              },
              &quot;asinMetrics&quot; : {
                &quot;occurrencePercentage&quot; : 27.58
              },
              &quot;parentAsinMetrics&quot; : {
                &quot;occurrencePercentage&quot; : 27.58
              },
              &quot;browseNodeMetrics&quot; : {
                &quot;occurrencePercentage&quot; : {
                  &quot;allProducts&quot; : 13.6
                }
              }
            }, {
              &quot;dateRange&quot; : {
                &quot;startDate&quot; : &quot;2024-05-01T00:00:00.000Z&quot;,
                &quot;endDate&quot; : &quot;2024-05-30T00:00:00.000Z&quot;
              },
              &quot;asinMetrics&quot; : {
                &quot;occurrencePercentage&quot; : 27.58
              },
              &quot;parentAsinMetrics&quot; : {
                &quot;occurrencePercentage&quot; : 27.58
              },
              &quot;browseNodeMetrics&quot; : {
                &quot;occurrencePercentage&quot; : {
                  &quot;allProducts&quot; : 13.6
                }
              }
            }, {
              &quot;dateRange&quot; : {
                &quot;startDate&quot; : &quot;2024-04-01T00:00:00.000Z&quot;,
                &quot;endDate&quot; : &quot;2024-04-30T00:00:00.000Z&quot;
              },
              &quot;asinMetrics&quot; : {
                &quot;occurrencePercentage&quot; : 27.58
              },
              &quot;parentAsinMetrics&quot; : {
                &quot;occurrencePercentage&quot; : 27.58
              },
              &quot;browseNodeMetrics&quot; : {
                &quot;occurrencePercentage&quot; : {
                  &quot;allProducts&quot; : 13.6
                }
              }
            }, {
              &quot;dateRange&quot; : {
                &quot;startDate&quot; : &quot;2024-03-01T00:00:00.000Z&quot;,
                &quot;endDate&quot; : &quot;2024-03-30T00:00:00.000Z&quot;
              },
              &quot;asinMetrics&quot; : {
                &quot;occurrencePercentage&quot; : 27.58
              },
              &quot;parentAsinMetrics&quot; : {
                &quot;occurrencePercentage&quot; : 27.58
              },
              &quot;browseNodeMetrics&quot; : {
                &quot;occurrencePercentage&quot; : {
                  &quot;allProducts&quot; : 13.6
                }
              }
            }, {
              &quot;dateRange&quot; : {
                &quot;startDate&quot; : &quot;2024-02-01T00:00:00.000Z&quot;,
                &quot;endDate&quot; : &quot;2024-02-30T00:00:00.000Z&quot;
              },
              &quot;asinMetrics&quot; : {
                &quot;occurrencePercentage&quot; : 27.58
              },
              &quot;parentAsinMetrics&quot; : {
                &quot;occurrencePercentage&quot; : 27.58
              },
              &quot;browseNodeMetrics&quot; : {
                &quot;occurrencePercentage&quot; : {
                  &quot;allProducts&quot; : 13.6
                }
              }
            }, {
              &quot;dateRange&quot; : {
                &quot;startDate&quot; : &quot;2024-01-01T00:00:00.000Z&quot;,
                &quot;endDate&quot; : &quot;2024-01-30T00:00:00.000Z&quot;
              },
              &quot;asinMetrics&quot; : {
                &quot;occurrencePercentage&quot; : 27.58
              },
              &quot;parentAsinMetrics&quot; : {
                &quot;occurrencePercentage&quot; : 27.58
              },
              &quot;browseNodeMetrics&quot; : {
                &quot;occurrencePercentage&quot; : {
                  &quot;allProducts&quot; : 13.6
                }
              }
            } ]
          } ]
        }
      }
    }
  },
  &quot;x-amzn-api-sandbox&quot; : {
    &quot;static&quot; : [ {
      &quot;request&quot; : {
        &quot;parameters&quot; : {
          &quot;asin&quot; : {
            &quot;value&quot; : &quot;B08PD3JNPF&quot;
          },
          &quot;marketplaceId&quot; : {
            &quot;value&quot; : &quot;ATVPDKIKX0DER&quot;
          }
        }
      },
      &quot;response&quot; : {
        &quot;asin&quot; : &quot;B0BN5K9B2T&quot;,
        &quot;itemName&quot; : &quot;LANTEFUL 10 Tiers Tall Shoe Rack 20-25 Pairs Boots Organizer Storage Sturdy Narrow Shoe Shelf for Entryway Closets with Hooks Black&quot;,
        &quot;marketplaceId&quot; : &quot;ATVPDKIKX0DER&quot;,
        &quot;countryCode&quot; : &quot;US&quot;,
        &quot;dateRange&quot; : {
          &quot;startDate&quot; : &quot;2024-03-22T08:35:43.717Z&quot;,
          &quot;endDate&quot; : &quot;2024-03-22T08:35:43.717Z&quot;
        },
        &quot;reviewTrends&quot; : {
          &quot;positiveTopics&quot; : [ {
            &quot;topic&quot; : &quot;Quality-Overall &quot;,
            &quot;trendMetrics&quot; : [ {
              &quot;dateRange&quot; : {
                &quot;startDate&quot; : &quot;2024-06-01T00:00:00.000Z&quot;,
                &quot;endDate&quot; : &quot;2024-06-30T00:00:00.000Z&quot;
              },
              &quot;asinMetrics&quot; : {
                &quot;occurrencePercentage&quot; : 27.58
              },
              &quot;parentAsinMetrics&quot; : {
                &quot;occurrencePercentage&quot; : 27.58
              },
              &quot;browseNodeMetrics&quot; : {
                &quot;occurrencePercentage&quot; : {
                  &quot;allProducts&quot; : 13.6
                }
              }
            }, {
              &quot;dateRange&quot; : {
                &quot;startDate&quot; : &quot;2024-05-01T00:00:00.000Z&quot;,
                &quot;endDate&quot; : &quot;2024-05-30T00:00:00.000Z&quot;
              },
              &quot;asinMetrics&quot; : {
                &quot;occurrencePercentage&quot; : 27.58
              },
              &quot;parentAsinMetrics&quot; : {
                &quot;occurrencePercentage&quot; : 27.58
              },
              &quot;browseNodeMetrics&quot; : {
                &quot;occurrencePercentage&quot; : {
                  &quot;allProducts&quot; : 13.6
                }
              }
            }, {
              &quot;dateRange&quot; : {
                &quot;startDate&quot; : &quot;2024-04-01T00:00:00.000Z&quot;,
                &quot;endDate&quot; : &quot;2024-04-30T00:00:00.000Z&quot;
              },
              &quot;asinMetrics&quot; : {
                &quot;occurrencePercentage&quot; : 27.58
              },
              &quot;parentAsinMetrics&quot; : {
                &quot;occurrencePercentage&quot; : 27.58
              },
              &quot;browseNodeMetrics&quot; : {
                &quot;occurrencePercentage&quot; : {
                  &quot;allProducts&quot; : 13.6
                }
              }
            }, {
              &quot;dateRange&quot; : {
                &quot;startDate&quot; : &quot;2024-03-01T00:00:00.000Z&quot;,
                &quot;endDate&quot; : &quot;2024-03-30T00:00:00.000Z&quot;
              },
              &quot;asinMetrics&quot; : {
                &quot;occurrencePercentage&quot; : 27.58
              },
              &quot;parentAsinMetrics&quot; : {
                &quot;occurrencePercentage&quot; : 27.58
              },
              &quot;browseNodeMetrics&quot; : {
                &quot;occurrencePercentage&quot; : {
                  &quot;allProducts&quot; : 13.6
                }
              }
            }, {
              &quot;dateRange&quot; : {
                &quot;startDate&quot; : &quot;2024-02-01T00:00:00.000Z&quot;,
                &quot;endDate&quot; : &quot;2024-02-30T00:00:00.000Z&quot;
              },
              &quot;asinMetrics&quot; : {
                &quot;occurrencePercentage&quot; : 27.58
              },
              &quot;parentAsinMetrics&quot; : {
                &quot;occurrencePercentage&quot; : 27.58
              },
              &quot;browseNodeMetrics&quot; : {
                &quot;occurrencePercentage&quot; : {
                  &quot;allProducts&quot; : 13.6
                }
              }
            }, {
              &quot;dateRange&quot; : {
                &quot;startDate&quot; : &quot;2024-01-01T00:00:00.000Z&quot;,
                &quot;endDate&quot; : &quot;2024-01-30T00:00:00.000Z&quot;
              },
              &quot;asinMetrics&quot; : {
                &quot;occurrencePercentage&quot; : 27.58
              },
              &quot;parentAsinMetrics&quot; : {
                &quot;occurrencePercentage&quot; : 27.58
              },
              &quot;browseNodeMetrics&quot; : {
                &quot;occurrencePercentage&quot; : {
                  &quot;allProducts&quot; : 13.6
                }
              }
            } ]
          }, {
            &quot;topic&quot; : &quot;Assembly/Installation &quot;,
            &quot;trendMetrics&quot; : [ {
              &quot;dateRange&quot; : {
                &quot;startDate&quot; : &quot;2024-06-01T00:00:00.000Z&quot;,
                &quot;endDate&quot; : &quot;2024-06-30T00:00:00.000Z&quot;
              },
              &quot;asinMetrics&quot; : {
                &quot;occurrencePercentage&quot; : 27.58
              },
              &quot;parentAsinMetrics&quot; : {
                &quot;occurrencePercentage&quot; : 27.58
              },
              &quot;browseNodeMetrics&quot; : {
                &quot;occurrencePercentage&quot; : {
                  &quot;allProducts&quot; : 13.6
                }
              }
            }, {
              &quot;dateRange&quot; : {
                &quot;startDate&quot; : &quot;2024-05-01T00:00:00.000Z&quot;,
                &quot;endDate&quot; : &quot;2024-05-30T00:00:00.000Z&quot;
              },
              &quot;asinMetrics&quot; : {
                &quot;occurrencePercentage&quot; : 27.58
              },
              &quot;parentAsinMetrics&quot; : {
                &quot;occurrencePercentage&quot; : 27.58
              },
              &quot;browseNodeMetrics&quot; : {
                &quot;occurrencePercentage&quot; : {
                  &quot;allProducts&quot; : 13.6
                }
              }
            }, {
              &quot;dateRange&quot; : {
                &quot;startDate&quot; : &quot;2024-04-01T00:00:00.000Z&quot;,
                &quot;endDate&quot; : &quot;2024-04-30T00:00:00.000Z&quot;
              },
              &quot;asinMetrics&quot; : {
                &quot;occurrencePercentage&quot; : 27.58
              },
              &quot;parentAsinMetrics&quot; : {
                &quot;occurrencePercentage&quot; : 27.58
              },
              &quot;browseNodeMetrics&quot; : {
                &quot;occurrencePercentage&quot; : {
                  &quot;allProducts&quot; : 13.6
                }
              }
            }, {
              &quot;dateRange&quot; : {
                &quot;startDate&quot; : &quot;2024-03-01T00:00:00.000Z&quot;,
                &quot;endDate&quot; : &quot;2024-03-30T00:00:00.000Z&quot;
              },
              &quot;asinMetrics&quot; : {
                &quot;occurrencePercentage&quot; : 27.58
              },
              &quot;parentAsinMetrics&quot; : {
                &quot;occurrencePercentage&quot; : 27.58
              },
              &quot;browseNodeMetrics&quot; : {
                &quot;occurrencePercentage&quot; : {
                  &quot;allProducts&quot; : 13.6
                }
              }
            }, {
              &quot;dateRange&quot; : {
                &quot;startDate&quot; : &quot;2024-02-01T00:00:00.000Z&quot;,
                &quot;endDate&quot; : &quot;2024-02-30T00:00:00.000Z&quot;
              },
              &quot;asinMetrics&quot; : {
                &quot;occurrencePercentage&quot; : 27.58
              },
              &quot;parentAsinMetrics&quot; : {
                &quot;occurrencePercentage&quot; : 27.58
              },
              &quot;browseNodeMetrics&quot; : {
                &quot;occurrencePercentage&quot; : {
                  &quot;allProducts&quot; : 13.6
                }
              }
            }, {
              &quot;dateRange&quot; : {
                &quot;startDate&quot; : &quot;2024-01-01T00:00:00.000Z&quot;,
                &quot;endDate&quot; : &quot;2024-01-30T00:00:00.000Z&quot;
              },
              &quot;asinMetrics&quot; : {
                &quot;occurrencePercentage&quot; : 27.58
              },
              &quot;parentAsinMetrics&quot; : {
                &quot;occurrencePercentage&quot; : 27.58
              },
              &quot;browseNodeMetrics&quot; : {
                &quot;occurrencePercentage&quot; : {
                  &quot;allProducts&quot; : 13.6
                }
              }
            } ]
          } ],
          &quot;negativeTopics&quot; : [ {
            &quot;topic&quot; : &quot;Weak and fragile&quot;,
            &quot;trendMetrics&quot; : [ {
              &quot;dateRange&quot; : {
                &quot;startDate&quot; : &quot;2024-06-01T00:00:00.000Z&quot;,
                &quot;endDate&quot; : &quot;2024-06-30T00:00:00.000Z&quot;
              },
              &quot;asinMetrics&quot; : {
                &quot;occurrencePercentage&quot; : 27.58
              },
              &quot;parentAsinMetrics&quot; : {
                &quot;occurrencePercentage&quot; : 27.58
              },
              &quot;browseNodeMetrics&quot; : {
                &quot;occurrencePercentage&quot; : {
                  &quot;allProducts&quot; : 13.6
                }
              }
            }, {
              &quot;dateRange&quot; : {
                &quot;startDate&quot; : &quot;2024-05-01T00:00:00.000Z&quot;,
                &quot;endDate&quot; : &quot;2024-05-30T00:00:00.000Z&quot;
              },
              &quot;asinMetrics&quot; : {
                &quot;occurrencePercentage&quot; : 27.58
              },
              &quot;parentAsinMetrics&quot; : {
                &quot;occurrencePercentage&quot; : 27.58
              },
              &quot;browseNodeMetrics&quot; : {
                &quot;occurrencePercentage&quot; : {
                  &quot;allProducts&quot; : 13.6
                }
              }
            }, {
              &quot;dateRange&quot; : {
                &quot;startDate&quot; : &quot;2024-04-01T00:00:00.000Z&quot;,
                &quot;endDate&quot; : &quot;2024-04-30T00:00:00.000Z&quot;
              },
              &quot;asinMetrics&quot; : {
                &quot;occurrencePercentage&quot; : 27.58
              },
              &quot;parentAsinMetrics&quot; : {
                &quot;occurrencePercentage&quot; : 27.58
              },
              &quot;browseNodeMetrics&quot; : {
                &quot;occurrencePercentage&quot; : {
                  &quot;allProducts&quot; : 13.6
                }
              }
            }, {
              &quot;dateRange&quot; : {
                &quot;startDate&quot; : &quot;2024-03-01T00:00:00.000Z&quot;,
                &quot;endDate&quot; : &quot;2024-03-30T00:00:00.000Z&quot;
              },
              &quot;asinMetrics&quot; : {
                &quot;occurrencePercentage&quot; : 27.58
              },
              &quot;parentAsinMetrics&quot; : {
                &quot;occurrencePercentage&quot; : 27.58
              },
              &quot;browseNodeMetrics&quot; : {
                &quot;occurrencePercentage&quot; : {
                  &quot;allProducts&quot; : 13.6
                }
              }
            }, {
              &quot;dateRange&quot; : {
                &quot;startDate&quot; : &quot;2024-02-01T00:00:00.000Z&quot;,
                &quot;endDate&quot; : &quot;2024-02-30T00:00:00.000Z&quot;
              },
              &quot;asinMetrics&quot; : {
                &quot;occurrencePercentage&quot; : 27.58
              },
              &quot;parentAsinMetrics&quot; : {
                &quot;occurrencePercentage&quot; : 27.58
              },
              &quot;browseNodeMetrics&quot; : {
                &quot;occurrencePercentage&quot; : {
                  &quot;allProducts&quot; : 13.6
                }
              }
            }, {
              &quot;dateRange&quot; : {
                &quot;startDate&quot; : &quot;2024-01-01T00:00:00.000Z&quot;,
                &quot;endDate&quot; : &quot;2024-01-30T00:00:00.000Z&quot;
              },
              &quot;asinMetrics&quot; : {
                &quot;occurrencePercentage&quot; : 27.58
              },
              &quot;parentAsinMetrics&quot; : {
                &quot;occurrencePercentage&quot; : 27.58
              },
              &quot;browseNodeMetrics&quot; : {
                &quot;occurrencePercentage&quot; : {
                  &quot;allProducts&quot; : 13.6
                }
              }
            } ]
          } ]
        }
      }
    } ]
  }
}';
            $result = $this->testHelper->extractRequestAndResponse(
                $this->apiInstance,
                $jsonSchema,
                'getItemReviewTrends'
            );
            $requestParams = $result['requestParams'];
            $expectedResponse = $result['expectedResponse'];

            // Change Time Format if it requires
            $specificTimeFormat = $this->testHelper->getDateTimeFormatForCase('CustomerFeedbackApi');
            if ($specificTimeFormat) {
                ObjectSerializer::setDateTimeFormat($specificTimeFormat);
            }

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->getItemReviewTrendsWithHttpInfo(...array_values($requestParams));

            // Assert the response code
            $this->assertHttpStatusCode(200, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 200, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 200);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for getItemReviewTrends_204
     */
    public function testGetItemReviewTrends204()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testGetItemReviewTrends204', 'CustomerFeedbackApi')) {
                $this->assertTrue(true);
                return;
            }
            $jsonSchema = '{
  &quot;description&quot; : &quot;Success.&quot;,
  &quot;headers&quot; : {
    &quot;x-amzn-RequestId&quot; : {
      &quot;description&quot; : &quot;Unique request reference identifier.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    },
    &quot;x-amzn-RateLimit-Limit&quot; : {
      &quot;description&quot; : &quot;Your rate limit (requests per second) for this operation.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    }
  },
  &quot;content&quot; : {
    &quot;application/json&quot; : {
      &quot;example&quot; : { }
    }
  },
  &quot;x-amzn-api-sandbox&quot; : {
    &quot;static&quot; : [ {
      &quot;request&quot; : {
        &quot;parameters&quot; : {
          &quot;asin&quot; : {
            &quot;value&quot; : &quot;B08PD3JTPF&quot;
          },
          &quot;marketplaceId&quot; : {
            &quot;value&quot; : &quot;ATVPDKIKR0DER&quot;
          }
        }
      },
      &quot;response&quot; : { }
    } ]
  }
}';
            $result = $this->testHelper->extractRequestAndResponse(
                $this->apiInstance,
                $jsonSchema,
                'getItemReviewTrends'
            );
            $requestParams = $result['requestParams'];
            $expectedResponse = $result['expectedResponse'];

            // Change Time Format if it requires
            $specificTimeFormat = $this->testHelper->getDateTimeFormatForCase('CustomerFeedbackApi');
            if ($specificTimeFormat) {
                ObjectSerializer::setDateTimeFormat($specificTimeFormat);
            }

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->getItemReviewTrendsWithHttpInfo(...array_values($requestParams));

            // Assert the response code
            $this->assertHttpStatusCode(204, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 204, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 204);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for getItemReviewTrends_400
     */
    public function testGetItemReviewTrends400()
    {
        try {
            // Skip test if it is in the skip list
            if ($this->testHelper->shouldSkipTest('testGetItemReviewTrends400', 'CustomerFeedbackApi')) {
                $this->assertTrue(true);
                return;
            }
            $jsonSchema = '{
  &quot;description&quot; : &quot;Request has missing or invalid parameters and cannot be parsed.&quot;,
  &quot;headers&quot; : {
    &quot;x-amzn-RequestId&quot; : {
      &quot;description&quot; : &quot;Unique request reference identifier.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    },
    &quot;x-amzn-RateLimit-Limit&quot; : {
      &quot;description&quot; : &quot;Your rate limit (requests per second) for this operation.&quot;,
      &quot;schema&quot; : {
        &quot;type&quot; : &quot;string&quot;
      }
    }
  },
  &quot;content&quot; : {
    &quot;application/json&quot; : {
      &quot;schema&quot; : {
        &quot;$ref&quot; : &quot;#/components/schemas/ErrorList&quot;
      }
    }
  },
  &quot;x-amzn-api-sandbox&quot; : {
    &quot;static&quot; : [ {
      &quot;request&quot; : {
        &quot;parameters&quot; : {
          &quot;asin&quot; : {
            &quot;value&quot; : &quot;123456&quot;
          },
          &quot;marketplaceId&quot; : {
            &quot;value&quot; : &quot;abcd&quot;
          }
        }
      },
      &quot;response&quot; : {
        &quot;errors&quot; : [ {
          &quot;code&quot; : &quot;InvalidInput&quot;,
          &quot;message&quot; : &quot;Invalid input.&quot;
        } ]
      }
    } ]
  }
}';
            $result = $this->testHelper->extractRequestAndResponse(
                $this->apiInstance,
                $jsonSchema,
                'getItemReviewTrends'
            );
            $requestParams = $result['requestParams'];
            $expectedResponse = $result['expectedResponse'];

            // Change Time Format if it requires
            $specificTimeFormat = $this->testHelper->getDateTimeFormatForCase('CustomerFeedbackApi');
            if ($specificTimeFormat) {
                ObjectSerializer::setDateTimeFormat($specificTimeFormat);
            }

            // Act: Call API
            list($response, $statusCode, $headers) =
                $this->apiInstance->getItemReviewTrendsWithHttpInfo(...array_values($requestParams));

            // Assert the response code
            $this->assertHttpStatusCode(400, $statusCode);

            // Handle different response codes
            $this->handleResponse($response, $statusCode, 400, $expectedResponse);
        } catch (ApiException $e) {
            $this->handleApiException($e, 400);
        } catch (\ReflectionException $e) {
            $this->fail("Reflection exception: " . $e->getMessage());
        }
    }
    /**
     * Test case for getItemReviewTrends_403
     */
    public function testGetItemReviewTrends403()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getItemReviewTrends_404
     */
    public function testGetItemReviewTrends404()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getItemReviewTrends_413
     */
    public function testGetItemReviewTrends413()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getItemReviewTrends_415
     */
    public function testGetItemReviewTrends415()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getItemReviewTrends_429
     */
    public function testGetItemReviewTrends429()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getItemReviewTrends_500
     */
    public function testGetItemReviewTrends500()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
    /**
     * Test case for getItemReviewTrends_503
     */
    public function testGetItemReviewTrends503()
    {
        // Skip this test
        $this->markTestSkipped('Skip test for this operation.');
    }
}
