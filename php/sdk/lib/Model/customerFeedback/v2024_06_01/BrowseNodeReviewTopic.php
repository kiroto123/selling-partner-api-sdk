<?php

/**
 * BrowseNodeReviewTopic.
 *
 * PHP version 8.3
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 */

/**
 * The Selling Partner API for CustomerFeedback.
 *
 * The Selling Partner API for Customer Feedback (Customer Feedback API) provides information about customer reviews and returns at both the item and browse node level.
 *
 * The version of the OpenAPI document: 2024-06-01
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SpApi\Model\customerFeedback\v2024_06_01;

use SpApi\Model\ModelInterface;
use SpApi\ObjectSerializer;

/**
 * BrowseNodeReviewTopic Class Doc Comment.
 *
 * @category Class
 *
 * @description The browse node review topic.
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 *
 * @implements \ArrayAccess<string, mixed>
 */
class BrowseNodeReviewTopic implements ModelInterface, \ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     */
    protected static string $openAPIModelName = 'BrowseNodeReviewTopic';

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @var string[]
     */
    protected static array $openAPITypes = [
        'topic' => 'string',
        'browse_node_metrics' => '\SpApi\Model\customerFeedback\v2024_06_01\BrowseNodeReviewTopicMetrics',
        'review_snippets' => 'string[]',
        'subtopics' => '\SpApi\Model\customerFeedback\v2024_06_01\BrowseNodeSubtopic[]'];

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @var string[]
     *
     * @phpstan-var array<string, string|null>
     *
     * @psalm-var array<string, string|null>
     */
    protected static array $openAPIFormats = [
        'topic' => null,
        'browse_node_metrics' => null,
        'review_snippets' => null,
        'subtopics' => null];

    /**
     * Array of nullable properties. Used for (de)serialization.
     *
     * @var bool[]
     */
    protected static array $openAPINullables = [
        'topic' => false,
        'browse_node_metrics' => false,
        'review_snippets' => true,
        'subtopics' => true,
    ];

    /**
     * If a nullable field gets set to null, insert it here.
     *
     * @var bool[]
     */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @var string[]
     */
    protected static array $attributeMap = [
        'topic' => 'topic',
        'browse_node_metrics' => 'browseNodeMetrics',
        'review_snippets' => 'reviewSnippets',
        'subtopics' => 'subtopics',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @var string[]
     */
    protected static array $setters = [
        'topic' => 'setTopic',
        'browse_node_metrics' => 'setBrowseNodeMetrics',
        'review_snippets' => 'setReviewSnippets',
        'subtopics' => 'setSubtopics',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @var string[]
     */
    protected static array $getters = [
        'topic' => 'getTopic',
        'browse_node_metrics' => 'getBrowseNodeMetrics',
        'review_snippets' => 'getReviewSnippets',
        'subtopics' => 'getSubtopics',
    ];

    /**
     * Associative array for storing property values.
     */
    protected array $container = [];

    /**
     * Constructor.
     *
     * @param null|array $data Associated array of property values
     *                         initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('topic', $data ?? [], null);
        $this->setIfExists('browse_node_metrics', $data ?? [], null);
        $this->setIfExists('review_snippets', $data ?? [], null);
        $this->setIfExists('subtopics', $data ?? [], null);
    }

    /**
     * Gets the string presentation of the object.
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Array of property to type mappings. Used for (de)serialization.
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization.
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Checks if a property is nullable.
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests).
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if (null === $this->container['topic']) {
            $invalidProperties[] = "'topic' can't be null";
        }
        if (null === $this->container['browse_node_metrics']) {
            $invalidProperties[] = "'browse_node_metrics' can't be null";
        }
        if (!is_null($this->container['review_snippets']) && (count($this->container['review_snippets']) > 3)) {
            $invalidProperties[] = "invalid value for 'review_snippets', number of items must be less than or equal to 3.";
        }

        if (!is_null($this->container['subtopics']) && (count($this->container['subtopics']) > 5)) {
            $invalidProperties[] = "invalid value for 'subtopics', number of items must be less than or equal to 5.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed.
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return 0 === count($this->listInvalidProperties());
    }

    /**
     * Gets topic.
     */
    public function getTopic(): string
    {
        return $this->container['topic'];
    }

    /**
     * Sets topic.
     *
     * @param string $topic the name browse node review topic
     */
    public function setTopic(string $topic): self
    {
        if (is_null($topic)) {
            throw new \InvalidArgumentException('non-nullable topic cannot be null');
        }
        $this->container['topic'] = $topic;

        return $this;
    }

    /**
     * Gets browse_node_metrics.
     */
    public function getBrowseNodeMetrics(): BrowseNodeReviewTopicMetrics
    {
        return $this->container['browse_node_metrics'];
    }

    /**
     * Sets browse_node_metrics.
     *
     * @param BrowseNodeReviewTopicMetrics $browse_node_metrics browse_node_metrics
     */
    public function setBrowseNodeMetrics(BrowseNodeReviewTopicMetrics $browse_node_metrics): self
    {
        if (is_null($browse_node_metrics)) {
            throw new \InvalidArgumentException('non-nullable browse_node_metrics cannot be null');
        }
        $this->container['browse_node_metrics'] = $browse_node_metrics;

        return $this;
    }

    /**
     * Gets review_snippets.
     */
    public function getReviewSnippets(): ?array
    {
        return $this->container['review_snippets'];
    }

    /**
     * Sets review_snippets.
     *
     * @param null|array $review_snippets A list of up to three snippets from reviews that contain the topic. This value is `null` if there aren't enough review snippets for the topic.
     */
    public function setReviewSnippets(?array $review_snippets): self
    {
        if (is_null($review_snippets)) {
            array_push($this->openAPINullablesSetToNull, 'review_snippets');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('review_snippets', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($review_snippets) && (count($review_snippets) > 3)) {
            throw new \InvalidArgumentException('invalid value for $review_snippets when calling BrowseNodeReviewTopic., number of items must be less than or equal to 3.');
        }
        $this->container['review_snippets'] = $review_snippets;

        return $this;
    }

    /**
     * Gets subtopics.
     */
    public function getSubtopics(): ?array
    {
        return $this->container['subtopics'];
    }

    /**
     * Sets subtopics.
     *
     * @param null|array $subtopics A list of the five subtopics that occur most frequently. This value is `null` if there are no subtopics.
     */
    public function setSubtopics(?array $subtopics): self
    {
        if (is_null($subtopics)) {
            array_push($this->openAPINullablesSetToNull, 'subtopics');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('subtopics', $nullablesSetToNull);
            if (false !== $index) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($subtopics) && (count($subtopics) > 5)) {
            throw new \InvalidArgumentException('invalid value for $subtopics when calling BrowseNodeReviewTopic., number of items must be less than or equal to 5.');
        }
        $this->container['subtopics'] = $subtopics;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return null|mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param null|int $offset Offset
     * @param mixed    $value  Value to be set
     */
    public function offsetSet($offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     *
     * @see https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed returns data which can be serialized by json_encode(), which is a value
     *               of any type other than a resource
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets a header-safe presentation of the object.
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }

    /**
     * Array of nullable properties.
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null.
     *
     * @return bool[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null.
     *
     * @param bool[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
     * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
     * $this->openAPINullablesSetToNull array.
     *
     * @param mixed $defaultValue
     */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }
}
