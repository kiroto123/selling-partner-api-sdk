<?php

/**
 * CustomerFeedbackApi
 * PHP version 8.3.
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 */

/**
 * The Selling Partner API for CustomerFeedback.
 *
 * The Selling Partner API for Customer Feedback (Customer Feedback API) provides information about customer reviews and returns at both the item and browse node level.
 *
 * The version of the OpenAPI document: 2024-06-01
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SpApi\Api\customerFeedback\v2024_06_01;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Promise\PromiseInterface;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use SpApi\ApiException;
use SpApi\AuthAndAuth\RestrictedDataTokenSigner;
use SpApi\Configuration;
use SpApi\HeaderSelector;
use SpApi\Model\customerFeedback\v2024_06_01\BrowseNodeResponse;
use SpApi\Model\customerFeedback\v2024_06_01\BrowseNodeReturnTopicsResponse;
use SpApi\Model\customerFeedback\v2024_06_01\BrowseNodeReturnTrendsResponse;
use SpApi\Model\customerFeedback\v2024_06_01\BrowseNodeReviewTopicsResponse;
use SpApi\Model\customerFeedback\v2024_06_01\BrowseNodeReviewTrendsResponse;
use SpApi\Model\customerFeedback\v2024_06_01\ItemReviewTopicsResponse;
use SpApi\Model\customerFeedback\v2024_06_01\ItemReviewTrendsResponse;
use SpApi\ObjectSerializer;
use Symfony\Component\RateLimiter\LimiterInterface;
use Symfony\Component\RateLimiter\RateLimiterFactory;
use Symfony\Component\RateLimiter\Storage\InMemoryStorage;

/**
 * CustomerFeedbackApi Class Doc Comment.
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 */
class CustomerFeedbackApi
{
    public ?LimiterInterface $getBrowseNodeReturnTopicsRateLimiter;
    public ?LimiterInterface $getBrowseNodeReturnTrendsRateLimiter;
    public ?LimiterInterface $getBrowseNodeReviewTopicsRateLimiter;
    public ?LimiterInterface $getBrowseNodeReviewTrendsRateLimiter;
    public ?LimiterInterface $getItemBrowseNodeRateLimiter;
    public ?LimiterInterface $getItemReviewTopicsRateLimiter;
    public ?LimiterInterface $getItemReviewTrendsRateLimiter;
    protected ClientInterface $client;

    protected Configuration $config;

    protected HeaderSelector $headerSelector;

    /**
     * @var int Host index
     */
    protected int $hostIndex;

    private bool $rateLimiterEnabled;
    private InMemoryStorage $rateLimitStorage;

    /**
     * @param int $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        Configuration $config,
        ?ClientInterface $client = null,
        ?bool $rateLimiterEnabled = true,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->config = $config;
        $this->rateLimiterEnabled = $rateLimiterEnabled;

        if ($rateLimiterEnabled) {
            $this->rateLimitStorage = new InMemoryStorage();

            $factory = new RateLimiterFactory(Configuration::getRateLimitOptions('CustomerFeedbackApi-getBrowseNodeReturnTopics'), $this->rateLimitStorage);
            $this->getBrowseNodeReturnTopicsRateLimiter = $factory->create('CustomerFeedbackApi-getBrowseNodeReturnTopics');
            $factory = new RateLimiterFactory(Configuration::getRateLimitOptions('CustomerFeedbackApi-getBrowseNodeReturnTrends'), $this->rateLimitStorage);
            $this->getBrowseNodeReturnTrendsRateLimiter = $factory->create('CustomerFeedbackApi-getBrowseNodeReturnTrends');
            $factory = new RateLimiterFactory(Configuration::getRateLimitOptions('CustomerFeedbackApi-getBrowseNodeReviewTopics'), $this->rateLimitStorage);
            $this->getBrowseNodeReviewTopicsRateLimiter = $factory->create('CustomerFeedbackApi-getBrowseNodeReviewTopics');
            $factory = new RateLimiterFactory(Configuration::getRateLimitOptions('CustomerFeedbackApi-getBrowseNodeReviewTrends'), $this->rateLimitStorage);
            $this->getBrowseNodeReviewTrendsRateLimiter = $factory->create('CustomerFeedbackApi-getBrowseNodeReviewTrends');
            $factory = new RateLimiterFactory(Configuration::getRateLimitOptions('CustomerFeedbackApi-getItemBrowseNode'), $this->rateLimitStorage);
            $this->getItemBrowseNodeRateLimiter = $factory->create('CustomerFeedbackApi-getItemBrowseNode');
            $factory = new RateLimiterFactory(Configuration::getRateLimitOptions('CustomerFeedbackApi-getItemReviewTopics'), $this->rateLimitStorage);
            $this->getItemReviewTopicsRateLimiter = $factory->create('CustomerFeedbackApi-getItemReviewTopics');
            $factory = new RateLimiterFactory(Configuration::getRateLimitOptions('CustomerFeedbackApi-getItemReviewTrends'), $this->rateLimitStorage);
            $this->getItemReviewTrendsRateLimiter = $factory->create('CustomerFeedbackApi-getItemReviewTrends');
        }

        $this->client = $client ?: new Client();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index.
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex(int $hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index.
     *
     * @return int Host index
     */
    public function getHostIndex(): int
    {
        return $this->hostIndex;
    }

    public function getConfig(): Configuration
    {
        return $this->config;
    }

    /**
     * Operation getBrowseNodeReturnTopics.
     *
     * @param string      $browse_node_id
     *                                         A browse node ID is a unique identifier for a browse node. A browse node is a named location in a browse tree that is used for navigation, product classification, and website content. (required)
     * @param string      $marketplace_id
     *                                         The MarketplaceId is the globally unique identifier of a marketplace, you can refer to the marketplaceId here : https://developer-docs.amazon.com/sp-api/docs/marketplace-ids. (required)
     * @param null|string $restrictedDataToken Restricted Data Token (RDT) for accessing restricted resources (optional, required for operations that return PII)
     *
     * @throws ApiException              on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function getBrowseNodeReturnTopics(
        string $browse_node_id,
        string $marketplace_id,
        ?string $restrictedDataToken = null
    ): BrowseNodeReturnTopicsResponse {
        list($response) = $this->getBrowseNodeReturnTopicsWithHttpInfo($browse_node_id, $marketplace_id, $restrictedDataToken);

        return $response;
    }

    /**
     * Operation getBrowseNodeReturnTopicsWithHttpInfo.
     *
     * @param string      $browse_node_id
     *                                         A browse node ID is a unique identifier for a browse node. A browse node is a named location in a browse tree that is used for navigation, product classification, and website content. (required)
     * @param string      $marketplace_id
     *                                         The MarketplaceId is the globally unique identifier of a marketplace, you can refer to the marketplaceId here : https://developer-docs.amazon.com/sp-api/docs/marketplace-ids. (required)
     * @param null|string $restrictedDataToken Restricted Data Token (RDT) for accessing restricted resources (optional, required for operations that return PII)
     *
     * @return array of \SpApi\Model\customerFeedback\v2024_06_01\BrowseNodeReturnTopicsResponse, HTTP status code, HTTP response headers (array of strings)
     *
     * @throws ApiException              on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function getBrowseNodeReturnTopicsWithHttpInfo(
        string $browse_node_id,
        string $marketplace_id,
        ?string $restrictedDataToken = null
    ): array {
        $request = $this->getBrowseNodeReturnTopicsRequest($browse_node_id, $marketplace_id);
        if (null !== $restrictedDataToken) {
            $request = RestrictedDataTokenSigner::sign($request, $restrictedDataToken, 'CustomerFeedbackApi-getBrowseNodeReturnTopics');
        } else {
            $request = $this->config->sign($request);
        }

        try {
            $options = $this->createHttpClientOption();

            try {
                if ($this->rateLimiterEnabled) {
                    $this->getBrowseNodeReturnTopicsRateLimiter->consume()->ensureAccepted();
                }
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getResponse()->getBody()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }
            if ('\SpApi\Model\customerFeedback\v2024_06_01\BrowseNodeReturnTopicsResponse' === '\SplFileObject') {
                $content = $response->getBody(); // stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ('\SpApi\Model\customerFeedback\v2024_06_01\BrowseNodeReturnTopicsResponse' !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, '\SpApi\Model\customerFeedback\v2024_06_01\BrowseNodeReturnTopicsResponse', []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            $data = ObjectSerializer::deserialize(
                $e->getResponseBody(),
                '\SpApi\Model\customerFeedback\v2024_06_01\ErrorList',
                $e->getResponseHeaders()
            );
            $e->setResponseObject($data);

            throw $e;
        }
    }

    /**
     * Operation getBrowseNodeReturnTopicsAsync.
     *
     * @param string $browse_node_id
     *                               A browse node ID is a unique identifier for a browse node. A browse node is a named location in a browse tree that is used for navigation, product classification, and website content. (required)
     * @param string $marketplace_id
     *                               The MarketplaceId is the globally unique identifier of a marketplace, you can refer to the marketplaceId here : https://developer-docs.amazon.com/sp-api/docs/marketplace-ids. (required)
     *
     * @throws \InvalidArgumentException
     */
    public function getBrowseNodeReturnTopicsAsync(
        string $browse_node_id,
        string $marketplace_id
    ): PromiseInterface {
        return $this->getBrowseNodeReturnTopicsAsyncWithHttpInfo($browse_node_id, $marketplace_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation getBrowseNodeReturnTopicsAsyncWithHttpInfo.
     *
     * @param string $browse_node_id
     *                               A browse node ID is a unique identifier for a browse node. A browse node is a named location in a browse tree that is used for navigation, product classification, and website content. (required)
     * @param string $marketplace_id
     *                               The MarketplaceId is the globally unique identifier of a marketplace, you can refer to the marketplaceId here : https://developer-docs.amazon.com/sp-api/docs/marketplace-ids. (required)
     *
     * @throws \InvalidArgumentException
     */
    public function getBrowseNodeReturnTopicsAsyncWithHttpInfo(
        string $browse_node_id,
        string $marketplace_id,
        ?string $restrictedDataToken = null
    ): PromiseInterface {
        $returnType = '\SpApi\Model\customerFeedback\v2024_06_01\BrowseNodeReturnTopicsResponse';
        $request = $this->getBrowseNodeReturnTopicsRequest($browse_node_id, $marketplace_id);
        if (null !== $restrictedDataToken) {
            $request = RestrictedDataTokenSigner::sign($request, $restrictedDataToken, 'CustomerFeedbackApi-getBrowseNodeReturnTopics');
        } else {
            $request = $this->config->sign($request);
        }
        if ($this->rateLimiterEnabled) {
            $this->getBrowseNodeReturnTopicsRateLimiter->consume()->ensureAccepted();
        }

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); // stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== $returnType) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            )
        ;
    }

    /**
     * Create request for operation 'getBrowseNodeReturnTopics'.
     *
     * @param string $browse_node_id
     *                               A browse node ID is a unique identifier for a browse node. A browse node is a named location in a browse tree that is used for navigation, product classification, and website content. (required)
     * @param string $marketplace_id
     *                               The MarketplaceId is the globally unique identifier of a marketplace, you can refer to the marketplaceId here : https://developer-docs.amazon.com/sp-api/docs/marketplace-ids. (required)
     *
     * @throws \InvalidArgumentException
     */
    public function getBrowseNodeReturnTopicsRequest(
        string $browse_node_id,
        string $marketplace_id
    ): Request {
        // verify the required parameter 'browse_node_id' is set
        if (null === $browse_node_id || (is_array($browse_node_id) && 0 === count($browse_node_id))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $browse_node_id when calling getBrowseNodeReturnTopics'
            );
        }
        // verify the required parameter 'marketplace_id' is set
        if (null === $marketplace_id || (is_array($marketplace_id) && 0 === count($marketplace_id))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $marketplace_id when calling getBrowseNodeReturnTopics'
            );
        }

        $resourcePath = '/customerFeedback/2024-06-01/browseNodes/{browseNodeId}/returns/topics';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $marketplace_id,
            'marketplaceId', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true, // required
            $this->config
        ) ?? []);

        // path params
        if (null !== $browse_node_id) {
            $resourcePath = str_replace(
                '{browseNodeId}',
                ObjectSerializer::toPathValue($browse_node_id),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams, $this->config);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams, $this->config);

        return new Request(
            'GET',
            $this->config->getHost().$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getBrowseNodeReturnTrends.
     *
     * @param string      $browse_node_id
     *                                         A browse node ID is a unique identifier of a browse node. A browse node is a named location in a browse tree that is used for navigation, product classification, and website content. (required)
     * @param string      $marketplace_id
     *                                         The MarketplaceId is the globally unique identifier of a marketplace, you can refer to the marketplaceId here : https://developer-docs.amazon.com/sp-api/docs/marketplace-ids. (required)
     * @param null|string $restrictedDataToken Restricted Data Token (RDT) for accessing restricted resources (optional, required for operations that return PII)
     *
     * @throws ApiException              on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function getBrowseNodeReturnTrends(
        string $browse_node_id,
        string $marketplace_id,
        ?string $restrictedDataToken = null
    ): BrowseNodeReturnTrendsResponse {
        list($response) = $this->getBrowseNodeReturnTrendsWithHttpInfo($browse_node_id, $marketplace_id, $restrictedDataToken);

        return $response;
    }

    /**
     * Operation getBrowseNodeReturnTrendsWithHttpInfo.
     *
     * @param string      $browse_node_id
     *                                         A browse node ID is a unique identifier of a browse node. A browse node is a named location in a browse tree that is used for navigation, product classification, and website content. (required)
     * @param string      $marketplace_id
     *                                         The MarketplaceId is the globally unique identifier of a marketplace, you can refer to the marketplaceId here : https://developer-docs.amazon.com/sp-api/docs/marketplace-ids. (required)
     * @param null|string $restrictedDataToken Restricted Data Token (RDT) for accessing restricted resources (optional, required for operations that return PII)
     *
     * @return array of \SpApi\Model\customerFeedback\v2024_06_01\BrowseNodeReturnTrendsResponse, HTTP status code, HTTP response headers (array of strings)
     *
     * @throws ApiException              on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function getBrowseNodeReturnTrendsWithHttpInfo(
        string $browse_node_id,
        string $marketplace_id,
        ?string $restrictedDataToken = null
    ): array {
        $request = $this->getBrowseNodeReturnTrendsRequest($browse_node_id, $marketplace_id);
        if (null !== $restrictedDataToken) {
            $request = RestrictedDataTokenSigner::sign($request, $restrictedDataToken, 'CustomerFeedbackApi-getBrowseNodeReturnTrends');
        } else {
            $request = $this->config->sign($request);
        }

        try {
            $options = $this->createHttpClientOption();

            try {
                if ($this->rateLimiterEnabled) {
                    $this->getBrowseNodeReturnTrendsRateLimiter->consume()->ensureAccepted();
                }
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getResponse()->getBody()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }
            if ('\SpApi\Model\customerFeedback\v2024_06_01\BrowseNodeReturnTrendsResponse' === '\SplFileObject') {
                $content = $response->getBody(); // stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ('\SpApi\Model\customerFeedback\v2024_06_01\BrowseNodeReturnTrendsResponse' !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, '\SpApi\Model\customerFeedback\v2024_06_01\BrowseNodeReturnTrendsResponse', []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            $data = ObjectSerializer::deserialize(
                $e->getResponseBody(),
                '\SpApi\Model\customerFeedback\v2024_06_01\ErrorList',
                $e->getResponseHeaders()
            );
            $e->setResponseObject($data);

            throw $e;
        }
    }

    /**
     * Operation getBrowseNodeReturnTrendsAsync.
     *
     * @param string $browse_node_id
     *                               A browse node ID is a unique identifier of a browse node. A browse node is a named location in a browse tree that is used for navigation, product classification, and website content. (required)
     * @param string $marketplace_id
     *                               The MarketplaceId is the globally unique identifier of a marketplace, you can refer to the marketplaceId here : https://developer-docs.amazon.com/sp-api/docs/marketplace-ids. (required)
     *
     * @throws \InvalidArgumentException
     */
    public function getBrowseNodeReturnTrendsAsync(
        string $browse_node_id,
        string $marketplace_id
    ): PromiseInterface {
        return $this->getBrowseNodeReturnTrendsAsyncWithHttpInfo($browse_node_id, $marketplace_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation getBrowseNodeReturnTrendsAsyncWithHttpInfo.
     *
     * @param string $browse_node_id
     *                               A browse node ID is a unique identifier of a browse node. A browse node is a named location in a browse tree that is used for navigation, product classification, and website content. (required)
     * @param string $marketplace_id
     *                               The MarketplaceId is the globally unique identifier of a marketplace, you can refer to the marketplaceId here : https://developer-docs.amazon.com/sp-api/docs/marketplace-ids. (required)
     *
     * @throws \InvalidArgumentException
     */
    public function getBrowseNodeReturnTrendsAsyncWithHttpInfo(
        string $browse_node_id,
        string $marketplace_id,
        ?string $restrictedDataToken = null
    ): PromiseInterface {
        $returnType = '\SpApi\Model\customerFeedback\v2024_06_01\BrowseNodeReturnTrendsResponse';
        $request = $this->getBrowseNodeReturnTrendsRequest($browse_node_id, $marketplace_id);
        if (null !== $restrictedDataToken) {
            $request = RestrictedDataTokenSigner::sign($request, $restrictedDataToken, 'CustomerFeedbackApi-getBrowseNodeReturnTrends');
        } else {
            $request = $this->config->sign($request);
        }
        if ($this->rateLimiterEnabled) {
            $this->getBrowseNodeReturnTrendsRateLimiter->consume()->ensureAccepted();
        }

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); // stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== $returnType) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            )
        ;
    }

    /**
     * Create request for operation 'getBrowseNodeReturnTrends'.
     *
     * @param string $browse_node_id
     *                               A browse node ID is a unique identifier of a browse node. A browse node is a named location in a browse tree that is used for navigation, product classification, and website content. (required)
     * @param string $marketplace_id
     *                               The MarketplaceId is the globally unique identifier of a marketplace, you can refer to the marketplaceId here : https://developer-docs.amazon.com/sp-api/docs/marketplace-ids. (required)
     *
     * @throws \InvalidArgumentException
     */
    public function getBrowseNodeReturnTrendsRequest(
        string $browse_node_id,
        string $marketplace_id
    ): Request {
        // verify the required parameter 'browse_node_id' is set
        if (null === $browse_node_id || (is_array($browse_node_id) && 0 === count($browse_node_id))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $browse_node_id when calling getBrowseNodeReturnTrends'
            );
        }
        // verify the required parameter 'marketplace_id' is set
        if (null === $marketplace_id || (is_array($marketplace_id) && 0 === count($marketplace_id))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $marketplace_id when calling getBrowseNodeReturnTrends'
            );
        }

        $resourcePath = '/customerFeedback/2024-06-01/browseNodes/{browseNodeId}/returns/trends';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $marketplace_id,
            'marketplaceId', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true, // required
            $this->config
        ) ?? []);

        // path params
        if (null !== $browse_node_id) {
            $resourcePath = str_replace(
                '{browseNodeId}',
                ObjectSerializer::toPathValue($browse_node_id),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams, $this->config);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams, $this->config);

        return new Request(
            'GET',
            $this->config->getHost().$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getBrowseNodeReviewTopics.
     *
     * @param string      $browse_node_id
     *                                         The ID of a browse node. A browse node is a named location in a browse tree that is used for navigation, product classification, and website content. (required)
     * @param string      $marketplace_id
     *                                         The MarketplaceId is the globally unique identifier of a marketplace, you can refer to the marketplaceId here : https://developer-docs.amazon.com/sp-api/docs/marketplace-ids. (required)
     * @param string      $sort_by
     *                                         The metric by which to sort the data in the response. (required)
     * @param null|string $restrictedDataToken Restricted Data Token (RDT) for accessing restricted resources (optional, required for operations that return PII)
     *
     * @throws ApiException              on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function getBrowseNodeReviewTopics(
        string $browse_node_id,
        string $marketplace_id,
        string $sort_by,
        ?string $restrictedDataToken = null
    ): BrowseNodeReviewTopicsResponse {
        list($response) = $this->getBrowseNodeReviewTopicsWithHttpInfo($browse_node_id, $marketplace_id, $sort_by, $restrictedDataToken);

        return $response;
    }

    /**
     * Operation getBrowseNodeReviewTopicsWithHttpInfo.
     *
     * @param string      $browse_node_id
     *                                         The ID of a browse node. A browse node is a named location in a browse tree that is used for navigation, product classification, and website content. (required)
     * @param string      $marketplace_id
     *                                         The MarketplaceId is the globally unique identifier of a marketplace, you can refer to the marketplaceId here : https://developer-docs.amazon.com/sp-api/docs/marketplace-ids. (required)
     * @param string      $sort_by
     *                                         The metric by which to sort the data in the response. (required)
     * @param null|string $restrictedDataToken Restricted Data Token (RDT) for accessing restricted resources (optional, required for operations that return PII)
     *
     * @return array of \SpApi\Model\customerFeedback\v2024_06_01\BrowseNodeReviewTopicsResponse, HTTP status code, HTTP response headers (array of strings)
     *
     * @throws ApiException              on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function getBrowseNodeReviewTopicsWithHttpInfo(
        string $browse_node_id,
        string $marketplace_id,
        string $sort_by,
        ?string $restrictedDataToken = null
    ): array {
        $request = $this->getBrowseNodeReviewTopicsRequest($browse_node_id, $marketplace_id, $sort_by);
        if (null !== $restrictedDataToken) {
            $request = RestrictedDataTokenSigner::sign($request, $restrictedDataToken, 'CustomerFeedbackApi-getBrowseNodeReviewTopics');
        } else {
            $request = $this->config->sign($request);
        }

        try {
            $options = $this->createHttpClientOption();

            try {
                if ($this->rateLimiterEnabled) {
                    $this->getBrowseNodeReviewTopicsRateLimiter->consume()->ensureAccepted();
                }
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getResponse()->getBody()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }
            if ('\SpApi\Model\customerFeedback\v2024_06_01\BrowseNodeReviewTopicsResponse' === '\SplFileObject') {
                $content = $response->getBody(); // stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ('\SpApi\Model\customerFeedback\v2024_06_01\BrowseNodeReviewTopicsResponse' !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, '\SpApi\Model\customerFeedback\v2024_06_01\BrowseNodeReviewTopicsResponse', []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            $data = ObjectSerializer::deserialize(
                $e->getResponseBody(),
                '\SpApi\Model\customerFeedback\v2024_06_01\ErrorList',
                $e->getResponseHeaders()
            );
            $e->setResponseObject($data);

            throw $e;
        }
    }

    /**
     * Operation getBrowseNodeReviewTopicsAsync.
     *
     * @param string $browse_node_id
     *                               The ID of a browse node. A browse node is a named location in a browse tree that is used for navigation, product classification, and website content. (required)
     * @param string $marketplace_id
     *                               The MarketplaceId is the globally unique identifier of a marketplace, you can refer to the marketplaceId here : https://developer-docs.amazon.com/sp-api/docs/marketplace-ids. (required)
     * @param string $sort_by
     *                               The metric by which to sort the data in the response. (required)
     *
     * @throws \InvalidArgumentException
     */
    public function getBrowseNodeReviewTopicsAsync(
        string $browse_node_id,
        string $marketplace_id,
        string $sort_by
    ): PromiseInterface {
        return $this->getBrowseNodeReviewTopicsAsyncWithHttpInfo($browse_node_id, $marketplace_id, $sort_by)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation getBrowseNodeReviewTopicsAsyncWithHttpInfo.
     *
     * @param string $browse_node_id
     *                               The ID of a browse node. A browse node is a named location in a browse tree that is used for navigation, product classification, and website content. (required)
     * @param string $marketplace_id
     *                               The MarketplaceId is the globally unique identifier of a marketplace, you can refer to the marketplaceId here : https://developer-docs.amazon.com/sp-api/docs/marketplace-ids. (required)
     * @param string $sort_by
     *                               The metric by which to sort the data in the response. (required)
     *
     * @throws \InvalidArgumentException
     */
    public function getBrowseNodeReviewTopicsAsyncWithHttpInfo(
        string $browse_node_id,
        string $marketplace_id,
        string $sort_by,
        ?string $restrictedDataToken = null
    ): PromiseInterface {
        $returnType = '\SpApi\Model\customerFeedback\v2024_06_01\BrowseNodeReviewTopicsResponse';
        $request = $this->getBrowseNodeReviewTopicsRequest($browse_node_id, $marketplace_id, $sort_by);
        if (null !== $restrictedDataToken) {
            $request = RestrictedDataTokenSigner::sign($request, $restrictedDataToken, 'CustomerFeedbackApi-getBrowseNodeReviewTopics');
        } else {
            $request = $this->config->sign($request);
        }
        if ($this->rateLimiterEnabled) {
            $this->getBrowseNodeReviewTopicsRateLimiter->consume()->ensureAccepted();
        }

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); // stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== $returnType) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            )
        ;
    }

    /**
     * Create request for operation 'getBrowseNodeReviewTopics'.
     *
     * @param string $browse_node_id
     *                               The ID of a browse node. A browse node is a named location in a browse tree that is used for navigation, product classification, and website content. (required)
     * @param string $marketplace_id
     *                               The MarketplaceId is the globally unique identifier of a marketplace, you can refer to the marketplaceId here : https://developer-docs.amazon.com/sp-api/docs/marketplace-ids. (required)
     * @param string $sort_by
     *                               The metric by which to sort the data in the response. (required)
     *
     * @throws \InvalidArgumentException
     */
    public function getBrowseNodeReviewTopicsRequest(
        string $browse_node_id,
        string $marketplace_id,
        string $sort_by
    ): Request {
        // verify the required parameter 'browse_node_id' is set
        if (null === $browse_node_id || (is_array($browse_node_id) && 0 === count($browse_node_id))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $browse_node_id when calling getBrowseNodeReviewTopics'
            );
        }
        // verify the required parameter 'marketplace_id' is set
        if (null === $marketplace_id || (is_array($marketplace_id) && 0 === count($marketplace_id))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $marketplace_id when calling getBrowseNodeReviewTopics'
            );
        }
        // verify the required parameter 'sort_by' is set
        if (null === $sort_by || (is_array($sort_by) && 0 === count($sort_by))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sort_by when calling getBrowseNodeReviewTopics'
            );
        }

        $resourcePath = '/customerFeedback/2024-06-01/browseNodes/{browseNodeId}/reviews/topics';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $marketplace_id,
            'marketplaceId', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true, // required
            $this->config
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort_by,
            'sortBy', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true, // required
            $this->config
        ) ?? []);

        // path params
        if (null !== $browse_node_id) {
            $resourcePath = str_replace(
                '{browseNodeId}',
                ObjectSerializer::toPathValue($browse_node_id),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams, $this->config);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams, $this->config);

        return new Request(
            'GET',
            $this->config->getHost().$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getBrowseNodeReviewTrends.
     *
     * @param string      $browse_node_id
     *                                         A browse node ID is a unique identifier of a browse node. A browse node is a named location in a browse tree that is used for navigation, product classification, and website content. (required)
     * @param string      $marketplace_id
     *                                         The marketplace ID is the globally unique identifier of a marketplace. For more information, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids). (required)
     * @param null|string $restrictedDataToken Restricted Data Token (RDT) for accessing restricted resources (optional, required for operations that return PII)
     *
     * @throws ApiException              on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function getBrowseNodeReviewTrends(
        string $browse_node_id,
        string $marketplace_id,
        ?string $restrictedDataToken = null
    ): BrowseNodeReviewTrendsResponse {
        list($response) = $this->getBrowseNodeReviewTrendsWithHttpInfo($browse_node_id, $marketplace_id, $restrictedDataToken);

        return $response;
    }

    /**
     * Operation getBrowseNodeReviewTrendsWithHttpInfo.
     *
     * @param string      $browse_node_id
     *                                         A browse node ID is a unique identifier of a browse node. A browse node is a named location in a browse tree that is used for navigation, product classification, and website content. (required)
     * @param string      $marketplace_id
     *                                         The marketplace ID is the globally unique identifier of a marketplace. For more information, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids). (required)
     * @param null|string $restrictedDataToken Restricted Data Token (RDT) for accessing restricted resources (optional, required for operations that return PII)
     *
     * @return array of \SpApi\Model\customerFeedback\v2024_06_01\BrowseNodeReviewTrendsResponse, HTTP status code, HTTP response headers (array of strings)
     *
     * @throws ApiException              on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function getBrowseNodeReviewTrendsWithHttpInfo(
        string $browse_node_id,
        string $marketplace_id,
        ?string $restrictedDataToken = null
    ): array {
        $request = $this->getBrowseNodeReviewTrendsRequest($browse_node_id, $marketplace_id);
        if (null !== $restrictedDataToken) {
            $request = RestrictedDataTokenSigner::sign($request, $restrictedDataToken, 'CustomerFeedbackApi-getBrowseNodeReviewTrends');
        } else {
            $request = $this->config->sign($request);
        }

        try {
            $options = $this->createHttpClientOption();

            try {
                if ($this->rateLimiterEnabled) {
                    $this->getBrowseNodeReviewTrendsRateLimiter->consume()->ensureAccepted();
                }
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getResponse()->getBody()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }
            if ('\SpApi\Model\customerFeedback\v2024_06_01\BrowseNodeReviewTrendsResponse' === '\SplFileObject') {
                $content = $response->getBody(); // stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ('\SpApi\Model\customerFeedback\v2024_06_01\BrowseNodeReviewTrendsResponse' !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, '\SpApi\Model\customerFeedback\v2024_06_01\BrowseNodeReviewTrendsResponse', []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            $data = ObjectSerializer::deserialize(
                $e->getResponseBody(),
                '\SpApi\Model\customerFeedback\v2024_06_01\ErrorList',
                $e->getResponseHeaders()
            );
            $e->setResponseObject($data);

            throw $e;
        }
    }

    /**
     * Operation getBrowseNodeReviewTrendsAsync.
     *
     * @param string $browse_node_id
     *                               A browse node ID is a unique identifier of a browse node. A browse node is a named location in a browse tree that is used for navigation, product classification, and website content. (required)
     * @param string $marketplace_id
     *                               The marketplace ID is the globally unique identifier of a marketplace. For more information, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids). (required)
     *
     * @throws \InvalidArgumentException
     */
    public function getBrowseNodeReviewTrendsAsync(
        string $browse_node_id,
        string $marketplace_id
    ): PromiseInterface {
        return $this->getBrowseNodeReviewTrendsAsyncWithHttpInfo($browse_node_id, $marketplace_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation getBrowseNodeReviewTrendsAsyncWithHttpInfo.
     *
     * @param string $browse_node_id
     *                               A browse node ID is a unique identifier of a browse node. A browse node is a named location in a browse tree that is used for navigation, product classification, and website content. (required)
     * @param string $marketplace_id
     *                               The marketplace ID is the globally unique identifier of a marketplace. For more information, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids). (required)
     *
     * @throws \InvalidArgumentException
     */
    public function getBrowseNodeReviewTrendsAsyncWithHttpInfo(
        string $browse_node_id,
        string $marketplace_id,
        ?string $restrictedDataToken = null
    ): PromiseInterface {
        $returnType = '\SpApi\Model\customerFeedback\v2024_06_01\BrowseNodeReviewTrendsResponse';
        $request = $this->getBrowseNodeReviewTrendsRequest($browse_node_id, $marketplace_id);
        if (null !== $restrictedDataToken) {
            $request = RestrictedDataTokenSigner::sign($request, $restrictedDataToken, 'CustomerFeedbackApi-getBrowseNodeReviewTrends');
        } else {
            $request = $this->config->sign($request);
        }
        if ($this->rateLimiterEnabled) {
            $this->getBrowseNodeReviewTrendsRateLimiter->consume()->ensureAccepted();
        }

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); // stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== $returnType) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            )
        ;
    }

    /**
     * Create request for operation 'getBrowseNodeReviewTrends'.
     *
     * @param string $browse_node_id
     *                               A browse node ID is a unique identifier of a browse node. A browse node is a named location in a browse tree that is used for navigation, product classification, and website content. (required)
     * @param string $marketplace_id
     *                               The marketplace ID is the globally unique identifier of a marketplace. For more information, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids). (required)
     *
     * @throws \InvalidArgumentException
     */
    public function getBrowseNodeReviewTrendsRequest(
        string $browse_node_id,
        string $marketplace_id
    ): Request {
        // verify the required parameter 'browse_node_id' is set
        if (null === $browse_node_id || (is_array($browse_node_id) && 0 === count($browse_node_id))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $browse_node_id when calling getBrowseNodeReviewTrends'
            );
        }
        // verify the required parameter 'marketplace_id' is set
        if (null === $marketplace_id || (is_array($marketplace_id) && 0 === count($marketplace_id))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $marketplace_id when calling getBrowseNodeReviewTrends'
            );
        }

        $resourcePath = '/customerFeedback/2024-06-01/browseNodes/{browseNodeId}/reviews/trends';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $marketplace_id,
            'marketplaceId', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true, // required
            $this->config
        ) ?? []);

        // path params
        if (null !== $browse_node_id) {
            $resourcePath = str_replace(
                '{browseNodeId}',
                ObjectSerializer::toPathValue($browse_node_id),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams, $this->config);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams, $this->config);

        return new Request(
            'GET',
            $this->config->getHost().$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getItemBrowseNode.
     *
     * @param string      $asin
     *                                         The Amazon Standard Identification Number (ASIN) is the unique identifier of a product within a marketplace. (required)
     * @param string      $marketplace_id
     *                                         The MarketplaceId is the globally unique identifier of a marketplace, you can refer to the marketplaceId here : https://developer-docs.amazon.com/sp-api/docs/marketplace-ids. (required)
     * @param null|string $restrictedDataToken Restricted Data Token (RDT) for accessing restricted resources (optional, required for operations that return PII)
     *
     * @throws ApiException              on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function getItemBrowseNode(
        string $asin,
        string $marketplace_id,
        ?string $restrictedDataToken = null
    ): BrowseNodeResponse {
        list($response) = $this->getItemBrowseNodeWithHttpInfo($asin, $marketplace_id, $restrictedDataToken);

        return $response;
    }

    /**
     * Operation getItemBrowseNodeWithHttpInfo.
     *
     * @param string      $asin
     *                                         The Amazon Standard Identification Number (ASIN) is the unique identifier of a product within a marketplace. (required)
     * @param string      $marketplace_id
     *                                         The MarketplaceId is the globally unique identifier of a marketplace, you can refer to the marketplaceId here : https://developer-docs.amazon.com/sp-api/docs/marketplace-ids. (required)
     * @param null|string $restrictedDataToken Restricted Data Token (RDT) for accessing restricted resources (optional, required for operations that return PII)
     *
     * @return array of \SpApi\Model\customerFeedback\v2024_06_01\BrowseNodeResponse, HTTP status code, HTTP response headers (array of strings)
     *
     * @throws ApiException              on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function getItemBrowseNodeWithHttpInfo(
        string $asin,
        string $marketplace_id,
        ?string $restrictedDataToken = null
    ): array {
        $request = $this->getItemBrowseNodeRequest($asin, $marketplace_id);
        if (null !== $restrictedDataToken) {
            $request = RestrictedDataTokenSigner::sign($request, $restrictedDataToken, 'CustomerFeedbackApi-getItemBrowseNode');
        } else {
            $request = $this->config->sign($request);
        }

        try {
            $options = $this->createHttpClientOption();

            try {
                if ($this->rateLimiterEnabled) {
                    $this->getItemBrowseNodeRateLimiter->consume()->ensureAccepted();
                }
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getResponse()->getBody()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }
            if ('\SpApi\Model\customerFeedback\v2024_06_01\BrowseNodeResponse' === '\SplFileObject') {
                $content = $response->getBody(); // stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ('\SpApi\Model\customerFeedback\v2024_06_01\BrowseNodeResponse' !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, '\SpApi\Model\customerFeedback\v2024_06_01\BrowseNodeResponse', []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            $data = ObjectSerializer::deserialize(
                $e->getResponseBody(),
                '\SpApi\Model\customerFeedback\v2024_06_01\ErrorList',
                $e->getResponseHeaders()
            );
            $e->setResponseObject($data);

            throw $e;
        }
    }

    /**
     * Operation getItemBrowseNodeAsync.
     *
     * @param string $asin
     *                               The Amazon Standard Identification Number (ASIN) is the unique identifier of a product within a marketplace. (required)
     * @param string $marketplace_id
     *                               The MarketplaceId is the globally unique identifier of a marketplace, you can refer to the marketplaceId here : https://developer-docs.amazon.com/sp-api/docs/marketplace-ids. (required)
     *
     * @throws \InvalidArgumentException
     */
    public function getItemBrowseNodeAsync(
        string $asin,
        string $marketplace_id
    ): PromiseInterface {
        return $this->getItemBrowseNodeAsyncWithHttpInfo($asin, $marketplace_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation getItemBrowseNodeAsyncWithHttpInfo.
     *
     * @param string $asin
     *                               The Amazon Standard Identification Number (ASIN) is the unique identifier of a product within a marketplace. (required)
     * @param string $marketplace_id
     *                               The MarketplaceId is the globally unique identifier of a marketplace, you can refer to the marketplaceId here : https://developer-docs.amazon.com/sp-api/docs/marketplace-ids. (required)
     *
     * @throws \InvalidArgumentException
     */
    public function getItemBrowseNodeAsyncWithHttpInfo(
        string $asin,
        string $marketplace_id,
        ?string $restrictedDataToken = null
    ): PromiseInterface {
        $returnType = '\SpApi\Model\customerFeedback\v2024_06_01\BrowseNodeResponse';
        $request = $this->getItemBrowseNodeRequest($asin, $marketplace_id);
        if (null !== $restrictedDataToken) {
            $request = RestrictedDataTokenSigner::sign($request, $restrictedDataToken, 'CustomerFeedbackApi-getItemBrowseNode');
        } else {
            $request = $this->config->sign($request);
        }
        if ($this->rateLimiterEnabled) {
            $this->getItemBrowseNodeRateLimiter->consume()->ensureAccepted();
        }

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); // stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== $returnType) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            )
        ;
    }

    /**
     * Create request for operation 'getItemBrowseNode'.
     *
     * @param string $asin
     *                               The Amazon Standard Identification Number (ASIN) is the unique identifier of a product within a marketplace. (required)
     * @param string $marketplace_id
     *                               The MarketplaceId is the globally unique identifier of a marketplace, you can refer to the marketplaceId here : https://developer-docs.amazon.com/sp-api/docs/marketplace-ids. (required)
     *
     * @throws \InvalidArgumentException
     */
    public function getItemBrowseNodeRequest(
        string $asin,
        string $marketplace_id
    ): Request {
        // verify the required parameter 'asin' is set
        if (null === $asin || (is_array($asin) && 0 === count($asin))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $asin when calling getItemBrowseNode'
            );
        }
        // verify the required parameter 'marketplace_id' is set
        if (null === $marketplace_id || (is_array($marketplace_id) && 0 === count($marketplace_id))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $marketplace_id when calling getItemBrowseNode'
            );
        }

        $resourcePath = '/customerFeedback/2024-06-01/items/{asin}/browseNode';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $marketplace_id,
            'marketplaceId', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true, // required
            $this->config
        ) ?? []);

        // path params
        if (null !== $asin) {
            $resourcePath = str_replace(
                '{asin}',
                ObjectSerializer::toPathValue($asin),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams, $this->config);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams, $this->config);

        return new Request(
            'GET',
            $this->config->getHost().$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getItemReviewTopics.
     *
     * @param string      $asin
     *                                         The Amazon Standard Identification Number (ASIN) is the unique identifier of a product within a marketplace. The value must be a child ASIN. (required)
     * @param string      $marketplace_id
     *                                         The MarketplaceId is the globally unique identifier of a marketplace, you can refer to the marketplaceId here : https://developer-docs.amazon.com/sp-api/docs/marketplace-ids. (required)
     * @param string      $sort_by
     *                                         The metric by which to sort data in the response. (required)
     * @param null|string $restrictedDataToken Restricted Data Token (RDT) for accessing restricted resources (optional, required for operations that return PII)
     *
     * @throws ApiException              on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function getItemReviewTopics(
        string $asin,
        string $marketplace_id,
        string $sort_by,
        ?string $restrictedDataToken = null
    ): ItemReviewTopicsResponse {
        list($response) = $this->getItemReviewTopicsWithHttpInfo($asin, $marketplace_id, $sort_by, $restrictedDataToken);

        return $response;
    }

    /**
     * Operation getItemReviewTopicsWithHttpInfo.
     *
     * @param string      $asin
     *                                         The Amazon Standard Identification Number (ASIN) is the unique identifier of a product within a marketplace. The value must be a child ASIN. (required)
     * @param string      $marketplace_id
     *                                         The MarketplaceId is the globally unique identifier of a marketplace, you can refer to the marketplaceId here : https://developer-docs.amazon.com/sp-api/docs/marketplace-ids. (required)
     * @param string      $sort_by
     *                                         The metric by which to sort data in the response. (required)
     * @param null|string $restrictedDataToken Restricted Data Token (RDT) for accessing restricted resources (optional, required for operations that return PII)
     *
     * @return array of \SpApi\Model\customerFeedback\v2024_06_01\ItemReviewTopicsResponse, HTTP status code, HTTP response headers (array of strings)
     *
     * @throws ApiException              on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function getItemReviewTopicsWithHttpInfo(
        string $asin,
        string $marketplace_id,
        string $sort_by,
        ?string $restrictedDataToken = null
    ): array {
        $request = $this->getItemReviewTopicsRequest($asin, $marketplace_id, $sort_by);
        if (null !== $restrictedDataToken) {
            $request = RestrictedDataTokenSigner::sign($request, $restrictedDataToken, 'CustomerFeedbackApi-getItemReviewTopics');
        } else {
            $request = $this->config->sign($request);
        }

        try {
            $options = $this->createHttpClientOption();

            try {
                if ($this->rateLimiterEnabled) {
                    $this->getItemReviewTopicsRateLimiter->consume()->ensureAccepted();
                }
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getResponse()->getBody()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }
            if ('\SpApi\Model\customerFeedback\v2024_06_01\ItemReviewTopicsResponse' === '\SplFileObject') {
                $content = $response->getBody(); // stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ('\SpApi\Model\customerFeedback\v2024_06_01\ItemReviewTopicsResponse' !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, '\SpApi\Model\customerFeedback\v2024_06_01\ItemReviewTopicsResponse', []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            $data = ObjectSerializer::deserialize(
                $e->getResponseBody(),
                '\SpApi\Model\customerFeedback\v2024_06_01\ErrorList',
                $e->getResponseHeaders()
            );
            $e->setResponseObject($data);

            throw $e;
        }
    }

    /**
     * Operation getItemReviewTopicsAsync.
     *
     * @param string $asin
     *                               The Amazon Standard Identification Number (ASIN) is the unique identifier of a product within a marketplace. The value must be a child ASIN. (required)
     * @param string $marketplace_id
     *                               The MarketplaceId is the globally unique identifier of a marketplace, you can refer to the marketplaceId here : https://developer-docs.amazon.com/sp-api/docs/marketplace-ids. (required)
     * @param string $sort_by
     *                               The metric by which to sort data in the response. (required)
     *
     * @throws \InvalidArgumentException
     */
    public function getItemReviewTopicsAsync(
        string $asin,
        string $marketplace_id,
        string $sort_by
    ): PromiseInterface {
        return $this->getItemReviewTopicsAsyncWithHttpInfo($asin, $marketplace_id, $sort_by)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation getItemReviewTopicsAsyncWithHttpInfo.
     *
     * @param string $asin
     *                               The Amazon Standard Identification Number (ASIN) is the unique identifier of a product within a marketplace. The value must be a child ASIN. (required)
     * @param string $marketplace_id
     *                               The MarketplaceId is the globally unique identifier of a marketplace, you can refer to the marketplaceId here : https://developer-docs.amazon.com/sp-api/docs/marketplace-ids. (required)
     * @param string $sort_by
     *                               The metric by which to sort data in the response. (required)
     *
     * @throws \InvalidArgumentException
     */
    public function getItemReviewTopicsAsyncWithHttpInfo(
        string $asin,
        string $marketplace_id,
        string $sort_by,
        ?string $restrictedDataToken = null
    ): PromiseInterface {
        $returnType = '\SpApi\Model\customerFeedback\v2024_06_01\ItemReviewTopicsResponse';
        $request = $this->getItemReviewTopicsRequest($asin, $marketplace_id, $sort_by);
        if (null !== $restrictedDataToken) {
            $request = RestrictedDataTokenSigner::sign($request, $restrictedDataToken, 'CustomerFeedbackApi-getItemReviewTopics');
        } else {
            $request = $this->config->sign($request);
        }
        if ($this->rateLimiterEnabled) {
            $this->getItemReviewTopicsRateLimiter->consume()->ensureAccepted();
        }

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); // stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== $returnType) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            )
        ;
    }

    /**
     * Create request for operation 'getItemReviewTopics'.
     *
     * @param string $asin
     *                               The Amazon Standard Identification Number (ASIN) is the unique identifier of a product within a marketplace. The value must be a child ASIN. (required)
     * @param string $marketplace_id
     *                               The MarketplaceId is the globally unique identifier of a marketplace, you can refer to the marketplaceId here : https://developer-docs.amazon.com/sp-api/docs/marketplace-ids. (required)
     * @param string $sort_by
     *                               The metric by which to sort data in the response. (required)
     *
     * @throws \InvalidArgumentException
     */
    public function getItemReviewTopicsRequest(
        string $asin,
        string $marketplace_id,
        string $sort_by
    ): Request {
        // verify the required parameter 'asin' is set
        if (null === $asin || (is_array($asin) && 0 === count($asin))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $asin when calling getItemReviewTopics'
            );
        }
        // verify the required parameter 'marketplace_id' is set
        if (null === $marketplace_id || (is_array($marketplace_id) && 0 === count($marketplace_id))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $marketplace_id when calling getItemReviewTopics'
            );
        }
        // verify the required parameter 'sort_by' is set
        if (null === $sort_by || (is_array($sort_by) && 0 === count($sort_by))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sort_by when calling getItemReviewTopics'
            );
        }

        $resourcePath = '/customerFeedback/2024-06-01/items/{asin}/reviews/topics';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $marketplace_id,
            'marketplaceId', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true, // required
            $this->config
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort_by,
            'sortBy', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true, // required
            $this->config
        ) ?? []);

        // path params
        if (null !== $asin) {
            $resourcePath = str_replace(
                '{asin}',
                ObjectSerializer::toPathValue($asin),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams, $this->config);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams, $this->config);

        return new Request(
            'GET',
            $this->config->getHost().$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getItemReviewTrends.
     *
     * @param string      $asin
     *                                         The Amazon Standard Identification Number (ASIN) is the unique identifier of a product within a marketplace. This API takes child ASIN as an input. (required)
     * @param string      $marketplace_id
     *                                         The MarketplaceId is the globally unique identifier of a marketplace, you can refer to the marketplaceId here : https://developer-docs.amazon.com/sp-api/docs/marketplace-ids. (required)
     * @param null|string $restrictedDataToken Restricted Data Token (RDT) for accessing restricted resources (optional, required for operations that return PII)
     *
     * @throws ApiException              on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function getItemReviewTrends(
        string $asin,
        string $marketplace_id,
        ?string $restrictedDataToken = null
    ): ItemReviewTrendsResponse {
        list($response) = $this->getItemReviewTrendsWithHttpInfo($asin, $marketplace_id, $restrictedDataToken);

        return $response;
    }

    /**
     * Operation getItemReviewTrendsWithHttpInfo.
     *
     * @param string      $asin
     *                                         The Amazon Standard Identification Number (ASIN) is the unique identifier of a product within a marketplace. This API takes child ASIN as an input. (required)
     * @param string      $marketplace_id
     *                                         The MarketplaceId is the globally unique identifier of a marketplace, you can refer to the marketplaceId here : https://developer-docs.amazon.com/sp-api/docs/marketplace-ids. (required)
     * @param null|string $restrictedDataToken Restricted Data Token (RDT) for accessing restricted resources (optional, required for operations that return PII)
     *
     * @return array of \SpApi\Model\customerFeedback\v2024_06_01\ItemReviewTrendsResponse, HTTP status code, HTTP response headers (array of strings)
     *
     * @throws ApiException              on non-2xx response
     * @throws \InvalidArgumentException
     */
    public function getItemReviewTrendsWithHttpInfo(
        string $asin,
        string $marketplace_id,
        ?string $restrictedDataToken = null
    ): array {
        $request = $this->getItemReviewTrendsRequest($asin, $marketplace_id);
        if (null !== $restrictedDataToken) {
            $request = RestrictedDataTokenSigner::sign($request, $restrictedDataToken, 'CustomerFeedbackApi-getItemReviewTrends');
        } else {
            $request = $this->config->sign($request);
        }

        try {
            $options = $this->createHttpClientOption();

            try {
                if ($this->rateLimiterEnabled) {
                    $this->getItemReviewTrendsRateLimiter->consume()->ensureAccepted();
                }
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getResponse()->getBody()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }
            if ('\SpApi\Model\customerFeedback\v2024_06_01\ItemReviewTrendsResponse' === '\SplFileObject') {
                $content = $response->getBody(); // stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ('\SpApi\Model\customerFeedback\v2024_06_01\ItemReviewTrendsResponse' !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, '\SpApi\Model\customerFeedback\v2024_06_01\ItemReviewTrendsResponse', []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            $data = ObjectSerializer::deserialize(
                $e->getResponseBody(),
                '\SpApi\Model\customerFeedback\v2024_06_01\ErrorList',
                $e->getResponseHeaders()
            );
            $e->setResponseObject($data);

            throw $e;
        }
    }

    /**
     * Operation getItemReviewTrendsAsync.
     *
     * @param string $asin
     *                               The Amazon Standard Identification Number (ASIN) is the unique identifier of a product within a marketplace. This API takes child ASIN as an input. (required)
     * @param string $marketplace_id
     *                               The MarketplaceId is the globally unique identifier of a marketplace, you can refer to the marketplaceId here : https://developer-docs.amazon.com/sp-api/docs/marketplace-ids. (required)
     *
     * @throws \InvalidArgumentException
     */
    public function getItemReviewTrendsAsync(
        string $asin,
        string $marketplace_id
    ): PromiseInterface {
        return $this->getItemReviewTrendsAsyncWithHttpInfo($asin, $marketplace_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation getItemReviewTrendsAsyncWithHttpInfo.
     *
     * @param string $asin
     *                               The Amazon Standard Identification Number (ASIN) is the unique identifier of a product within a marketplace. This API takes child ASIN as an input. (required)
     * @param string $marketplace_id
     *                               The MarketplaceId is the globally unique identifier of a marketplace, you can refer to the marketplaceId here : https://developer-docs.amazon.com/sp-api/docs/marketplace-ids. (required)
     *
     * @throws \InvalidArgumentException
     */
    public function getItemReviewTrendsAsyncWithHttpInfo(
        string $asin,
        string $marketplace_id,
        ?string $restrictedDataToken = null
    ): PromiseInterface {
        $returnType = '\SpApi\Model\customerFeedback\v2024_06_01\ItemReviewTrendsResponse';
        $request = $this->getItemReviewTrendsRequest($asin, $marketplace_id);
        if (null !== $restrictedDataToken) {
            $request = RestrictedDataTokenSigner::sign($request, $restrictedDataToken, 'CustomerFeedbackApi-getItemReviewTrends');
        } else {
            $request = $this->config->sign($request);
        }
        if ($this->rateLimiterEnabled) {
            $this->getItemReviewTrendsRateLimiter->consume()->ensureAccepted();
        }

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); // stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== $returnType) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            )
        ;
    }

    /**
     * Create request for operation 'getItemReviewTrends'.
     *
     * @param string $asin
     *                               The Amazon Standard Identification Number (ASIN) is the unique identifier of a product within a marketplace. This API takes child ASIN as an input. (required)
     * @param string $marketplace_id
     *                               The MarketplaceId is the globally unique identifier of a marketplace, you can refer to the marketplaceId here : https://developer-docs.amazon.com/sp-api/docs/marketplace-ids. (required)
     *
     * @throws \InvalidArgumentException
     */
    public function getItemReviewTrendsRequest(
        string $asin,
        string $marketplace_id
    ): Request {
        // verify the required parameter 'asin' is set
        if (null === $asin || (is_array($asin) && 0 === count($asin))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $asin when calling getItemReviewTrends'
            );
        }
        // verify the required parameter 'marketplace_id' is set
        if (null === $marketplace_id || (is_array($marketplace_id) && 0 === count($marketplace_id))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $marketplace_id when calling getItemReviewTrends'
            );
        }

        $resourcePath = '/customerFeedback/2024-06-01/items/{asin}/reviews/trends';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $marketplace_id,
            'marketplaceId', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true, // required
            $this->config
        ) ?? []);

        // path params
        if (null !== $asin) {
            $resourcePath = str_replace(
                '{asin}',
                ObjectSerializer::toPathValue($asin),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            '',
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams, $this->config);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams, $this->config);

        return new Request(
            'GET',
            $this->config->getHost().$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option.
     *
     * @return array of http client options
     *
     * @throws \RuntimeException on file opening failure
     */
    protected function createHttpClientOption(): array
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: '.$this->config->getDebugFile());
            }
        }

        return $options;
    }
}
