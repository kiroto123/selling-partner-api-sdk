/**
 * Selling Partner API for Messaging
 * With the Messaging API you can build applications that send messages to buyers. You can get a list of message types that are available for an order that you specify, then call an operation that sends a message to the buyer for that order. The Messaging API returns responses that are formed according to the <a href=https://tools.ietf.org/html/draft-kelly-json-hal-08>JSON Hypertext Application Language</a> (HAL) standard.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import expect from 'expect.js';
import sinon from 'sinon';
import { join } from 'path';

const modulePath = join(process.cwd(), 'src', 'messaging_v1', 'index.js');
const SellingPartnerApiForMessaging = await import(modulePath);

let instance;
let sandbox;
const testEndpoint = 'https://localhost:3000';
const testAccessToken = "testAccessToken";

// Helper function to generate random test data
function generateMockData(dataType, isArray = false) {
  if (!dataType) return {};

  // Handle array types
  if (isArray) {
    return [generateMockData(dataType), generateMockData(dataType)];
  }

  switch(dataType) {
    case 'String':
      return 'mock-' + Math.random().toString(36).substring(2, 10);
    case 'Number':
      return Math.floor(Math.random() * 1000);
    case 'Boolean':
      return Math.random() > 0.5;
    case 'Date':
      return new Date().toISOString();
    default:
      try {
        const ModelClass = SellingPartnerApiForMessaging[dataType];
        if (ModelClass) {
          const instance = Object.create(ModelClass.prototype);
          return instance;
        }
      } catch (e) {
        console.error("Error creating instance of", dataType);
        return {};
      }
      return {};
  }
}

// Generate mock requests and responses for each operation
const mockconfirmCustomizationDetailsData = {
  request: {
    'amazonOrderId': generateMockData('String'),
    'marketplaceIds': generateMockData('String', true),
    'body': generateMockData('CreateConfirmCustomizationDetailsRequest')
  },
  response: {
    data: generateMockData('CreateConfirmCustomizationDetailsResponse'),
    statusCode: 201,
    headers: {}
  }
};
const mockcreateAmazonMotorsData = {
  request: {
    'amazonOrderId': generateMockData('String'),
    'marketplaceIds': generateMockData('String', true),
    'body': generateMockData('CreateAmazonMotorsRequest')
  },
  response: {
    data: generateMockData('CreateAmazonMotorsResponse'),
    statusCode: 201,
    headers: {}
  }
};
const mockcreateConfirmDeliveryDetailsData = {
  request: {
    'amazonOrderId': generateMockData('String'),
    'marketplaceIds': generateMockData('String', true),
    'body': generateMockData('CreateConfirmDeliveryDetailsRequest')
  },
  response: {
    data: generateMockData('CreateConfirmDeliveryDetailsResponse'),
    statusCode: 201,
    headers: {}
  }
};
const mockcreateConfirmOrderDetailsData = {
  request: {
    'amazonOrderId': generateMockData('String'),
    'marketplaceIds': generateMockData('String', true),
    'body': generateMockData('CreateConfirmOrderDetailsRequest')
  },
  response: {
    data: generateMockData('CreateConfirmOrderDetailsResponse'),
    statusCode: 201,
    headers: {}
  }
};
const mockcreateConfirmServiceDetailsData = {
  request: {
    'amazonOrderId': generateMockData('String'),
    'marketplaceIds': generateMockData('String', true),
    'body': generateMockData('CreateConfirmServiceDetailsRequest')
  },
  response: {
    data: generateMockData('CreateConfirmServiceDetailsResponse'),
    statusCode: 201,
    headers: {}
  }
};
const mockcreateDigitalAccessKeyData = {
  request: {
    'amazonOrderId': generateMockData('String'),
    'marketplaceIds': generateMockData('String', true),
    'body': generateMockData('CreateDigitalAccessKeyRequest')
  },
  response: {
    data: generateMockData('CreateDigitalAccessKeyResponse'),
    statusCode: 201,
    headers: {}
  }
};
const mockcreateLegalDisclosureData = {
  request: {
    'amazonOrderId': generateMockData('String'),
    'marketplaceIds': generateMockData('String', true),
    'body': generateMockData('CreateLegalDisclosureRequest')
  },
  response: {
    data: generateMockData('CreateLegalDisclosureResponse'),
    statusCode: 201,
    headers: {}
  }
};
const mockcreateUnexpectedProblemData = {
  request: {
    'amazonOrderId': generateMockData('String'),
    'marketplaceIds': generateMockData('String', true),
    'body': generateMockData('CreateUnexpectedProblemRequest')
  },
  response: {
    data: generateMockData('CreateUnexpectedProblemResponse'),
    statusCode: 201,
    headers: {}
  }
};
const mockcreateWarrantyData = {
  request: {
    'amazonOrderId': generateMockData('String'),
    'marketplaceIds': generateMockData('String', true),
    'body': generateMockData('CreateWarrantyRequest')
  },
  response: {
    data: generateMockData('CreateWarrantyResponse'),
    statusCode: 201,
    headers: {}
  }
};
const mockgetAttributesData = {
  request: {
    'amazonOrderId': generateMockData('String'),
    'marketplaceIds': generateMockData('String', true)
  },
  response: {
    data: generateMockData('GetAttributesResponse'),
    statusCode: 200,
    headers: {}
  }
};
const mockgetMessagingActionsForOrderData = {
  request: {
    'amazonOrderId': generateMockData('String'),
    'marketplaceIds': generateMockData('String', true)
  },
  response: {
    data: generateMockData('GetMessagingActionsForOrderResponse'),
    statusCode: 200,
    headers: {}
  }
};
const mocksendInvoiceData = {
  request: {
    'amazonOrderId': generateMockData('String'),
    'marketplaceIds': generateMockData('String', true),
    'body': generateMockData('InvoiceRequest')
  },
  response: {
    data: generateMockData('InvoiceResponse'),
    statusCode: 201,
    headers: {}
  }
};

describe('MessagingApi', () => {
  beforeEach(() => {
    sandbox = sinon.createSandbox();
    const apiClientInstance = new SellingPartnerApiForMessaging.ApiClient(testEndpoint);
    apiClientInstance.applyXAmzAccessTokenToRequest(testAccessToken);
    sandbox.stub(apiClientInstance, 'callApi');
    instance = new SellingPartnerApiForMessaging.MessagingApi(apiClientInstance);
  });

  afterEach(() => {
    sandbox.restore();
  });

  describe('confirmCustomizationDetails', () => {
    it('should successfully call confirmCustomizationDetails', async () => {
      instance.apiClient.callApi.resolves(mockconfirmCustomizationDetailsData.response);

      const params = [
        mockconfirmCustomizationDetailsData.request['amazonOrderId'],
        mockconfirmCustomizationDetailsData.request['marketplaceIds'],
        mockconfirmCustomizationDetailsData.request['body']
      ];
      const data = await instance.confirmCustomizationDetails(...params);

      expect(data instanceof SellingPartnerApiForMessaging.CreateConfirmCustomizationDetailsResponse).to.be.true;
      expect(data).to.equal(mockconfirmCustomizationDetailsData.response.data);
    });

    it('should successfully call confirmCustomizationDetailsWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mockconfirmCustomizationDetailsData.response);

      const params = [
        mockconfirmCustomizationDetailsData.request['amazonOrderId'],
        mockconfirmCustomizationDetailsData.request['marketplaceIds'],
        mockconfirmCustomizationDetailsData.request['body']
      ];
      const response = await instance.confirmCustomizationDetailsWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mockconfirmCustomizationDetailsData.response.statusCode)
      expect(response).to.have.property('headers');
      expect(response).to.have.property('data');
      expect(response.data).to.equal(mockconfirmCustomizationDetailsData.response.data)
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
          mockconfirmCustomizationDetailsData.request['amazonOrderId'],
          mockconfirmCustomizationDetailsData.request['marketplaceIds'],
          mockconfirmCustomizationDetailsData.request['body']
        ];
        await instance.confirmCustomizationDetails(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });
  describe('createAmazonMotors', () => {
    it('should successfully call createAmazonMotors', async () => {
      instance.apiClient.callApi.resolves(mockcreateAmazonMotorsData.response);

      const params = [
        mockcreateAmazonMotorsData.request['amazonOrderId'],
        mockcreateAmazonMotorsData.request['marketplaceIds'],
        mockcreateAmazonMotorsData.request['body']
      ];
      const data = await instance.createAmazonMotors(...params);

      expect(data instanceof SellingPartnerApiForMessaging.CreateAmazonMotorsResponse).to.be.true;
      expect(data).to.equal(mockcreateAmazonMotorsData.response.data);
    });

    it('should successfully call createAmazonMotorsWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mockcreateAmazonMotorsData.response);

      const params = [
        mockcreateAmazonMotorsData.request['amazonOrderId'],
        mockcreateAmazonMotorsData.request['marketplaceIds'],
        mockcreateAmazonMotorsData.request['body']
      ];
      const response = await instance.createAmazonMotorsWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mockcreateAmazonMotorsData.response.statusCode)
      expect(response).to.have.property('headers');
      expect(response).to.have.property('data');
      expect(response.data).to.equal(mockcreateAmazonMotorsData.response.data)
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
          mockcreateAmazonMotorsData.request['amazonOrderId'],
          mockcreateAmazonMotorsData.request['marketplaceIds'],
          mockcreateAmazonMotorsData.request['body']
        ];
        await instance.createAmazonMotors(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });
  describe('createConfirmDeliveryDetails', () => {
    it('should successfully call createConfirmDeliveryDetails', async () => {
      instance.apiClient.callApi.resolves(mockcreateConfirmDeliveryDetailsData.response);

      const params = [
        mockcreateConfirmDeliveryDetailsData.request['amazonOrderId'],
        mockcreateConfirmDeliveryDetailsData.request['marketplaceIds'],
        mockcreateConfirmDeliveryDetailsData.request['body']
      ];
      const data = await instance.createConfirmDeliveryDetails(...params);

      expect(data instanceof SellingPartnerApiForMessaging.CreateConfirmDeliveryDetailsResponse).to.be.true;
      expect(data).to.equal(mockcreateConfirmDeliveryDetailsData.response.data);
    });

    it('should successfully call createConfirmDeliveryDetailsWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mockcreateConfirmDeliveryDetailsData.response);

      const params = [
        mockcreateConfirmDeliveryDetailsData.request['amazonOrderId'],
        mockcreateConfirmDeliveryDetailsData.request['marketplaceIds'],
        mockcreateConfirmDeliveryDetailsData.request['body']
      ];
      const response = await instance.createConfirmDeliveryDetailsWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mockcreateConfirmDeliveryDetailsData.response.statusCode)
      expect(response).to.have.property('headers');
      expect(response).to.have.property('data');
      expect(response.data).to.equal(mockcreateConfirmDeliveryDetailsData.response.data)
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
          mockcreateConfirmDeliveryDetailsData.request['amazonOrderId'],
          mockcreateConfirmDeliveryDetailsData.request['marketplaceIds'],
          mockcreateConfirmDeliveryDetailsData.request['body']
        ];
        await instance.createConfirmDeliveryDetails(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });
  describe('createConfirmOrderDetails', () => {
    it('should successfully call createConfirmOrderDetails', async () => {
      instance.apiClient.callApi.resolves(mockcreateConfirmOrderDetailsData.response);

      const params = [
        mockcreateConfirmOrderDetailsData.request['amazonOrderId'],
        mockcreateConfirmOrderDetailsData.request['marketplaceIds'],
        mockcreateConfirmOrderDetailsData.request['body']
      ];
      const data = await instance.createConfirmOrderDetails(...params);

      expect(data instanceof SellingPartnerApiForMessaging.CreateConfirmOrderDetailsResponse).to.be.true;
      expect(data).to.equal(mockcreateConfirmOrderDetailsData.response.data);
    });

    it('should successfully call createConfirmOrderDetailsWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mockcreateConfirmOrderDetailsData.response);

      const params = [
        mockcreateConfirmOrderDetailsData.request['amazonOrderId'],
        mockcreateConfirmOrderDetailsData.request['marketplaceIds'],
        mockcreateConfirmOrderDetailsData.request['body']
      ];
      const response = await instance.createConfirmOrderDetailsWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mockcreateConfirmOrderDetailsData.response.statusCode)
      expect(response).to.have.property('headers');
      expect(response).to.have.property('data');
      expect(response.data).to.equal(mockcreateConfirmOrderDetailsData.response.data)
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
          mockcreateConfirmOrderDetailsData.request['amazonOrderId'],
          mockcreateConfirmOrderDetailsData.request['marketplaceIds'],
          mockcreateConfirmOrderDetailsData.request['body']
        ];
        await instance.createConfirmOrderDetails(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });
  describe('createConfirmServiceDetails', () => {
    it('should successfully call createConfirmServiceDetails', async () => {
      instance.apiClient.callApi.resolves(mockcreateConfirmServiceDetailsData.response);

      const params = [
        mockcreateConfirmServiceDetailsData.request['amazonOrderId'],
        mockcreateConfirmServiceDetailsData.request['marketplaceIds'],
        mockcreateConfirmServiceDetailsData.request['body']
      ];
      const data = await instance.createConfirmServiceDetails(...params);

      expect(data instanceof SellingPartnerApiForMessaging.CreateConfirmServiceDetailsResponse).to.be.true;
      expect(data).to.equal(mockcreateConfirmServiceDetailsData.response.data);
    });

    it('should successfully call createConfirmServiceDetailsWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mockcreateConfirmServiceDetailsData.response);

      const params = [
        mockcreateConfirmServiceDetailsData.request['amazonOrderId'],
        mockcreateConfirmServiceDetailsData.request['marketplaceIds'],
        mockcreateConfirmServiceDetailsData.request['body']
      ];
      const response = await instance.createConfirmServiceDetailsWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mockcreateConfirmServiceDetailsData.response.statusCode)
      expect(response).to.have.property('headers');
      expect(response).to.have.property('data');
      expect(response.data).to.equal(mockcreateConfirmServiceDetailsData.response.data)
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
          mockcreateConfirmServiceDetailsData.request['amazonOrderId'],
          mockcreateConfirmServiceDetailsData.request['marketplaceIds'],
          mockcreateConfirmServiceDetailsData.request['body']
        ];
        await instance.createConfirmServiceDetails(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });
  describe('createDigitalAccessKey', () => {
    it('should successfully call createDigitalAccessKey', async () => {
      instance.apiClient.callApi.resolves(mockcreateDigitalAccessKeyData.response);

      const params = [
        mockcreateDigitalAccessKeyData.request['amazonOrderId'],
        mockcreateDigitalAccessKeyData.request['marketplaceIds'],
        mockcreateDigitalAccessKeyData.request['body']
      ];
      const data = await instance.createDigitalAccessKey(...params);

      expect(data instanceof SellingPartnerApiForMessaging.CreateDigitalAccessKeyResponse).to.be.true;
      expect(data).to.equal(mockcreateDigitalAccessKeyData.response.data);
    });

    it('should successfully call createDigitalAccessKeyWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mockcreateDigitalAccessKeyData.response);

      const params = [
        mockcreateDigitalAccessKeyData.request['amazonOrderId'],
        mockcreateDigitalAccessKeyData.request['marketplaceIds'],
        mockcreateDigitalAccessKeyData.request['body']
      ];
      const response = await instance.createDigitalAccessKeyWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mockcreateDigitalAccessKeyData.response.statusCode)
      expect(response).to.have.property('headers');
      expect(response).to.have.property('data');
      expect(response.data).to.equal(mockcreateDigitalAccessKeyData.response.data)
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
          mockcreateDigitalAccessKeyData.request['amazonOrderId'],
          mockcreateDigitalAccessKeyData.request['marketplaceIds'],
          mockcreateDigitalAccessKeyData.request['body']
        ];
        await instance.createDigitalAccessKey(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });
  describe('createLegalDisclosure', () => {
    it('should successfully call createLegalDisclosure', async () => {
      instance.apiClient.callApi.resolves(mockcreateLegalDisclosureData.response);

      const params = [
        mockcreateLegalDisclosureData.request['amazonOrderId'],
        mockcreateLegalDisclosureData.request['marketplaceIds'],
        mockcreateLegalDisclosureData.request['body']
      ];
      const data = await instance.createLegalDisclosure(...params);

      expect(data instanceof SellingPartnerApiForMessaging.CreateLegalDisclosureResponse).to.be.true;
      expect(data).to.equal(mockcreateLegalDisclosureData.response.data);
    });

    it('should successfully call createLegalDisclosureWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mockcreateLegalDisclosureData.response);

      const params = [
        mockcreateLegalDisclosureData.request['amazonOrderId'],
        mockcreateLegalDisclosureData.request['marketplaceIds'],
        mockcreateLegalDisclosureData.request['body']
      ];
      const response = await instance.createLegalDisclosureWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mockcreateLegalDisclosureData.response.statusCode)
      expect(response).to.have.property('headers');
      expect(response).to.have.property('data');
      expect(response.data).to.equal(mockcreateLegalDisclosureData.response.data)
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
          mockcreateLegalDisclosureData.request['amazonOrderId'],
          mockcreateLegalDisclosureData.request['marketplaceIds'],
          mockcreateLegalDisclosureData.request['body']
        ];
        await instance.createLegalDisclosure(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });
  describe('createUnexpectedProblem', () => {
    it('should successfully call createUnexpectedProblem', async () => {
      instance.apiClient.callApi.resolves(mockcreateUnexpectedProblemData.response);

      const params = [
        mockcreateUnexpectedProblemData.request['amazonOrderId'],
        mockcreateUnexpectedProblemData.request['marketplaceIds'],
        mockcreateUnexpectedProblemData.request['body']
      ];
      const data = await instance.createUnexpectedProblem(...params);

      expect(data instanceof SellingPartnerApiForMessaging.CreateUnexpectedProblemResponse).to.be.true;
      expect(data).to.equal(mockcreateUnexpectedProblemData.response.data);
    });

    it('should successfully call createUnexpectedProblemWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mockcreateUnexpectedProblemData.response);

      const params = [
        mockcreateUnexpectedProblemData.request['amazonOrderId'],
        mockcreateUnexpectedProblemData.request['marketplaceIds'],
        mockcreateUnexpectedProblemData.request['body']
      ];
      const response = await instance.createUnexpectedProblemWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mockcreateUnexpectedProblemData.response.statusCode)
      expect(response).to.have.property('headers');
      expect(response).to.have.property('data');
      expect(response.data).to.equal(mockcreateUnexpectedProblemData.response.data)
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
          mockcreateUnexpectedProblemData.request['amazonOrderId'],
          mockcreateUnexpectedProblemData.request['marketplaceIds'],
          mockcreateUnexpectedProblemData.request['body']
        ];
        await instance.createUnexpectedProblem(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });
  describe('createWarranty', () => {
    it('should successfully call createWarranty', async () => {
      instance.apiClient.callApi.resolves(mockcreateWarrantyData.response);

      const params = [
        mockcreateWarrantyData.request['amazonOrderId'],
        mockcreateWarrantyData.request['marketplaceIds'],
        mockcreateWarrantyData.request['body']
      ];
      const data = await instance.createWarranty(...params);

      expect(data instanceof SellingPartnerApiForMessaging.CreateWarrantyResponse).to.be.true;
      expect(data).to.equal(mockcreateWarrantyData.response.data);
    });

    it('should successfully call createWarrantyWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mockcreateWarrantyData.response);

      const params = [
        mockcreateWarrantyData.request['amazonOrderId'],
        mockcreateWarrantyData.request['marketplaceIds'],
        mockcreateWarrantyData.request['body']
      ];
      const response = await instance.createWarrantyWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mockcreateWarrantyData.response.statusCode)
      expect(response).to.have.property('headers');
      expect(response).to.have.property('data');
      expect(response.data).to.equal(mockcreateWarrantyData.response.data)
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
          mockcreateWarrantyData.request['amazonOrderId'],
          mockcreateWarrantyData.request['marketplaceIds'],
          mockcreateWarrantyData.request['body']
        ];
        await instance.createWarranty(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });
  describe('getAttributes', () => {
    it('should successfully call getAttributes', async () => {
      instance.apiClient.callApi.resolves(mockgetAttributesData.response);

      const params = [
        mockgetAttributesData.request['amazonOrderId'],
        mockgetAttributesData.request['marketplaceIds']
      ];
      const data = await instance.getAttributes(...params);

      expect(data instanceof SellingPartnerApiForMessaging.GetAttributesResponse).to.be.true;
      expect(data).to.equal(mockgetAttributesData.response.data);
    });

    it('should successfully call getAttributesWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mockgetAttributesData.response);

      const params = [
        mockgetAttributesData.request['amazonOrderId'],
        mockgetAttributesData.request['marketplaceIds']
      ];
      const response = await instance.getAttributesWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mockgetAttributesData.response.statusCode)
      expect(response).to.have.property('headers');
      expect(response).to.have.property('data');
      expect(response.data).to.equal(mockgetAttributesData.response.data)
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
          mockgetAttributesData.request['amazonOrderId'],
          mockgetAttributesData.request['marketplaceIds']
        ];
        await instance.getAttributes(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });
  describe('getMessagingActionsForOrder', () => {
    it('should successfully call getMessagingActionsForOrder', async () => {
      instance.apiClient.callApi.resolves(mockgetMessagingActionsForOrderData.response);

      const params = [
        mockgetMessagingActionsForOrderData.request['amazonOrderId'],
        mockgetMessagingActionsForOrderData.request['marketplaceIds']
      ];
      const data = await instance.getMessagingActionsForOrder(...params);

      expect(data instanceof SellingPartnerApiForMessaging.GetMessagingActionsForOrderResponse).to.be.true;
      expect(data).to.equal(mockgetMessagingActionsForOrderData.response.data);
    });

    it('should successfully call getMessagingActionsForOrderWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mockgetMessagingActionsForOrderData.response);

      const params = [
        mockgetMessagingActionsForOrderData.request['amazonOrderId'],
        mockgetMessagingActionsForOrderData.request['marketplaceIds']
      ];
      const response = await instance.getMessagingActionsForOrderWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mockgetMessagingActionsForOrderData.response.statusCode)
      expect(response).to.have.property('headers');
      expect(response).to.have.property('data');
      expect(response.data).to.equal(mockgetMessagingActionsForOrderData.response.data)
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
          mockgetMessagingActionsForOrderData.request['amazonOrderId'],
          mockgetMessagingActionsForOrderData.request['marketplaceIds']
        ];
        await instance.getMessagingActionsForOrder(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });
  describe('sendInvoice', () => {
    it('should successfully call sendInvoice', async () => {
      instance.apiClient.callApi.resolves(mocksendInvoiceData.response);

      const params = [
        mocksendInvoiceData.request['amazonOrderId'],
        mocksendInvoiceData.request['marketplaceIds'],
        mocksendInvoiceData.request['body']
      ];
      const data = await instance.sendInvoice(...params);

      expect(data instanceof SellingPartnerApiForMessaging.InvoiceResponse).to.be.true;
      expect(data).to.equal(mocksendInvoiceData.response.data);
    });

    it('should successfully call sendInvoiceWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mocksendInvoiceData.response);

      const params = [
        mocksendInvoiceData.request['amazonOrderId'],
        mocksendInvoiceData.request['marketplaceIds'],
        mocksendInvoiceData.request['body']
      ];
      const response = await instance.sendInvoiceWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mocksendInvoiceData.response.statusCode)
      expect(response).to.have.property('headers');
      expect(response).to.have.property('data');
      expect(response.data).to.equal(mocksendInvoiceData.response.data)
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
          mocksendInvoiceData.request['amazonOrderId'],
          mocksendInvoiceData.request['marketplaceIds'],
          mocksendInvoiceData.request['body']
        ];
        await instance.sendInvoice(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });

  describe('constructor', () => {
    it('should use default ApiClient when none provided', () => {
      const defaultInstance = new SellingPartnerApiForMessaging.MessagingApi();
      expect(defaultInstance.apiClient).to.equal(SellingPartnerApiForMessaging.ApiClient.instance);
    });

    it('should use provided ApiClient', () => {
      const customClient = new SellingPartnerApiForMessaging.ApiClient();
      const customInstance = new SellingPartnerApiForMessaging.MessagingApi(customClient);
      expect(customInstance.apiClient).to.equal(customClient);
    });
  });
});
