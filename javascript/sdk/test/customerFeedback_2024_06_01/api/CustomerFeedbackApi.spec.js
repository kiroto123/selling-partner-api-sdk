/**
 * The Selling Partner API for CustomerFeedback
 * The Selling Partner API for Customer Feedback (Customer Feedback API) provides information about customer reviews and returns at both the item and browse node level.
 *
 * The version of the OpenAPI document: 2024-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import expect from 'expect.js';
import sinon from 'sinon';
import { join } from 'path';

const modulePath = join(process.cwd(), 'src', 'customerFeedback_2024_06_01', 'index.js');
const TheSellingPartnerApiForCustomerFeedback = await import(modulePath);

let instance;
let sandbox;
const testEndpoint = 'https://localhost:3000';
const testAccessToken = "testAccessToken";

// Helper function to generate random test data
function generateMockData(dataType, isArray = false) {
  if (!dataType) return {};

  // Handle array types
  if (isArray) {
    return [generateMockData(dataType), generateMockData(dataType)];
  }

  switch(dataType) {
    case 'String':
      return 'mock-' + Math.random().toString(36).substring(2, 10);
    case 'Number':
      return Math.floor(Math.random() * 1000);
    case 'Boolean':
      return Math.random() > 0.5;
    case 'Date':
      return new Date().toISOString();
    default:
      try {
        const ModelClass = TheSellingPartnerApiForCustomerFeedback[dataType];
        if (ModelClass) {
          const instance = Object.create(ModelClass.prototype);
          return instance;
        }
      } catch (e) {
        console.error("Error creating instance of", dataType);
        return {};
      }
      return {};
  }
}

// Generate mock requests and responses for each operation
const mockgetBrowseNodeReturnTopicsData = {
  request: {
    'browseNodeId': generateMockData('String'),
    'marketplaceId': generateMockData('String')
  },
  response: {
    data: generateMockData('BrowseNodeReturnTopicsResponse'),
    statusCode: 200,
    headers: {}
  }
};
const mockgetBrowseNodeReturnTrendsData = {
  request: {
    'browseNodeId': generateMockData('String'),
    'marketplaceId': generateMockData('String')
  },
  response: {
    data: generateMockData('BrowseNodeReturnTrendsResponse'),
    statusCode: 200,
    headers: {}
  }
};
const mockgetBrowseNodeReviewTopicsData = {
  request: {
    'browseNodeId': generateMockData('String'),
    'marketplaceId': generateMockData('String'),
    'sortBy': generateMockData('String')
  },
  response: {
    data: generateMockData('BrowseNodeReviewTopicsResponse'),
    statusCode: 200,
    headers: {}
  }
};
const mockgetBrowseNodeReviewTrendsData = {
  request: {
    'browseNodeId': generateMockData('String'),
    'marketplaceId': generateMockData('String')
  },
  response: {
    data: generateMockData('BrowseNodeReviewTrendsResponse'),
    statusCode: 200,
    headers: {}
  }
};
const mockgetItemBrowseNodeData = {
  request: {
    'asin': generateMockData('String'),
    'marketplaceId': generateMockData('String')
  },
  response: {
    data: generateMockData('BrowseNodeResponse'),
    statusCode: 200,
    headers: {}
  }
};
const mockgetItemReviewTopicsData = {
  request: {
    'asin': generateMockData('String'),
    'marketplaceId': generateMockData('String'),
    'sortBy': generateMockData('String')
  },
  response: {
    data: generateMockData('ItemReviewTopicsResponse'),
    statusCode: 200,
    headers: {}
  }
};
const mockgetItemReviewTrendsData = {
  request: {
    'asin': generateMockData('String'),
    'marketplaceId': generateMockData('String')
  },
  response: {
    data: generateMockData('ItemReviewTrendsResponse'),
    statusCode: 200,
    headers: {}
  }
};

describe('CustomerFeedbackApi', () => {
  beforeEach(() => {
    sandbox = sinon.createSandbox();
    const apiClientInstance = new TheSellingPartnerApiForCustomerFeedback.ApiClient(testEndpoint);
    apiClientInstance.applyXAmzAccessTokenToRequest(testAccessToken);
    sandbox.stub(apiClientInstance, 'callApi');
    instance = new TheSellingPartnerApiForCustomerFeedback.CustomerFeedbackApi(apiClientInstance);
  });

  afterEach(() => {
    sandbox.restore();
  });

  describe('getBrowseNodeReturnTopics', () => {
    it('should successfully call getBrowseNodeReturnTopics', async () => {
      instance.apiClient.callApi.resolves(mockgetBrowseNodeReturnTopicsData.response);

      const params = [
        mockgetBrowseNodeReturnTopicsData.request['browseNodeId'],
        mockgetBrowseNodeReturnTopicsData.request['marketplaceId']
      ];
      const data = await instance.getBrowseNodeReturnTopics(...params);

      expect(data instanceof TheSellingPartnerApiForCustomerFeedback.BrowseNodeReturnTopicsResponse).to.be.true;
      expect(data).to.equal(mockgetBrowseNodeReturnTopicsData.response.data);
    });

    it('should successfully call getBrowseNodeReturnTopicsWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mockgetBrowseNodeReturnTopicsData.response);

      const params = [
        mockgetBrowseNodeReturnTopicsData.request['browseNodeId'],
        mockgetBrowseNodeReturnTopicsData.request['marketplaceId']
      ];
      const response = await instance.getBrowseNodeReturnTopicsWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mockgetBrowseNodeReturnTopicsData.response.statusCode)
      expect(response).to.have.property('headers');
      expect(response).to.have.property('data');
      expect(response.data).to.equal(mockgetBrowseNodeReturnTopicsData.response.data)
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
          mockgetBrowseNodeReturnTopicsData.request['browseNodeId'],
          mockgetBrowseNodeReturnTopicsData.request['marketplaceId']
        ];
        await instance.getBrowseNodeReturnTopics(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });
  describe('getBrowseNodeReturnTrends', () => {
    it('should successfully call getBrowseNodeReturnTrends', async () => {
      instance.apiClient.callApi.resolves(mockgetBrowseNodeReturnTrendsData.response);

      const params = [
        mockgetBrowseNodeReturnTrendsData.request['browseNodeId'],
        mockgetBrowseNodeReturnTrendsData.request['marketplaceId']
      ];
      const data = await instance.getBrowseNodeReturnTrends(...params);

      expect(data instanceof TheSellingPartnerApiForCustomerFeedback.BrowseNodeReturnTrendsResponse).to.be.true;
      expect(data).to.equal(mockgetBrowseNodeReturnTrendsData.response.data);
    });

    it('should successfully call getBrowseNodeReturnTrendsWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mockgetBrowseNodeReturnTrendsData.response);

      const params = [
        mockgetBrowseNodeReturnTrendsData.request['browseNodeId'],
        mockgetBrowseNodeReturnTrendsData.request['marketplaceId']
      ];
      const response = await instance.getBrowseNodeReturnTrendsWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mockgetBrowseNodeReturnTrendsData.response.statusCode)
      expect(response).to.have.property('headers');
      expect(response).to.have.property('data');
      expect(response.data).to.equal(mockgetBrowseNodeReturnTrendsData.response.data)
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
          mockgetBrowseNodeReturnTrendsData.request['browseNodeId'],
          mockgetBrowseNodeReturnTrendsData.request['marketplaceId']
        ];
        await instance.getBrowseNodeReturnTrends(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });
  describe('getBrowseNodeReviewTopics', () => {
    it('should successfully call getBrowseNodeReviewTopics', async () => {
      instance.apiClient.callApi.resolves(mockgetBrowseNodeReviewTopicsData.response);

      const params = [
        mockgetBrowseNodeReviewTopicsData.request['browseNodeId'],
        mockgetBrowseNodeReviewTopicsData.request['marketplaceId'],
        mockgetBrowseNodeReviewTopicsData.request['sortBy']
      ];
      const data = await instance.getBrowseNodeReviewTopics(...params);

      expect(data instanceof TheSellingPartnerApiForCustomerFeedback.BrowseNodeReviewTopicsResponse).to.be.true;
      expect(data).to.equal(mockgetBrowseNodeReviewTopicsData.response.data);
    });

    it('should successfully call getBrowseNodeReviewTopicsWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mockgetBrowseNodeReviewTopicsData.response);

      const params = [
        mockgetBrowseNodeReviewTopicsData.request['browseNodeId'],
        mockgetBrowseNodeReviewTopicsData.request['marketplaceId'],
        mockgetBrowseNodeReviewTopicsData.request['sortBy']
      ];
      const response = await instance.getBrowseNodeReviewTopicsWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mockgetBrowseNodeReviewTopicsData.response.statusCode)
      expect(response).to.have.property('headers');
      expect(response).to.have.property('data');
      expect(response.data).to.equal(mockgetBrowseNodeReviewTopicsData.response.data)
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
          mockgetBrowseNodeReviewTopicsData.request['browseNodeId'],
          mockgetBrowseNodeReviewTopicsData.request['marketplaceId'],
          mockgetBrowseNodeReviewTopicsData.request['sortBy']
        ];
        await instance.getBrowseNodeReviewTopics(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });
  describe('getBrowseNodeReviewTrends', () => {
    it('should successfully call getBrowseNodeReviewTrends', async () => {
      instance.apiClient.callApi.resolves(mockgetBrowseNodeReviewTrendsData.response);

      const params = [
        mockgetBrowseNodeReviewTrendsData.request['browseNodeId'],
        mockgetBrowseNodeReviewTrendsData.request['marketplaceId']
      ];
      const data = await instance.getBrowseNodeReviewTrends(...params);

      expect(data instanceof TheSellingPartnerApiForCustomerFeedback.BrowseNodeReviewTrendsResponse).to.be.true;
      expect(data).to.equal(mockgetBrowseNodeReviewTrendsData.response.data);
    });

    it('should successfully call getBrowseNodeReviewTrendsWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mockgetBrowseNodeReviewTrendsData.response);

      const params = [
        mockgetBrowseNodeReviewTrendsData.request['browseNodeId'],
        mockgetBrowseNodeReviewTrendsData.request['marketplaceId']
      ];
      const response = await instance.getBrowseNodeReviewTrendsWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mockgetBrowseNodeReviewTrendsData.response.statusCode)
      expect(response).to.have.property('headers');
      expect(response).to.have.property('data');
      expect(response.data).to.equal(mockgetBrowseNodeReviewTrendsData.response.data)
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
          mockgetBrowseNodeReviewTrendsData.request['browseNodeId'],
          mockgetBrowseNodeReviewTrendsData.request['marketplaceId']
        ];
        await instance.getBrowseNodeReviewTrends(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });
  describe('getItemBrowseNode', () => {
    it('should successfully call getItemBrowseNode', async () => {
      instance.apiClient.callApi.resolves(mockgetItemBrowseNodeData.response);

      const params = [
        mockgetItemBrowseNodeData.request['asin'],
        mockgetItemBrowseNodeData.request['marketplaceId']
      ];
      const data = await instance.getItemBrowseNode(...params);

      expect(data instanceof TheSellingPartnerApiForCustomerFeedback.BrowseNodeResponse).to.be.true;
      expect(data).to.equal(mockgetItemBrowseNodeData.response.data);
    });

    it('should successfully call getItemBrowseNodeWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mockgetItemBrowseNodeData.response);

      const params = [
        mockgetItemBrowseNodeData.request['asin'],
        mockgetItemBrowseNodeData.request['marketplaceId']
      ];
      const response = await instance.getItemBrowseNodeWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mockgetItemBrowseNodeData.response.statusCode)
      expect(response).to.have.property('headers');
      expect(response).to.have.property('data');
      expect(response.data).to.equal(mockgetItemBrowseNodeData.response.data)
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
          mockgetItemBrowseNodeData.request['asin'],
          mockgetItemBrowseNodeData.request['marketplaceId']
        ];
        await instance.getItemBrowseNode(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });
  describe('getItemReviewTopics', () => {
    it('should successfully call getItemReviewTopics', async () => {
      instance.apiClient.callApi.resolves(mockgetItemReviewTopicsData.response);

      const params = [
        mockgetItemReviewTopicsData.request['asin'],
        mockgetItemReviewTopicsData.request['marketplaceId'],
        mockgetItemReviewTopicsData.request['sortBy']
      ];
      const data = await instance.getItemReviewTopics(...params);

      expect(data instanceof TheSellingPartnerApiForCustomerFeedback.ItemReviewTopicsResponse).to.be.true;
      expect(data).to.equal(mockgetItemReviewTopicsData.response.data);
    });

    it('should successfully call getItemReviewTopicsWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mockgetItemReviewTopicsData.response);

      const params = [
        mockgetItemReviewTopicsData.request['asin'],
        mockgetItemReviewTopicsData.request['marketplaceId'],
        mockgetItemReviewTopicsData.request['sortBy']
      ];
      const response = await instance.getItemReviewTopicsWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mockgetItemReviewTopicsData.response.statusCode)
      expect(response).to.have.property('headers');
      expect(response).to.have.property('data');
      expect(response.data).to.equal(mockgetItemReviewTopicsData.response.data)
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
          mockgetItemReviewTopicsData.request['asin'],
          mockgetItemReviewTopicsData.request['marketplaceId'],
          mockgetItemReviewTopicsData.request['sortBy']
        ];
        await instance.getItemReviewTopics(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });
  describe('getItemReviewTrends', () => {
    it('should successfully call getItemReviewTrends', async () => {
      instance.apiClient.callApi.resolves(mockgetItemReviewTrendsData.response);

      const params = [
        mockgetItemReviewTrendsData.request['asin'],
        mockgetItemReviewTrendsData.request['marketplaceId']
      ];
      const data = await instance.getItemReviewTrends(...params);

      expect(data instanceof TheSellingPartnerApiForCustomerFeedback.ItemReviewTrendsResponse).to.be.true;
      expect(data).to.equal(mockgetItemReviewTrendsData.response.data);
    });

    it('should successfully call getItemReviewTrendsWithHttpInfo', async () => {
      instance.apiClient.callApi.resolves(mockgetItemReviewTrendsData.response);

      const params = [
        mockgetItemReviewTrendsData.request['asin'],
        mockgetItemReviewTrendsData.request['marketplaceId']
      ];
      const response = await instance.getItemReviewTrendsWithHttpInfo(...params);

      expect(response).to.have.property('statusCode');
      expect(response.statusCode).to.equal(mockgetItemReviewTrendsData.response.statusCode)
      expect(response).to.have.property('headers');
      expect(response).to.have.property('data');
      expect(response.data).to.equal(mockgetItemReviewTrendsData.response.data)
    });

    it('should handle API errors', async () => {
      const errorResponse = {
        errors: new Error('Expected error to be thrown'),
        statusCode: 400,
        headers: {}
      };
      instance.apiClient.callApi.rejects(errorResponse);

      try {
        const params = [
          mockgetItemReviewTrendsData.request['asin'],
          mockgetItemReviewTrendsData.request['marketplaceId']
        ];
        await instance.getItemReviewTrends(...params);
        throw new Error('Expected error to be thrown');
      } catch (error) {
        expect(error).to.exist;
        expect(error.statusCode).to.equal(400);
      }
    });
  });

  describe('constructor', () => {
    it('should use default ApiClient when none provided', () => {
      const defaultInstance = new TheSellingPartnerApiForCustomerFeedback.CustomerFeedbackApi();
      expect(defaultInstance.apiClient).to.equal(TheSellingPartnerApiForCustomerFeedback.ApiClient.instance);
    });

    it('should use provided ApiClient', () => {
      const customClient = new TheSellingPartnerApiForCustomerFeedback.ApiClient();
      const customInstance = new TheSellingPartnerApiForCustomerFeedback.CustomerFeedbackApi(customClient);
      expect(customInstance.apiClient).to.equal(customClient);
    });
  });
});
