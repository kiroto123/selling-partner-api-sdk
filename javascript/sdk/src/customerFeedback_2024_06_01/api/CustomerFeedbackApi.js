/**
 * The Selling Partner API for CustomerFeedback
 * The Selling Partner API for Customer Feedback (Customer Feedback API) provides information about customer reviews and returns at both the item and browse node level.
 *
 * The version of the OpenAPI document: 2024-06-01
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import { ApiClient } from '../ApiClient.js'
import { BrowseNodeResponse } from '../model/BrowseNodeResponse.js'
import { BrowseNodeReturnTopicsResponse } from '../model/BrowseNodeReturnTopicsResponse.js'
import { BrowseNodeReturnTrendsResponse } from '../model/BrowseNodeReturnTrendsResponse.js'
import { BrowseNodeReviewTopicsResponse } from '../model/BrowseNodeReviewTopicsResponse.js'
import { BrowseNodeReviewTrendsResponse } from '../model/BrowseNodeReviewTrendsResponse.js'
import { ErrorList } from '../model/ErrorList.js'
import { ItemReviewTopicsResponse } from '../model/ItemReviewTopicsResponse.js'
import { ItemReviewTrendsResponse } from '../model/ItemReviewTrendsResponse.js'
import { SuperagentRateLimiter } from '../../../helper/SuperagentRateLimiter.mjs'
import { DefaultRateLimitFetcher } from '../../../helper/DefaultRateLimitFetcher.mjs'

/**
* CustomerFeedback service.
* @module customerFeedback_2024_06_01/api/CustomerFeedbackApi
* @version 2024-06-01
*/
export class CustomerFeedbackApi {
  // Private member stores the default rate limiters
  #defaultRateLimiterMap

  /**
    * Constructs a new CustomerFeedbackApi.
    * @alias module:customerFeedback_2024_06_01/api/CustomerFeedbackApi
    * @class
    * @param {ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link ApiClient#instance} if unspecified.
    */
  constructor (apiClient) {
    this.apiClient = apiClient || ApiClient.instance
    this.initializeDefaultRateLimiterMap()
  }

  /**
     * Initialize rate limiters for API operations
     */
  initializeDefaultRateLimiterMap () {
    this.#defaultRateLimiterMap = new Map()
    const defaultRateLimitFetcher = new DefaultRateLimitFetcher()
    const operations = [
      'CustomerFeedbackApi-getBrowseNodeReturnTopics',
      'CustomerFeedbackApi-getBrowseNodeReturnTrends',
      'CustomerFeedbackApi-getBrowseNodeReviewTopics',
      'CustomerFeedbackApi-getBrowseNodeReviewTrends',
      'CustomerFeedbackApi-getItemBrowseNode',
      'CustomerFeedbackApi-getItemReviewTopics',
      'CustomerFeedbackApi-getItemReviewTrends'
    ]

    for (const operation of operations) {
      const config = defaultRateLimitFetcher.getLimit(operation)
      this.#defaultRateLimiterMap.set(operation, new SuperagentRateLimiter(config))
    }
  }

  /**
     * Get rate limiter for a specific operation
     * @param {String} operation name
     */
  getRateLimiter (operation) {
    return this.#defaultRateLimiterMap.get(operation)
  }

  /**
     * Retrieve the topics that customers mention when they return items in a browse node.
     * @param {String} browseNodeId A browse node ID is a unique identifier for a browse node. A browse node is a named location in a browse tree that is used for navigation, product classification, and website content.
     * @param {String} marketplaceId The MarketplaceId is the globally unique identifier of a marketplace, you can refer to the marketplaceId here : https://developer-docs.amazon.com/sp-api/docs/marketplace-ids.
     * @return {Promise<BrowseNodeReturnTopicsResponse>}
     */
  getBrowseNodeReturnTopicsWithHttpInfo (browseNodeId, marketplaceId) {
    const postBody = null

    // verify the required parameter 'browseNodeId' is set
    if (browseNodeId === undefined || browseNodeId === null) {
      throw new Error("Missing the required parameter 'browseNodeId' when calling getBrowseNodeReturnTopics")
    }

    // verify the required parameter 'marketplaceId' is set
    if (marketplaceId === undefined || marketplaceId === null) {
      throw new Error("Missing the required parameter 'marketplaceId' when calling getBrowseNodeReturnTopics")
    }

    const pathParams = {
      browseNodeId
    }
    const queryParams = {
      marketplaceId
    }
    const headerParams = {
    }
    const formParams = {
    }

    const contentTypes = []
    const accepts = ['application/json']
    const returnType = BrowseNodeReturnTopicsResponse

    return this.apiClient.callApi('CustomerFeedbackApi-getBrowseNodeReturnTopics',
      '/customerFeedback/2024-06-01/browseNodes/{browseNodeId}/returns/topics', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      contentTypes, accepts, returnType, this.getRateLimiter('CustomerFeedbackApi-getBrowseNodeReturnTopics')
    )
  }

  /**
     * Retrieve the topics that customers mention when they return items in a browse node.
     * @param {String} browseNodeId A browse node ID is a unique identifier for a browse node. A browse node is a named location in a browse tree that is used for navigation, product classification, and website content.
     * @param {String} marketplaceId The MarketplaceId is the globally unique identifier of a marketplace, you can refer to the marketplaceId here : https://developer-docs.amazon.com/sp-api/docs/marketplace-ids.
     * @return {Promise<BrowseNodeReturnTopicsResponse>}
     */
  getBrowseNodeReturnTopics (browseNodeId, marketplaceId) {
    return this.getBrowseNodeReturnTopicsWithHttpInfo(browseNodeId, marketplaceId)
      .then(function (response_and_data) {
        return response_and_data.data
      })
  }

  /**
     * Retrieve the trends of topics that customers mention when they return items in a browse node.
     * @param {String} browseNodeId A browse node ID is a unique identifier of a browse node. A browse node is a named location in a browse tree that is used for navigation, product classification, and website content.
     * @param {String} marketplaceId The MarketplaceId is the globally unique identifier of a marketplace, you can refer to the marketplaceId here : https://developer-docs.amazon.com/sp-api/docs/marketplace-ids.
     * @return {Promise<BrowseNodeReturnTrendsResponse>}
     */
  getBrowseNodeReturnTrendsWithHttpInfo (browseNodeId, marketplaceId) {
    const postBody = null

    // verify the required parameter 'browseNodeId' is set
    if (browseNodeId === undefined || browseNodeId === null) {
      throw new Error("Missing the required parameter 'browseNodeId' when calling getBrowseNodeReturnTrends")
    }

    // verify the required parameter 'marketplaceId' is set
    if (marketplaceId === undefined || marketplaceId === null) {
      throw new Error("Missing the required parameter 'marketplaceId' when calling getBrowseNodeReturnTrends")
    }

    const pathParams = {
      browseNodeId
    }
    const queryParams = {
      marketplaceId
    }
    const headerParams = {
    }
    const formParams = {
    }

    const contentTypes = []
    const accepts = ['application/json']
    const returnType = BrowseNodeReturnTrendsResponse

    return this.apiClient.callApi('CustomerFeedbackApi-getBrowseNodeReturnTrends',
      '/customerFeedback/2024-06-01/browseNodes/{browseNodeId}/returns/trends', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      contentTypes, accepts, returnType, this.getRateLimiter('CustomerFeedbackApi-getBrowseNodeReturnTrends')
    )
  }

  /**
     * Retrieve the trends of topics that customers mention when they return items in a browse node.
     * @param {String} browseNodeId A browse node ID is a unique identifier of a browse node. A browse node is a named location in a browse tree that is used for navigation, product classification, and website content.
     * @param {String} marketplaceId The MarketplaceId is the globally unique identifier of a marketplace, you can refer to the marketplaceId here : https://developer-docs.amazon.com/sp-api/docs/marketplace-ids.
     * @return {Promise<BrowseNodeReturnTrendsResponse>}
     */
  getBrowseNodeReturnTrends (browseNodeId, marketplaceId) {
    return this.getBrowseNodeReturnTrendsWithHttpInfo(browseNodeId, marketplaceId)
      .then(function (response_and_data) {
        return response_and_data.data
      })
  }

  /**
     * Retrieve a browse node&#39;s ten most positive and ten most negative review topics.
     * @param {String} browseNodeId The ID of a browse node. A browse node is a named location in a browse tree that is used for navigation, product classification, and website content.
     * @param {String} marketplaceId The MarketplaceId is the globally unique identifier of a marketplace, you can refer to the marketplaceId here : https://developer-docs.amazon.com/sp-api/docs/marketplace-ids.
     * @param {String} sortBy The metric by which to sort the data in the response.
     * @return {Promise<BrowseNodeReviewTopicsResponse>}
     */
  getBrowseNodeReviewTopicsWithHttpInfo (browseNodeId, marketplaceId, sortBy) {
    const postBody = null

    // verify the required parameter 'browseNodeId' is set
    if (browseNodeId === undefined || browseNodeId === null) {
      throw new Error("Missing the required parameter 'browseNodeId' when calling getBrowseNodeReviewTopics")
    }

    // verify the required parameter 'marketplaceId' is set
    if (marketplaceId === undefined || marketplaceId === null) {
      throw new Error("Missing the required parameter 'marketplaceId' when calling getBrowseNodeReviewTopics")
    }

    // verify the required parameter 'sortBy' is set
    if (sortBy === undefined || sortBy === null) {
      throw new Error("Missing the required parameter 'sortBy' when calling getBrowseNodeReviewTopics")
    }

    const pathParams = {
      browseNodeId
    }
    const queryParams = {
      marketplaceId,
      sortBy
    }
    const headerParams = {
    }
    const formParams = {
    }

    const contentTypes = []
    const accepts = ['application/json']
    const returnType = BrowseNodeReviewTopicsResponse

    return this.apiClient.callApi('CustomerFeedbackApi-getBrowseNodeReviewTopics',
      '/customerFeedback/2024-06-01/browseNodes/{browseNodeId}/reviews/topics', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      contentTypes, accepts, returnType, this.getRateLimiter('CustomerFeedbackApi-getBrowseNodeReviewTopics')
    )
  }

  /**
     * Retrieve a browse node&#39;s ten most positive and ten most negative review topics.
     * @param {String} browseNodeId The ID of a browse node. A browse node is a named location in a browse tree that is used for navigation, product classification, and website content.
     * @param {String} marketplaceId The MarketplaceId is the globally unique identifier of a marketplace, you can refer to the marketplaceId here : https://developer-docs.amazon.com/sp-api/docs/marketplace-ids.
     * @param {String} sortBy The metric by which to sort the data in the response.
     * @return {Promise<BrowseNodeReviewTopicsResponse>}
     */
  getBrowseNodeReviewTopics (browseNodeId, marketplaceId, sortBy) {
    return this.getBrowseNodeReviewTopicsWithHttpInfo(browseNodeId, marketplaceId, sortBy)
      .then(function (response_and_data) {
        return response_and_data.data
      })
  }

  /**
     * Retrieve the positive and negative review trends of items in a browse node for the past six months.
     * @param {String} browseNodeId A browse node ID is a unique identifier of a browse node. A browse node is a named location in a browse tree that is used for navigation, product classification, and website content.
     * @param {String} marketplaceId The marketplace ID is the globally unique identifier of a marketplace. For more information, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).
     * @return {Promise<BrowseNodeReviewTrendsResponse>}
     */
  getBrowseNodeReviewTrendsWithHttpInfo (browseNodeId, marketplaceId) {
    const postBody = null

    // verify the required parameter 'browseNodeId' is set
    if (browseNodeId === undefined || browseNodeId === null) {
      throw new Error("Missing the required parameter 'browseNodeId' when calling getBrowseNodeReviewTrends")
    }

    // verify the required parameter 'marketplaceId' is set
    if (marketplaceId === undefined || marketplaceId === null) {
      throw new Error("Missing the required parameter 'marketplaceId' when calling getBrowseNodeReviewTrends")
    }

    const pathParams = {
      browseNodeId
    }
    const queryParams = {
      marketplaceId
    }
    const headerParams = {
    }
    const formParams = {
    }

    const contentTypes = []
    const accepts = ['application/json']
    const returnType = BrowseNodeReviewTrendsResponse

    return this.apiClient.callApi('CustomerFeedbackApi-getBrowseNodeReviewTrends',
      '/customerFeedback/2024-06-01/browseNodes/{browseNodeId}/reviews/trends', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      contentTypes, accepts, returnType, this.getRateLimiter('CustomerFeedbackApi-getBrowseNodeReviewTrends')
    )
  }

  /**
     * Retrieve the positive and negative review trends of items in a browse node for the past six months.
     * @param {String} browseNodeId A browse node ID is a unique identifier of a browse node. A browse node is a named location in a browse tree that is used for navigation, product classification, and website content.
     * @param {String} marketplaceId The marketplace ID is the globally unique identifier of a marketplace. For more information, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).
     * @return {Promise<BrowseNodeReviewTrendsResponse>}
     */
  getBrowseNodeReviewTrends (browseNodeId, marketplaceId) {
    return this.getBrowseNodeReviewTrendsWithHttpInfo(browseNodeId, marketplaceId)
      .then(function (response_and_data) {
        return response_and_data.data
      })
  }

  /**
     * This API returns the associated browse node of the requested ASIN. A browse node is a location in a browse tree that is used for navigation, product classification, and website content on the Amazon retail website.
     * @param {String} asin The Amazon Standard Identification Number (ASIN) is the unique identifier of a product within a marketplace.
     * @param {String} marketplaceId The MarketplaceId is the globally unique identifier of a marketplace, you can refer to the marketplaceId here : https://developer-docs.amazon.com/sp-api/docs/marketplace-ids.
     * @return {Promise<BrowseNodeResponse>}
     */
  getItemBrowseNodeWithHttpInfo (asin, marketplaceId) {
    const postBody = null

    // verify the required parameter 'asin' is set
    if (asin === undefined || asin === null) {
      throw new Error("Missing the required parameter 'asin' when calling getItemBrowseNode")
    }

    // verify the required parameter 'marketplaceId' is set
    if (marketplaceId === undefined || marketplaceId === null) {
      throw new Error("Missing the required parameter 'marketplaceId' when calling getItemBrowseNode")
    }

    const pathParams = {
      asin
    }
    const queryParams = {
      marketplaceId
    }
    const headerParams = {
    }
    const formParams = {
    }

    const contentTypes = []
    const accepts = ['application/json']
    const returnType = BrowseNodeResponse

    return this.apiClient.callApi('CustomerFeedbackApi-getItemBrowseNode',
      '/customerFeedback/2024-06-01/items/{asin}/browseNode', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      contentTypes, accepts, returnType, this.getRateLimiter('CustomerFeedbackApi-getItemBrowseNode')
    )
  }

  /**
     * This API returns the associated browse node of the requested ASIN. A browse node is a location in a browse tree that is used for navigation, product classification, and website content on the Amazon retail website.
     * @param {String} asin The Amazon Standard Identification Number (ASIN) is the unique identifier of a product within a marketplace.
     * @param {String} marketplaceId The MarketplaceId is the globally unique identifier of a marketplace, you can refer to the marketplaceId here : https://developer-docs.amazon.com/sp-api/docs/marketplace-ids.
     * @return {Promise<BrowseNodeResponse>}
     */
  getItemBrowseNode (asin, marketplaceId) {
    return this.getItemBrowseNodeWithHttpInfo(asin, marketplaceId)
      .then(function (response_and_data) {
        return response_and_data.data
      })
  }

  /**
     * Retrieve an item&#39;s ten most positive and ten most negative review topics.
     * @param {String} asin The Amazon Standard Identification Number (ASIN) is the unique identifier of a product within a marketplace. The value must be a child ASIN.
     * @param {String} marketplaceId The MarketplaceId is the globally unique identifier of a marketplace, you can refer to the marketplaceId here : https://developer-docs.amazon.com/sp-api/docs/marketplace-ids.
     * @param {String} sortBy The metric by which to sort data in the response.
     * @return {Promise<ItemReviewTopicsResponse>}
     */
  getItemReviewTopicsWithHttpInfo (asin, marketplaceId, sortBy) {
    const postBody = null

    // verify the required parameter 'asin' is set
    if (asin === undefined || asin === null) {
      throw new Error("Missing the required parameter 'asin' when calling getItemReviewTopics")
    }

    // verify the required parameter 'marketplaceId' is set
    if (marketplaceId === undefined || marketplaceId === null) {
      throw new Error("Missing the required parameter 'marketplaceId' when calling getItemReviewTopics")
    }

    // verify the required parameter 'sortBy' is set
    if (sortBy === undefined || sortBy === null) {
      throw new Error("Missing the required parameter 'sortBy' when calling getItemReviewTopics")
    }

    const pathParams = {
      asin
    }
    const queryParams = {
      marketplaceId,
      sortBy
    }
    const headerParams = {
    }
    const formParams = {
    }

    const contentTypes = []
    const accepts = ['application/json']
    const returnType = ItemReviewTopicsResponse

    return this.apiClient.callApi('CustomerFeedbackApi-getItemReviewTopics',
      '/customerFeedback/2024-06-01/items/{asin}/reviews/topics', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      contentTypes, accepts, returnType, this.getRateLimiter('CustomerFeedbackApi-getItemReviewTopics')
    )
  }

  /**
     * Retrieve an item&#39;s ten most positive and ten most negative review topics.
     * @param {String} asin The Amazon Standard Identification Number (ASIN) is the unique identifier of a product within a marketplace. The value must be a child ASIN.
     * @param {String} marketplaceId The MarketplaceId is the globally unique identifier of a marketplace, you can refer to the marketplaceId here : https://developer-docs.amazon.com/sp-api/docs/marketplace-ids.
     * @param {String} sortBy The metric by which to sort data in the response.
     * @return {Promise<ItemReviewTopicsResponse>}
     */
  getItemReviewTopics (asin, marketplaceId, sortBy) {
    return this.getItemReviewTopicsWithHttpInfo(asin, marketplaceId, sortBy)
      .then(function (response_and_data) {
        return response_and_data.data
      })
  }

  /**
     * Retrieve an item&#39;s positive and negative review trends for the past six months.
     * @param {String} asin The Amazon Standard Identification Number (ASIN) is the unique identifier of a product within a marketplace. This API takes child ASIN as an input.
     * @param {String} marketplaceId The MarketplaceId is the globally unique identifier of a marketplace, you can refer to the marketplaceId here : https://developer-docs.amazon.com/sp-api/docs/marketplace-ids.
     * @return {Promise<ItemReviewTrendsResponse>}
     */
  getItemReviewTrendsWithHttpInfo (asin, marketplaceId) {
    const postBody = null

    // verify the required parameter 'asin' is set
    if (asin === undefined || asin === null) {
      throw new Error("Missing the required parameter 'asin' when calling getItemReviewTrends")
    }

    // verify the required parameter 'marketplaceId' is set
    if (marketplaceId === undefined || marketplaceId === null) {
      throw new Error("Missing the required parameter 'marketplaceId' when calling getItemReviewTrends")
    }

    const pathParams = {
      asin
    }
    const queryParams = {
      marketplaceId
    }
    const headerParams = {
    }
    const formParams = {
    }

    const contentTypes = []
    const accepts = ['application/json']
    const returnType = ItemReviewTrendsResponse

    return this.apiClient.callApi('CustomerFeedbackApi-getItemReviewTrends',
      '/customerFeedback/2024-06-01/items/{asin}/reviews/trends', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      contentTypes, accepts, returnType, this.getRateLimiter('CustomerFeedbackApi-getItemReviewTrends')
    )
  }

  /**
     * Retrieve an item&#39;s positive and negative review trends for the past six months.
     * @param {String} asin The Amazon Standard Identification Number (ASIN) is the unique identifier of a product within a marketplace. This API takes child ASIN as an input.
     * @param {String} marketplaceId The MarketplaceId is the globally unique identifier of a marketplace, you can refer to the marketplaceId here : https://developer-docs.amazon.com/sp-api/docs/marketplace-ids.
     * @return {Promise<ItemReviewTrendsResponse>}
     */
  getItemReviewTrends (asin, marketplaceId) {
    return this.getItemReviewTrendsWithHttpInfo(asin, marketplaceId)
      .then(function (response_and_data) {
        return response_and_data.data
      })
  }
}
