/**
 * The Selling Partner API for Amazon Seller Wallet Open Banking API
 * The Selling Partner API for Seller Wallet (Seller Wallet API) provides financial information that is relevant to a seller's Seller Wallet account. You can obtain financial events, balances, and transfer schedules for Seller Wallet accounts. You can also schedule and initiate transactions.
 *
 * The version of the OpenAPI document: 2024-03-01
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import { ApiClient } from '../ApiClient.js'
import { ErrorList } from '../model/ErrorList.js'
import { TransferRatePreview } from '../model/TransferRatePreview.js'
import { SuperagentRateLimiter } from '../../../helper/SuperagentRateLimiter.mjs'
import { DefaultRateLimitFetcher } from '../../../helper/DefaultRateLimitFetcher.mjs'

/**
* TransferPreview service.
* @module sellerWallet_2024_03_01/api/TransferPreviewApi
* @version 2024-03-01
*/
export class TransferPreviewApi {
  // Private member stores the default rate limiters
  #defaultRateLimiterMap

  /**
    * Constructs a new TransferPreviewApi.
    * @alias module:sellerWallet_2024_03_01/api/TransferPreviewApi
    * @class
    * @param {ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link ApiClient#instance} if unspecified.
    */
  constructor (apiClient) {
    this.apiClient = apiClient || ApiClient.instance
    this.initializeDefaultRateLimiterMap()
  }

  /**
     * Initialize rate limiters for API operations
     */
  initializeDefaultRateLimiterMap () {
    this.#defaultRateLimiterMap = new Map()
    const defaultRateLimitFetcher = new DefaultRateLimitFetcher()
    const operations = [
      'TransferPreviewApi-getTransferPreview'
    ]

    for (const operation of operations) {
      const config = defaultRateLimitFetcher.getLimit(operation)
      this.#defaultRateLimiterMap.set(operation, new SuperagentRateLimiter(config))
    }
  }

  /**
     * Get rate limiter for a specific operation
     * @param {String} operation name
     */
  getRateLimiter (operation) {
    return this.#defaultRateLimiterMap.get(operation)
  }

  /**
     * Fetch potential fees that could be applied on a transaction on the basis of the source and destination country currency code
     * Returns list of potential fees on a transaction based on the source and destination country currency code
     * @param {String} sourceCountryCode Represents 2 character country code of source transaction account in ISO 3166 standard format.
     * @param {String} sourceCurrencyCode Represents 3 letter currency code in ISO 4217 standard format of the source transaction country.
     * @param {String} destinationCountryCode Represents 2 character country code of destination transaction account in ISO 3166 standard format.
     * @param {String} destinationCurrencyCode Represents 3 letter currency code in ISO 4217 standard format of the destination transaction country.
     * @param {Number} baseAmount Represents the base transaction amount without any markup fees, rates that will be used to get the transfer preview.
     * @return {Promise<TransferRatePreview>}
     */
  getTransferPreviewWithHttpInfo (sourceCountryCode, sourceCurrencyCode, destinationCountryCode, destinationCurrencyCode, baseAmount) {
    const postBody = null

    // verify the required parameter 'sourceCountryCode' is set
    if (sourceCountryCode === undefined || sourceCountryCode === null) {
      throw new Error("Missing the required parameter 'sourceCountryCode' when calling getTransferPreview")
    }

    // verify the required parameter 'sourceCurrencyCode' is set
    if (sourceCurrencyCode === undefined || sourceCurrencyCode === null) {
      throw new Error("Missing the required parameter 'sourceCurrencyCode' when calling getTransferPreview")
    }

    // verify the required parameter 'destinationCountryCode' is set
    if (destinationCountryCode === undefined || destinationCountryCode === null) {
      throw new Error("Missing the required parameter 'destinationCountryCode' when calling getTransferPreview")
    }

    // verify the required parameter 'destinationCurrencyCode' is set
    if (destinationCurrencyCode === undefined || destinationCurrencyCode === null) {
      throw new Error("Missing the required parameter 'destinationCurrencyCode' when calling getTransferPreview")
    }

    // verify the required parameter 'baseAmount' is set
    if (baseAmount === undefined || baseAmount === null) {
      throw new Error("Missing the required parameter 'baseAmount' when calling getTransferPreview")
    }

    const pathParams = {
    }
    const queryParams = {
      sourceCountryCode,
      sourceCurrencyCode,
      destinationCountryCode,
      destinationCurrencyCode,
      baseAmount
    }
    const headerParams = {
    }
    const formParams = {
    }

    const contentTypes = []
    const accepts = ['application/json']
    const returnType = TransferRatePreview

    return this.apiClient.callApi('TransferPreviewApi-getTransferPreview',
      '/finances/transfers/wallet/2024-03-01/transferPreview', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      contentTypes, accepts, returnType, this.getRateLimiter('TransferPreviewApi-getTransferPreview')
    )
  }

  /**
     * Fetch potential fees that could be applied on a transaction on the basis of the source and destination country currency code
     * Returns list of potential fees on a transaction based on the source and destination country currency code
     * @param {String} sourceCountryCode Represents 2 character country code of source transaction account in ISO 3166 standard format.
     * @param {String} sourceCurrencyCode Represents 3 letter currency code in ISO 4217 standard format of the source transaction country.
     * @param {String} destinationCountryCode Represents 2 character country code of destination transaction account in ISO 3166 standard format.
     * @param {String} destinationCurrencyCode Represents 3 letter currency code in ISO 4217 standard format of the destination transaction country.
     * @param {Number} baseAmount Represents the base transaction amount without any markup fees, rates that will be used to get the transfer preview.
     * @return {Promise<TransferRatePreview>}
     */
  getTransferPreview (sourceCountryCode, sourceCurrencyCode, destinationCountryCode, destinationCurrencyCode, baseAmount) {
    return this.getTransferPreviewWithHttpInfo(sourceCountryCode, sourceCurrencyCode, destinationCountryCode, destinationCurrencyCode, baseAmount)
      .then(function (response_and_data) {
        return response_and_data.data
      })
  }
}
