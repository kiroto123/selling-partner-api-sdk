/**
 * The Selling Partner API for Amazon Seller Wallet Open Banking API
 * The Selling Partner API for Seller Wallet (Seller Wallet API) provides financial information that is relevant to a seller's Seller Wallet account. You can obtain financial events, balances, and transfer schedules for Seller Wallet accounts. You can also schedule and initiate transactions.
 *
 * The version of the OpenAPI document: 2024-03-01
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import { ApiClient } from '../ApiClient.js'
import { ErrorList } from '../model/ErrorList.js'
import { Transaction } from '../model/Transaction.js'
import { TransactionInitiationRequest } from '../model/TransactionInitiationRequest.js'
import { TransactionListing } from '../model/TransactionListing.js'
import { SuperagentRateLimiter } from '../../../helper/SuperagentRateLimiter.mjs'
import { DefaultRateLimitFetcher } from '../../../helper/DefaultRateLimitFetcher.mjs'

/**
* Transactions service.
* @module sellerWallet_2024_03_01/api/TransactionsApi
* @version 2024-03-01
*/
export class TransactionsApi {
  // Private member stores the default rate limiters
  #defaultRateLimiterMap

  /**
    * Constructs a new TransactionsApi.
    * @alias module:sellerWallet_2024_03_01/api/TransactionsApi
    * @class
    * @param {ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link ApiClient#instance} if unspecified.
    */
  constructor (apiClient) {
    this.apiClient = apiClient || ApiClient.instance
    this.initializeDefaultRateLimiterMap()
  }

  /**
     * Initialize rate limiters for API operations
     */
  initializeDefaultRateLimiterMap () {
    this.#defaultRateLimiterMap = new Map()
    const defaultRateLimitFetcher = new DefaultRateLimitFetcher()
    const operations = [
      'TransactionsApi-createTransaction',
      'TransactionsApi-getTransaction',
      'TransactionsApi-listAccountTransactions'
    ]

    for (const operation of operations) {
      const config = defaultRateLimitFetcher.getLimit(operation)
      this.#defaultRateLimiterMap.set(operation, new SuperagentRateLimiter(config))
    }
  }

  /**
     * Get rate limiter for a specific operation
     * @param {String} operation name
     */
  getRateLimiter (operation) {
    return this.#defaultRateLimiterMap.get(operation)
  }

  /**
     * Create a transaction request from Amazon SW account to another customer provided account
     * Create a transaction request from a Seller Wallet account to another customer-provided account.
     * @param {String} destAccountDigitalSignature Digital signature for the destination bank account details.
     * @param {String} amountDigitalSignature Digital signature for the source currency transaction amount.
     * @param {TransactionInitiationRequest} body Defines the actual payload of the request
     * @return {Promise<Transaction>}
     */
  createTransactionWithHttpInfo (destAccountDigitalSignature, amountDigitalSignature, body) {
    const postBody = body

    // verify the required parameter 'destAccountDigitalSignature' is set
    if (destAccountDigitalSignature === undefined || destAccountDigitalSignature === null) {
      throw new Error("Missing the required parameter 'destAccountDigitalSignature' when calling createTransaction")
    }

    // verify the required parameter 'amountDigitalSignature' is set
    if (amountDigitalSignature === undefined || amountDigitalSignature === null) {
      throw new Error("Missing the required parameter 'amountDigitalSignature' when calling createTransaction")
    }

    // verify the required parameter 'body' is set
    if (body === undefined || body === null) {
      throw new Error("Missing the required parameter 'body' when calling createTransaction")
    }

    const pathParams = {
    }
    const queryParams = {
    }
    const headerParams = {
      destAccountDigitalSignature,
      amountDigitalSignature
    }
    const formParams = {
    }

    const contentTypes = ['application/json']
    const accepts = ['application/json']
    const returnType = Transaction

    return this.apiClient.callApi('TransactionsApi-createTransaction',
      '/finances/transfers/wallet/2024-03-01/transactions', 'POST',
      pathParams, queryParams, headerParams, formParams, postBody,
      contentTypes, accepts, returnType, this.getRateLimiter('TransactionsApi-createTransaction')
    )
  }

  /**
     * Create a transaction request from Amazon SW account to another customer provided account
     * Create a transaction request from a Seller Wallet account to another customer-provided account.
     * @param {String} destAccountDigitalSignature Digital signature for the destination bank account details.
     * @param {String} amountDigitalSignature Digital signature for the source currency transaction amount.
     * @param {TransactionInitiationRequest} body Defines the actual payload of the request
     * @return {Promise<Transaction>}
     */
  createTransaction (destAccountDigitalSignature, amountDigitalSignature, body) {
    return this.createTransactionWithHttpInfo(destAccountDigitalSignature, amountDigitalSignature, body)
      .then(function (response_and_data) {
        return response_and_data.data
      })
  }

  /**
     * Find particular Amazon SW account transaction by Amazon transaction identifier
     * Returns a transaction
     * @param {String} transactionId ID of the Amazon SW transaction
     * @return {Promise<Transaction>}
     */
  getTransactionWithHttpInfo (transactionId) {
    const postBody = null

    // verify the required parameter 'transactionId' is set
    if (transactionId === undefined || transactionId === null) {
      throw new Error("Missing the required parameter 'transactionId' when calling getTransaction")
    }

    const pathParams = {
      transactionId
    }
    const queryParams = {
    }
    const headerParams = {
    }
    const formParams = {
    }

    const contentTypes = []
    const accepts = ['application/json']
    const returnType = Transaction

    return this.apiClient.callApi('TransactionsApi-getTransaction',
      '/finances/transfers/wallet/2024-03-01/transactions/{transactionId}', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      contentTypes, accepts, returnType, this.getRateLimiter('TransactionsApi-getTransaction')
    )
  }

  /**
     * Find particular Amazon SW account transaction by Amazon transaction identifier
     * Returns a transaction
     * @param {String} transactionId ID of the Amazon SW transaction
     * @return {Promise<Transaction>}
     */
  getTransaction (transactionId) {
    return this.getTransactionWithHttpInfo(transactionId)
      .then(function (response_and_data) {
        return response_and_data.data
      })
  }

  /**
     * The API will return all the transactions for a given Amazon SW account sorted by the transaction request date
     * Retrieve a list of transactions for a given Seller Wallet bank account.
     * @param {String} accountId ID of the Amazon SW account
     * @param {Object} opts Optional parameters
     * @param {String} opts.nextPageToken Pagination token to retrieve a specific page of results.
     * @return {Promise<TransactionListing>}
     */
  listAccountTransactionsWithHttpInfo (accountId, opts) {
    opts = opts || {}
    const postBody = null

    // verify the required parameter 'accountId' is set
    if (accountId === undefined || accountId === null) {
      throw new Error("Missing the required parameter 'accountId' when calling listAccountTransactions")
    }

    const pathParams = {
    }
    const queryParams = {
      accountId,
      nextPageToken: opts.nextPageToken
    }
    const headerParams = {
    }
    const formParams = {
    }

    const contentTypes = []
    const accepts = ['application/json']
    const returnType = TransactionListing

    return this.apiClient.callApi('TransactionsApi-listAccountTransactions',
      '/finances/transfers/wallet/2024-03-01/transactions', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      contentTypes, accepts, returnType, this.getRateLimiter('TransactionsApi-listAccountTransactions')
    )
  }

  /**
     * The API will return all the transactions for a given Amazon SW account sorted by the transaction request date
     * Retrieve a list of transactions for a given Seller Wallet bank account.
     * @param {String} accountId ID of the Amazon SW account
     * @param {Object} opts Optional parameters
     * @param {String} opts.nextPageToken Pagination token to retrieve a specific page of results.
     * @return {Promise<TransactionListing>}
     */
  listAccountTransactions (accountId, opts) {
    return this.listAccountTransactionsWithHttpInfo(accountId, opts)
      .then(function (response_and_data) {
        return response_and_data.data
      })
  }
}
