/**
 * The Selling Partner API for Amazon Seller Wallet Open Banking API
 * The Selling Partner API for Seller Wallet (Seller Wallet API) provides financial information that is relevant to a seller's Seller Wallet account. You can obtain financial events, balances, and transfer schedules for Seller Wallet accounts. You can also schedule and initiate transactions.
 *
 * The version of the OpenAPI document: 2024-03-01
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import { ApiClient } from '../ApiClient.js'
import { RecurringFrequency } from './RecurringFrequency.js'
import { ScheduleExpressionType } from './ScheduleExpressionType.js'

/**
 * The ScheduleExpression model module.
 * @module sellerWallet_2024_03_01/model/ScheduleExpression
 * @version 2024-03-01
 */
export class ScheduleExpression {
  /**
   * Constructs a new <code>ScheduleExpression</code>.
   * Parameters containing information of the expression that defines when the schedule runs. The following formats are supported.
   * @alias module:sellerWallet_2024_03_01/model/ScheduleExpression
   * @class
   * @param scheduleExpressionType {ScheduleExpressionType}
   */
  constructor (scheduleExpressionType) {
    this.scheduleExpressionType = scheduleExpressionType
  }

  /**
   * Constructs a <code>ScheduleExpression</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {ScheduleExpression} obj Optional instance to populate.
   * @return {ScheduleExpression} The populated <code>ScheduleExpression</code> instance.
   */
  static constructFromObject (data, obj) {
    if (data) {
      switch (typeof data) {
        case 'string':
          obj = String(data)
          break
        case 'number':
          obj = Number(data)
          break
        case 'boolean':
          obj = Boolean(data)
          break
      }
      obj = obj || new ScheduleExpression()
      if (data.hasOwnProperty('scheduleExpressionType')) { obj.scheduleExpressionType = ScheduleExpressionType.constructFromObject(data.scheduleExpressionType) }
      if (data.hasOwnProperty('recurringFrequency')) { obj.recurringFrequency = RecurringFrequency.constructFromObject(data.recurringFrequency) }
    }
    return obj
  }
}

/**
 * @member {ScheduleExpressionType} scheduleExpressionType
 * @type {ScheduleExpressionType}
 */
ScheduleExpression.prototype.scheduleExpressionType = undefined

/**
 * @member {RecurringFrequency} recurringFrequency
 * @type {RecurringFrequency}
 */
ScheduleExpression.prototype.recurringFrequency = undefined
