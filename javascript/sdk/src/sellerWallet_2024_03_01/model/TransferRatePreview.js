/**
 * The Selling Partner API for Amazon Seller Wallet Open Banking API
 * The Selling Partner API for Seller Wallet (Seller Wallet API) provides financial information that is relevant to a seller's Seller Wallet account. You can obtain financial events, balances, and transfer schedules for Seller Wallet accounts. You can also schedule and initiate transactions.
 *
 * The version of the OpenAPI document: 2024-03-01
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import { ApiClient } from '../ApiClient.js'
import { Currency } from './Currency.js'
import { Fee } from './Fee.js'
import { FxRateDetails } from './FxRateDetails.js'

/**
 * The TransferRatePreview model module.
 * @module sellerWallet_2024_03_01/model/TransferRatePreview
 * @version 2024-03-01
 */
export class TransferRatePreview {
  /**
   * Constructs a new <code>TransferRatePreview</code>.
   * The fees and foreign exchange rates that apply to the transaction.  If the fees are in terms of the &#x60;baseAmount&#x60; (source account) currency, then the effective rate is equal to **1 - (fees * &#x60;baseRate&#x60; / &#x60;baseAmount&#x60;)**.  If the fees are in terms of the &#x60;transferAmount&#x60; (destination account) currency, then the effective rate is equal to **&#x60;baseRate&#x60; - (fees / &#x60;baseAmount&#x60;)**.  In the preceding expressions, **fees** is equal to the sum of all &#x60;feeAmount.currencyAmount&#x60; values in the &#x60;fees&#x60; array.
   * @alias module:sellerWallet_2024_03_01/model/TransferRatePreview
   * @class
   * @param baseAmount {Currency}
   * @param fxRateDetails {FxRateDetails}
   * @param transferAmount {Currency}
   * @param fees {[Fee]} List of fees
   */
  constructor (baseAmount, fxRateDetails, transferAmount, fees) {
    this.baseAmount = baseAmount
    this.fxRateDetails = fxRateDetails
    this.transferAmount = transferAmount
    this.fees = fees
  }

  /**
   * Constructs a <code>TransferRatePreview</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {TransferRatePreview} obj Optional instance to populate.
   * @return {TransferRatePreview} The populated <code>TransferRatePreview</code> instance.
   */
  static constructFromObject (data, obj) {
    if (data) {
      switch (typeof data) {
        case 'string':
          obj = String(data)
          break
        case 'number':
          obj = Number(data)
          break
        case 'boolean':
          obj = Boolean(data)
          break
      }
      obj = obj || new TransferRatePreview()
      if (data.hasOwnProperty('baseAmount')) { obj.baseAmount = Currency.constructFromObject(data.baseAmount) }
      if (data.hasOwnProperty('fxRateDetails')) { obj.fxRateDetails = FxRateDetails.constructFromObject(data.fxRateDetails) }
      if (data.hasOwnProperty('transferAmount')) { obj.transferAmount = Currency.constructFromObject(data.transferAmount) }
      if (data.hasOwnProperty('fees')) { obj.fees = ApiClient.convertToType(data.fees, [Fee]) }
    }
    return obj
  }
}

/**
 * @member {Currency} baseAmount
 * @type {Currency}
 */
TransferRatePreview.prototype.baseAmount = undefined

/**
 * @member {FxRateDetails} fxRateDetails
 * @type {FxRateDetails}
 */
TransferRatePreview.prototype.fxRateDetails = undefined

/**
 * @member {Currency} transferAmount
 * @type {Currency}
 */
TransferRatePreview.prototype.transferAmount = undefined

/**
 * List of fees
 * @member {[Fee]} fees
 * @type {[Fee]}
 */
TransferRatePreview.prototype.fees = undefined
