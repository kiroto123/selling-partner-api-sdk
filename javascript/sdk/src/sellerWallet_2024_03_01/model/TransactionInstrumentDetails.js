/**
 * The Selling Partner API for Amazon Seller Wallet Open Banking API
 * The Selling Partner API for Seller Wallet (Seller Wallet API) provides financial information that is relevant to a seller's Seller Wallet account. You can obtain financial events, balances, and transfer schedules for Seller Wallet accounts. You can also schedule and initiate transactions.
 *
 * The version of the OpenAPI document: 2024-03-01
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import { ApiClient } from '../ApiClient.js'
import { BankAccount } from './BankAccount.js'

/**
 * The TransactionInstrumentDetails model module.
 * @module sellerWallet_2024_03_01/model/TransactionInstrumentDetails
 * @version 2024-03-01
 */
export class TransactionInstrumentDetails {
  /**
   * Constructs a new <code>TransactionInstrumentDetails</code>.
   * Request body to create transaction instrument, Amazon performs validation and screening (anti-money laundering measuers) on all the transaction instruments before executing a transaction thus it requires transaction instrument holder&#39;s contact details as well
   * @alias module:sellerWallet_2024_03_01/model/TransactionInstrumentDetails
   * @class
   * @param bankAccount {BankAccount}
   * @param bankAccountNumber {String} This field would be used to populate the bank account number of the destination payment method. The field is intentionally not included in any other Schemas since Amazon internal systems will never receive it in unencrypted format, so field won't be part of the request signature
   */
  constructor (bankAccount, bankAccountNumber) {
    this.bankAccount = bankAccount
    this.bankAccountNumber = bankAccountNumber
  }

  /**
   * Constructs a <code>TransactionInstrumentDetails</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {TransactionInstrumentDetails} obj Optional instance to populate.
   * @return {TransactionInstrumentDetails} The populated <code>TransactionInstrumentDetails</code> instance.
   */
  static constructFromObject (data, obj) {
    if (data) {
      switch (typeof data) {
        case 'string':
          obj = String(data)
          break
        case 'number':
          obj = Number(data)
          break
        case 'boolean':
          obj = Boolean(data)
          break
      }
      obj = obj || new TransactionInstrumentDetails()
      if (data.hasOwnProperty('bankAccount')) { obj.bankAccount = BankAccount.constructFromObject(data.bankAccount) }
      if (data.hasOwnProperty('bankAccountNumber')) { obj.bankAccountNumber = ApiClient.convertToType(data.bankAccountNumber, 'String') }
    }
    return obj
  }
}

/**
 * @member {BankAccount} bankAccount
 * @type {BankAccount}
 */
TransactionInstrumentDetails.prototype.bankAccount = undefined

/**
 * This field would be used to populate the bank account number of the destination payment method. The field is intentionally not included in any other Schemas since Amazon internal systems will never receive it in unencrypted format, so field won't be part of the request signature
 * @member {String} bankAccountNumber
 * @type {String}
 */
TransactionInstrumentDetails.prototype.bankAccountNumber = undefined
