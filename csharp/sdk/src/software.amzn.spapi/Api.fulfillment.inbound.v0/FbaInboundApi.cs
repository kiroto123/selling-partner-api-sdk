/*
 * Selling Partner API for Fulfillment Inbound
 *
 * The Selling Partner API for Fulfillment Inbound lets you create applications that create and update inbound shipments of inventory to Amazon's fulfillment network.
 *
 * The version of the OpenAPI document: v0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using software.amzn.spapi.Client;
using software.amzn.spapi.Auth;

using software.amzn.spapi.Model.fulfillment.inbound.v0;

namespace software.amzn.spapi.Api.fulfillment.inbound.v0
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFbaInboundApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a bill of lading for a Less Than Truckload/Full Truckload (LTL/FTL) shipment. The getBillOfLading operation returns PDF document data for printing a bill of lading for an Amazon-partnered Less Than Truckload/Full Truckload (LTL/FTL) inbound shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">A shipment identifier originally returned by the createInboundShipmentPlan operation.</param>
        /// <returns>GetBillOfLadingResponse</returns>
        GetBillOfLadingResponse GetBillOfLading (string shipmentId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a bill of lading for a Less Than Truckload/Full Truckload (LTL/FTL) shipment. The getBillOfLading operation returns PDF document data for printing a bill of lading for an Amazon-partnered Less Than Truckload/Full Truckload (LTL/FTL) inbound shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">A shipment identifier originally returned by the createInboundShipmentPlan operation.</param>
        /// <returns>ApiResponse of GetBillOfLadingResponse</returns>
        ApiResponse<GetBillOfLadingResponse> GetBillOfLadingWithHttpInfo (string shipmentId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns package/pallet labels for faster and more accurate shipment processing at the Amazon fulfillment center.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">A shipment identifier originally returned by the createInboundShipmentPlan operation.</param>
        /// <param name="pageType">The page type to use to print the labels. Submitting a PageType value that is not supported in your marketplace returns an error.</param>
        /// <param name="labelType">The type of labels requested. </param>
        /// <param name="numberOfPackages">The number of packages in the shipment. (optional)</param>
        /// <param name="packageLabelsToPrint">A list of identifiers that specify packages for which you want package labels printed.  If you provide box content information with the [FBA Inbound Shipment Carton Information Feed](https://developer-docs.amazon.com/sp-api/docs/fulfillment-by-amazon-feed-type-values#fba-inbound-shipment-carton-information-feed), then &#x60;PackageLabelsToPrint&#x60; must match the &#x60;CartonId&#x60; values you provide through that feed. If you provide box content information with the Fulfillment Inbound API v2024-03-20, then &#x60;PackageLabelsToPrint&#x60; must match the &#x60;boxID&#x60; values from the [&#x60;listShipmentBoxes&#x60;](https://developer-docs.amazon.com/sp-api/reference/listshipmentboxes) response. If these values do not match as required, the operation returns the &#x60;IncorrectPackageIdentifier&#x60; error code. (optional)</param>
        /// <param name="numberOfPallets">The number of pallets in the shipment. This returns four identical labels for each pallet. (optional)</param>
        /// <param name="pageSize">The page size for paginating through the total packages&#39; labels. This is a required parameter for Non-Partnered LTL Shipments. Max value:1000. (optional)</param>
        /// <param name="pageStartIndex">The page start index for paginating through the total packages&#39; labels. This is a required parameter for Non-Partnered LTL Shipments. (optional)</param>
        /// <returns>GetLabelsResponse</returns>
        GetLabelsResponse GetLabels (string shipmentId, string pageType, string labelType, int? numberOfPackages = null, List<string>? packageLabelsToPrint = null, int? numberOfPallets = null, int? pageSize = null, int? pageStartIndex = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns package/pallet labels for faster and more accurate shipment processing at the Amazon fulfillment center.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">A shipment identifier originally returned by the createInboundShipmentPlan operation.</param>
        /// <param name="pageType">The page type to use to print the labels. Submitting a PageType value that is not supported in your marketplace returns an error.</param>
        /// <param name="labelType">The type of labels requested. </param>
        /// <param name="numberOfPackages">The number of packages in the shipment. (optional)</param>
        /// <param name="packageLabelsToPrint">A list of identifiers that specify packages for which you want package labels printed.  If you provide box content information with the [FBA Inbound Shipment Carton Information Feed](https://developer-docs.amazon.com/sp-api/docs/fulfillment-by-amazon-feed-type-values#fba-inbound-shipment-carton-information-feed), then &#x60;PackageLabelsToPrint&#x60; must match the &#x60;CartonId&#x60; values you provide through that feed. If you provide box content information with the Fulfillment Inbound API v2024-03-20, then &#x60;PackageLabelsToPrint&#x60; must match the &#x60;boxID&#x60; values from the [&#x60;listShipmentBoxes&#x60;](https://developer-docs.amazon.com/sp-api/reference/listshipmentboxes) response. If these values do not match as required, the operation returns the &#x60;IncorrectPackageIdentifier&#x60; error code. (optional)</param>
        /// <param name="numberOfPallets">The number of pallets in the shipment. This returns four identical labels for each pallet. (optional)</param>
        /// <param name="pageSize">The page size for paginating through the total packages&#39; labels. This is a required parameter for Non-Partnered LTL Shipments. Max value:1000. (optional)</param>
        /// <param name="pageStartIndex">The page start index for paginating through the total packages&#39; labels. This is a required parameter for Non-Partnered LTL Shipments. (optional)</param>
        /// <returns>ApiResponse of GetLabelsResponse</returns>
        ApiResponse<GetLabelsResponse> GetLabelsWithHttpInfo (string shipmentId, string pageType, string labelType, int? numberOfPackages = null, List<string>? packageLabelsToPrint = null, int? numberOfPallets = null, int? pageSize = null, int? pageStartIndex = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns labeling requirements and item preparation instructions to help prepare items for shipment to Amazon&#39;s fulfillment network.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipToCountryCode">The country code of the country to which the items will be shipped. Note that labeling requirements and item preparation instructions can vary by country.</param>
        /// <param name="sellerSKUList">A list of SellerSKU values. Used to identify items for which you want labeling requirements and item preparation instructions for shipment to Amazon&#39;s fulfillment network. The SellerSKU is qualified by the Seller ID, which is included with every call to the Seller Partner API.  Note: Include seller SKUs that you have used to list items on Amazon&#39;s retail website. If you include a seller SKU that you have never used to list an item on Amazon&#39;s retail website, the seller SKU is returned in the InvalidSKUList property in the response. (optional)</param>
        /// <param name="aSINList">A list of ASIN values. Used to identify items for which you want item preparation instructions to help with item sourcing decisions.  Note: ASINs must be included in the product catalog for at least one of the marketplaces that the seller  participates in. Any ASIN that is not included in the product catalog for at least one of the marketplaces that the seller participates in is returned in the InvalidASINList property in the response. You can find out which marketplaces a seller participates in by calling the getMarketplaceParticipations operation in the Selling Partner API for Sellers. (optional)</param>
        /// <returns>GetPrepInstructionsResponse</returns>
        GetPrepInstructionsResponse GetPrepInstructions (string shipToCountryCode, List<string>? sellerSKUList = null, List<string>? aSINList = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns labeling requirements and item preparation instructions to help prepare items for shipment to Amazon&#39;s fulfillment network.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipToCountryCode">The country code of the country to which the items will be shipped. Note that labeling requirements and item preparation instructions can vary by country.</param>
        /// <param name="sellerSKUList">A list of SellerSKU values. Used to identify items for which you want labeling requirements and item preparation instructions for shipment to Amazon&#39;s fulfillment network. The SellerSKU is qualified by the Seller ID, which is included with every call to the Seller Partner API.  Note: Include seller SKUs that you have used to list items on Amazon&#39;s retail website. If you include a seller SKU that you have never used to list an item on Amazon&#39;s retail website, the seller SKU is returned in the InvalidSKUList property in the response. (optional)</param>
        /// <param name="aSINList">A list of ASIN values. Used to identify items for which you want item preparation instructions to help with item sourcing decisions.  Note: ASINs must be included in the product catalog for at least one of the marketplaces that the seller  participates in. Any ASIN that is not included in the product catalog for at least one of the marketplaces that the seller participates in is returned in the InvalidASINList property in the response. You can find out which marketplaces a seller participates in by calling the getMarketplaceParticipations operation in the Selling Partner API for Sellers. (optional)</param>
        /// <returns>ApiResponse of GetPrepInstructionsResponse</returns>
        ApiResponse<GetPrepInstructionsResponse> GetPrepInstructionsWithHttpInfo (string shipToCountryCode, List<string>? sellerSKUList = null, List<string>? aSINList = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of items in a specified inbound shipment, or a list of items that were updated within a specified time frame.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queryType">Indicates whether items are returned using a date range (by providing the LastUpdatedAfter and LastUpdatedBefore parameters), or using NextToken, which continues returning items specified in a previous request.</param>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace where the product would be stored.</param>
        /// <param name="lastUpdatedAfter">A date used for selecting inbound shipment items that were last updated after (or at) a specified time. The selection includes updates made by Amazon and by the seller. (optional)</param>
        /// <param name="lastUpdatedBefore">A date used for selecting inbound shipment items that were last updated before (or at) a specified time. The selection includes updates made by Amazon and by the seller. (optional)</param>
        /// <param name="nextToken">A string token returned in the response to your previous request. (optional)</param>
        /// <returns>GetShipmentItemsResponse</returns>
        GetShipmentItemsResponse GetShipmentItems (string queryType, string marketplaceId, DateTime? lastUpdatedAfter = null, DateTime? lastUpdatedBefore = null, string? nextToken = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of items in a specified inbound shipment, or a list of items that were updated within a specified time frame.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queryType">Indicates whether items are returned using a date range (by providing the LastUpdatedAfter and LastUpdatedBefore parameters), or using NextToken, which continues returning items specified in a previous request.</param>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace where the product would be stored.</param>
        /// <param name="lastUpdatedAfter">A date used for selecting inbound shipment items that were last updated after (or at) a specified time. The selection includes updates made by Amazon and by the seller. (optional)</param>
        /// <param name="lastUpdatedBefore">A date used for selecting inbound shipment items that were last updated before (or at) a specified time. The selection includes updates made by Amazon and by the seller. (optional)</param>
        /// <param name="nextToken">A string token returned in the response to your previous request. (optional)</param>
        /// <returns>ApiResponse of GetShipmentItemsResponse</returns>
        ApiResponse<GetShipmentItemsResponse> GetShipmentItemsWithHttpInfo (string queryType, string marketplaceId, DateTime? lastUpdatedAfter = null, DateTime? lastUpdatedBefore = null, string? nextToken = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of items in a specified inbound shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">A shipment identifier used for selecting items in a specific inbound shipment.</param>
        /// <param name="marketplaceId">Deprecated. Do not use. (optional)</param>
        /// <returns>GetShipmentItemsResponse</returns>
        GetShipmentItemsResponse GetShipmentItemsByShipmentId (string shipmentId, string? marketplaceId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of items in a specified inbound shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">A shipment identifier used for selecting items in a specific inbound shipment.</param>
        /// <param name="marketplaceId">Deprecated. Do not use. (optional)</param>
        /// <returns>ApiResponse of GetShipmentItemsResponse</returns>
        ApiResponse<GetShipmentItemsResponse> GetShipmentItemsByShipmentIdWithHttpInfo (string shipmentId, string? marketplaceId = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of inbound shipments based on criteria that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queryType">Indicates whether shipments are returned using shipment information (by providing the ShipmentStatusList or ShipmentIdList parameters), using a date range (by providing the LastUpdatedAfter and LastUpdatedBefore parameters), or by using NextToken to continue returning items specified in a previous request.</param>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace where the product would be stored.</param>
        /// <param name="shipmentStatusList">A list of ShipmentStatus values. Used to select shipments with a current status that matches the status values that you specify. (optional)</param>
        /// <param name="shipmentIdList">A list of shipment IDs used to select the shipments that you want. If both ShipmentStatusList and ShipmentIdList are specified, only shipments that match both parameters are returned. (optional)</param>
        /// <param name="lastUpdatedAfter">A date used for selecting inbound shipments that were last updated after (or at) a specified time. The selection includes updates made by Amazon and by the seller. (optional)</param>
        /// <param name="lastUpdatedBefore">A date used for selecting inbound shipments that were last updated before (or at) a specified time. The selection includes updates made by Amazon and by the seller. (optional)</param>
        /// <param name="nextToken">A string token returned in the response to your previous request. (optional)</param>
        /// <returns>GetShipmentsResponse</returns>
        GetShipmentsResponse GetShipments (string queryType, string marketplaceId, List<string>? shipmentStatusList = null, List<string>? shipmentIdList = null, DateTime? lastUpdatedAfter = null, DateTime? lastUpdatedBefore = null, string? nextToken = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of inbound shipments based on criteria that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queryType">Indicates whether shipments are returned using shipment information (by providing the ShipmentStatusList or ShipmentIdList parameters), using a date range (by providing the LastUpdatedAfter and LastUpdatedBefore parameters), or by using NextToken to continue returning items specified in a previous request.</param>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace where the product would be stored.</param>
        /// <param name="shipmentStatusList">A list of ShipmentStatus values. Used to select shipments with a current status that matches the status values that you specify. (optional)</param>
        /// <param name="shipmentIdList">A list of shipment IDs used to select the shipments that you want. If both ShipmentStatusList and ShipmentIdList are specified, only shipments that match both parameters are returned. (optional)</param>
        /// <param name="lastUpdatedAfter">A date used for selecting inbound shipments that were last updated after (or at) a specified time. The selection includes updates made by Amazon and by the seller. (optional)</param>
        /// <param name="lastUpdatedBefore">A date used for selecting inbound shipments that were last updated before (or at) a specified time. The selection includes updates made by Amazon and by the seller. (optional)</param>
        /// <param name="nextToken">A string token returned in the response to your previous request. (optional)</param>
        /// <returns>ApiResponse of GetShipmentsResponse</returns>
        ApiResponse<GetShipmentsResponse> GetShipmentsWithHttpInfo (string queryType, string marketplaceId, List<string>? shipmentStatusList = null, List<string>? shipmentIdList = null, DateTime? lastUpdatedAfter = null, DateTime? lastUpdatedBefore = null, string? nextToken = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a bill of lading for a Less Than Truckload/Full Truckload (LTL/FTL) shipment. The getBillOfLading operation returns PDF document data for printing a bill of lading for an Amazon-partnered Less Than Truckload/Full Truckload (LTL/FTL) inbound shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">A shipment identifier originally returned by the createInboundShipmentPlan operation.</param>
        /// <returns>Task of GetBillOfLadingResponse</returns>
        System.Threading.Tasks.Task<GetBillOfLadingResponse> GetBillOfLadingAsync (string shipmentId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a bill of lading for a Less Than Truckload/Full Truckload (LTL/FTL) shipment. The getBillOfLading operation returns PDF document data for printing a bill of lading for an Amazon-partnered Less Than Truckload/Full Truckload (LTL/FTL) inbound shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">A shipment identifier originally returned by the createInboundShipmentPlan operation.</param>
        /// <returns>Task of ApiResponse (GetBillOfLadingResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetBillOfLadingResponse>> GetBillOfLadingAsyncWithHttpInfo (string shipmentId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns package/pallet labels for faster and more accurate shipment processing at the Amazon fulfillment center.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">A shipment identifier originally returned by the createInboundShipmentPlan operation.</param>
        /// <param name="pageType">The page type to use to print the labels. Submitting a PageType value that is not supported in your marketplace returns an error.</param>
        /// <param name="labelType">The type of labels requested. </param>
        /// <param name="numberOfPackages">The number of packages in the shipment. (optional)</param>
        /// <param name="packageLabelsToPrint">A list of identifiers that specify packages for which you want package labels printed.  If you provide box content information with the [FBA Inbound Shipment Carton Information Feed](https://developer-docs.amazon.com/sp-api/docs/fulfillment-by-amazon-feed-type-values#fba-inbound-shipment-carton-information-feed), then &#x60;PackageLabelsToPrint&#x60; must match the &#x60;CartonId&#x60; values you provide through that feed. If you provide box content information with the Fulfillment Inbound API v2024-03-20, then &#x60;PackageLabelsToPrint&#x60; must match the &#x60;boxID&#x60; values from the [&#x60;listShipmentBoxes&#x60;](https://developer-docs.amazon.com/sp-api/reference/listshipmentboxes) response. If these values do not match as required, the operation returns the &#x60;IncorrectPackageIdentifier&#x60; error code. (optional)</param>
        /// <param name="numberOfPallets">The number of pallets in the shipment. This returns four identical labels for each pallet. (optional)</param>
        /// <param name="pageSize">The page size for paginating through the total packages&#39; labels. This is a required parameter for Non-Partnered LTL Shipments. Max value:1000. (optional)</param>
        /// <param name="pageStartIndex">The page start index for paginating through the total packages&#39; labels. This is a required parameter for Non-Partnered LTL Shipments. (optional)</param>
        /// <returns>Task of GetLabelsResponse</returns>
        System.Threading.Tasks.Task<GetLabelsResponse> GetLabelsAsync (string shipmentId, string pageType, string labelType, int? numberOfPackages = null, List<string>? packageLabelsToPrint = null, int? numberOfPallets = null, int? pageSize = null, int? pageStartIndex = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns package/pallet labels for faster and more accurate shipment processing at the Amazon fulfillment center.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">A shipment identifier originally returned by the createInboundShipmentPlan operation.</param>
        /// <param name="pageType">The page type to use to print the labels. Submitting a PageType value that is not supported in your marketplace returns an error.</param>
        /// <param name="labelType">The type of labels requested. </param>
        /// <param name="numberOfPackages">The number of packages in the shipment. (optional)</param>
        /// <param name="packageLabelsToPrint">A list of identifiers that specify packages for which you want package labels printed.  If you provide box content information with the [FBA Inbound Shipment Carton Information Feed](https://developer-docs.amazon.com/sp-api/docs/fulfillment-by-amazon-feed-type-values#fba-inbound-shipment-carton-information-feed), then &#x60;PackageLabelsToPrint&#x60; must match the &#x60;CartonId&#x60; values you provide through that feed. If you provide box content information with the Fulfillment Inbound API v2024-03-20, then &#x60;PackageLabelsToPrint&#x60; must match the &#x60;boxID&#x60; values from the [&#x60;listShipmentBoxes&#x60;](https://developer-docs.amazon.com/sp-api/reference/listshipmentboxes) response. If these values do not match as required, the operation returns the &#x60;IncorrectPackageIdentifier&#x60; error code. (optional)</param>
        /// <param name="numberOfPallets">The number of pallets in the shipment. This returns four identical labels for each pallet. (optional)</param>
        /// <param name="pageSize">The page size for paginating through the total packages&#39; labels. This is a required parameter for Non-Partnered LTL Shipments. Max value:1000. (optional)</param>
        /// <param name="pageStartIndex">The page start index for paginating through the total packages&#39; labels. This is a required parameter for Non-Partnered LTL Shipments. (optional)</param>
        /// <returns>Task of ApiResponse (GetLabelsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetLabelsResponse>> GetLabelsAsyncWithHttpInfo (string shipmentId, string pageType, string labelType, int? numberOfPackages = null, List<string>? packageLabelsToPrint = null, int? numberOfPallets = null, int? pageSize = null, int? pageStartIndex = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns labeling requirements and item preparation instructions to help prepare items for shipment to Amazon&#39;s fulfillment network.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipToCountryCode">The country code of the country to which the items will be shipped. Note that labeling requirements and item preparation instructions can vary by country.</param>
        /// <param name="sellerSKUList">A list of SellerSKU values. Used to identify items for which you want labeling requirements and item preparation instructions for shipment to Amazon&#39;s fulfillment network. The SellerSKU is qualified by the Seller ID, which is included with every call to the Seller Partner API.  Note: Include seller SKUs that you have used to list items on Amazon&#39;s retail website. If you include a seller SKU that you have never used to list an item on Amazon&#39;s retail website, the seller SKU is returned in the InvalidSKUList property in the response. (optional)</param>
        /// <param name="aSINList">A list of ASIN values. Used to identify items for which you want item preparation instructions to help with item sourcing decisions.  Note: ASINs must be included in the product catalog for at least one of the marketplaces that the seller  participates in. Any ASIN that is not included in the product catalog for at least one of the marketplaces that the seller participates in is returned in the InvalidASINList property in the response. You can find out which marketplaces a seller participates in by calling the getMarketplaceParticipations operation in the Selling Partner API for Sellers. (optional)</param>
        /// <returns>Task of GetPrepInstructionsResponse</returns>
        System.Threading.Tasks.Task<GetPrepInstructionsResponse> GetPrepInstructionsAsync (string shipToCountryCode, List<string>? sellerSKUList = null, List<string>? aSINList = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns labeling requirements and item preparation instructions to help prepare items for shipment to Amazon&#39;s fulfillment network.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipToCountryCode">The country code of the country to which the items will be shipped. Note that labeling requirements and item preparation instructions can vary by country.</param>
        /// <param name="sellerSKUList">A list of SellerSKU values. Used to identify items for which you want labeling requirements and item preparation instructions for shipment to Amazon&#39;s fulfillment network. The SellerSKU is qualified by the Seller ID, which is included with every call to the Seller Partner API.  Note: Include seller SKUs that you have used to list items on Amazon&#39;s retail website. If you include a seller SKU that you have never used to list an item on Amazon&#39;s retail website, the seller SKU is returned in the InvalidSKUList property in the response. (optional)</param>
        /// <param name="aSINList">A list of ASIN values. Used to identify items for which you want item preparation instructions to help with item sourcing decisions.  Note: ASINs must be included in the product catalog for at least one of the marketplaces that the seller  participates in. Any ASIN that is not included in the product catalog for at least one of the marketplaces that the seller participates in is returned in the InvalidASINList property in the response. You can find out which marketplaces a seller participates in by calling the getMarketplaceParticipations operation in the Selling Partner API for Sellers. (optional)</param>
        /// <returns>Task of ApiResponse (GetPrepInstructionsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetPrepInstructionsResponse>> GetPrepInstructionsAsyncWithHttpInfo (string shipToCountryCode, List<string>? sellerSKUList = null, List<string>? aSINList = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of items in a specified inbound shipment, or a list of items that were updated within a specified time frame.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queryType">Indicates whether items are returned using a date range (by providing the LastUpdatedAfter and LastUpdatedBefore parameters), or using NextToken, which continues returning items specified in a previous request.</param>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace where the product would be stored.</param>
        /// <param name="lastUpdatedAfter">A date used for selecting inbound shipment items that were last updated after (or at) a specified time. The selection includes updates made by Amazon and by the seller. (optional)</param>
        /// <param name="lastUpdatedBefore">A date used for selecting inbound shipment items that were last updated before (or at) a specified time. The selection includes updates made by Amazon and by the seller. (optional)</param>
        /// <param name="nextToken">A string token returned in the response to your previous request. (optional)</param>
        /// <returns>Task of GetShipmentItemsResponse</returns>
        System.Threading.Tasks.Task<GetShipmentItemsResponse> GetShipmentItemsAsync (string queryType, string marketplaceId, DateTime? lastUpdatedAfter = null, DateTime? lastUpdatedBefore = null, string? nextToken = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of items in a specified inbound shipment, or a list of items that were updated within a specified time frame.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queryType">Indicates whether items are returned using a date range (by providing the LastUpdatedAfter and LastUpdatedBefore parameters), or using NextToken, which continues returning items specified in a previous request.</param>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace where the product would be stored.</param>
        /// <param name="lastUpdatedAfter">A date used for selecting inbound shipment items that were last updated after (or at) a specified time. The selection includes updates made by Amazon and by the seller. (optional)</param>
        /// <param name="lastUpdatedBefore">A date used for selecting inbound shipment items that were last updated before (or at) a specified time. The selection includes updates made by Amazon and by the seller. (optional)</param>
        /// <param name="nextToken">A string token returned in the response to your previous request. (optional)</param>
        /// <returns>Task of ApiResponse (GetShipmentItemsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetShipmentItemsResponse>> GetShipmentItemsAsyncWithHttpInfo (string queryType, string marketplaceId, DateTime? lastUpdatedAfter = null, DateTime? lastUpdatedBefore = null, string? nextToken = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of items in a specified inbound shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">A shipment identifier used for selecting items in a specific inbound shipment.</param>
        /// <param name="marketplaceId">Deprecated. Do not use. (optional)</param>
        /// <returns>Task of GetShipmentItemsResponse</returns>
        System.Threading.Tasks.Task<GetShipmentItemsResponse> GetShipmentItemsByShipmentIdAsync (string shipmentId, string? marketplaceId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of items in a specified inbound shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">A shipment identifier used for selecting items in a specific inbound shipment.</param>
        /// <param name="marketplaceId">Deprecated. Do not use. (optional)</param>
        /// <returns>Task of ApiResponse (GetShipmentItemsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetShipmentItemsResponse>> GetShipmentItemsByShipmentIdAsyncWithHttpInfo (string shipmentId, string? marketplaceId = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of inbound shipments based on criteria that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queryType">Indicates whether shipments are returned using shipment information (by providing the ShipmentStatusList or ShipmentIdList parameters), using a date range (by providing the LastUpdatedAfter and LastUpdatedBefore parameters), or by using NextToken to continue returning items specified in a previous request.</param>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace where the product would be stored.</param>
        /// <param name="shipmentStatusList">A list of ShipmentStatus values. Used to select shipments with a current status that matches the status values that you specify. (optional)</param>
        /// <param name="shipmentIdList">A list of shipment IDs used to select the shipments that you want. If both ShipmentStatusList and ShipmentIdList are specified, only shipments that match both parameters are returned. (optional)</param>
        /// <param name="lastUpdatedAfter">A date used for selecting inbound shipments that were last updated after (or at) a specified time. The selection includes updates made by Amazon and by the seller. (optional)</param>
        /// <param name="lastUpdatedBefore">A date used for selecting inbound shipments that were last updated before (or at) a specified time. The selection includes updates made by Amazon and by the seller. (optional)</param>
        /// <param name="nextToken">A string token returned in the response to your previous request. (optional)</param>
        /// <returns>Task of GetShipmentsResponse</returns>
        System.Threading.Tasks.Task<GetShipmentsResponse> GetShipmentsAsync (string queryType, string marketplaceId, List<string>? shipmentStatusList = null, List<string>? shipmentIdList = null, DateTime? lastUpdatedAfter = null, DateTime? lastUpdatedBefore = null, string? nextToken = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of inbound shipments based on criteria that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </remarks>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queryType">Indicates whether shipments are returned using shipment information (by providing the ShipmentStatusList or ShipmentIdList parameters), using a date range (by providing the LastUpdatedAfter and LastUpdatedBefore parameters), or by using NextToken to continue returning items specified in a previous request.</param>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace where the product would be stored.</param>
        /// <param name="shipmentStatusList">A list of ShipmentStatus values. Used to select shipments with a current status that matches the status values that you specify. (optional)</param>
        /// <param name="shipmentIdList">A list of shipment IDs used to select the shipments that you want. If both ShipmentStatusList and ShipmentIdList are specified, only shipments that match both parameters are returned. (optional)</param>
        /// <param name="lastUpdatedAfter">A date used for selecting inbound shipments that were last updated after (or at) a specified time. The selection includes updates made by Amazon and by the seller. (optional)</param>
        /// <param name="lastUpdatedBefore">A date used for selecting inbound shipments that were last updated before (or at) a specified time. The selection includes updates made by Amazon and by the seller. (optional)</param>
        /// <param name="nextToken">A string token returned in the response to your previous request. (optional)</param>
        /// <returns>Task of ApiResponse (GetShipmentsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetShipmentsResponse>> GetShipmentsAsyncWithHttpInfo (string queryType, string marketplaceId, List<string>? shipmentStatusList = null, List<string>? shipmentIdList = null, DateTime? lastUpdatedAfter = null, DateTime? lastUpdatedBefore = null, string? nextToken = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class FbaInboundApi : IFbaInboundApi
    {
        private software.amzn.spapi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="FbaInboundApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public FbaInboundApi(software.amzn.spapi.Client.Configuration configuration)
        {
            this.Configuration = configuration;
            ExceptionFactory = software.amzn.spapi.Client.Configuration.DefaultExceptionFactory;
        }

        IReadableConfiguration IApiAccessor.Configuration 
        {
            get => Configuration;  // Implicit upcast to interface
            set => Configuration = (software.amzn.spapi.Client.Configuration)value;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.Options.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public software.amzn.spapi.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public software.amzn.spapi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  Returns a bill of lading for a Less Than Truckload/Full Truckload (LTL/FTL) shipment. The getBillOfLading operation returns PDF document data for printing a bill of lading for an Amazon-partnered Less Than Truckload/Full Truckload (LTL/FTL) inbound shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">A shipment identifier originally returned by the createInboundShipmentPlan operation.</param>
        /// <returns>GetBillOfLadingResponse</returns>
        public GetBillOfLadingResponse GetBillOfLading (string shipmentId)
        {
             ApiResponse<GetBillOfLadingResponse> localVarResponse = GetBillOfLadingWithHttpInfo(shipmentId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a bill of lading for a Less Than Truckload/Full Truckload (LTL/FTL) shipment. The getBillOfLading operation returns PDF document data for printing a bill of lading for an Amazon-partnered Less Than Truckload/Full Truckload (LTL/FTL) inbound shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">A shipment identifier originally returned by the createInboundShipmentPlan operation.</param>
        /// <returns>ApiResponse of GetBillOfLadingResponse</returns>
        public ApiResponse< GetBillOfLadingResponse > GetBillOfLadingWithHttpInfo (string shipmentId)
        {
            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
                throw new ApiException(400, "Missing required parameter 'shipmentId' when calling FbaInboundApi->GetBillOfLading");

            var localVarPath = "/fba/inbound/v0/shipments/{shipmentId}/billOfLading";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shipmentId != null) localVarPathParams.Add("shipmentId", this.Configuration.ApiClient.ParameterToString(shipmentId)); // path parameter


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath, ChangeHttpMethod("GET"), localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams, localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBillOfLading", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetBillOfLadingResponse>(localVarResponse.StatusCode,
                ConvertHeadersToMultimap(localVarResponse),
                (GetBillOfLadingResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetBillOfLadingResponse)));
        }

        /// <summary>
        ///  Returns a bill of lading for a Less Than Truckload/Full Truckload (LTL/FTL) shipment. The getBillOfLading operation returns PDF document data for printing a bill of lading for an Amazon-partnered Less Than Truckload/Full Truckload (LTL/FTL) inbound shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">A shipment identifier originally returned by the createInboundShipmentPlan operation.</param>
        /// <returns>Task of GetBillOfLadingResponse</returns>
        public async System.Threading.Tasks.Task<GetBillOfLadingResponse> GetBillOfLadingAsync (string shipmentId)
        {
             ApiResponse<GetBillOfLadingResponse> localVarResponse = await GetBillOfLadingAsyncWithHttpInfo(shipmentId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns a bill of lading for a Less Than Truckload/Full Truckload (LTL/FTL) shipment. The getBillOfLading operation returns PDF document data for printing a bill of lading for an Amazon-partnered Less Than Truckload/Full Truckload (LTL/FTL) inbound shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">A shipment identifier originally returned by the createInboundShipmentPlan operation.</param>
        /// <returns>Task of ApiResponse (GetBillOfLadingResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetBillOfLadingResponse>> GetBillOfLadingAsyncWithHttpInfo (string shipmentId)
        {
            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
                throw new ApiException(400, "Missing required parameter 'shipmentId' when calling FbaInboundApi->GetBillOfLading");

            var localVarPath = "/fba/inbound/v0/shipments/{shipmentId}/billOfLading";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shipmentId != null) localVarPathParams.Add("shipmentId", this.Configuration.ApiClient.ParameterToString(shipmentId)); // path parameter


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath, ChangeHttpMethod("GET"), localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams, localVarPathParams, localVarHttpContentType);
            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBillOfLading", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetBillOfLadingResponse>(localVarResponse.StatusCode,
                ConvertHeadersToMultimap(localVarResponse),
                (GetBillOfLadingResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetBillOfLadingResponse)));
        }

        /// <summary>
        ///  Returns package/pallet labels for faster and more accurate shipment processing at the Amazon fulfillment center.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">A shipment identifier originally returned by the createInboundShipmentPlan operation.</param>
        /// <param name="pageType">The page type to use to print the labels. Submitting a PageType value that is not supported in your marketplace returns an error.</param>
        /// <param name="labelType">The type of labels requested. </param>
        /// <param name="numberOfPackages">The number of packages in the shipment. (optional)</param>
        /// <param name="packageLabelsToPrint">A list of identifiers that specify packages for which you want package labels printed.  If you provide box content information with the [FBA Inbound Shipment Carton Information Feed](https://developer-docs.amazon.com/sp-api/docs/fulfillment-by-amazon-feed-type-values#fba-inbound-shipment-carton-information-feed), then &#x60;PackageLabelsToPrint&#x60; must match the &#x60;CartonId&#x60; values you provide through that feed. If you provide box content information with the Fulfillment Inbound API v2024-03-20, then &#x60;PackageLabelsToPrint&#x60; must match the &#x60;boxID&#x60; values from the [&#x60;listShipmentBoxes&#x60;](https://developer-docs.amazon.com/sp-api/reference/listshipmentboxes) response. If these values do not match as required, the operation returns the &#x60;IncorrectPackageIdentifier&#x60; error code. (optional)</param>
        /// <param name="numberOfPallets">The number of pallets in the shipment. This returns four identical labels for each pallet. (optional)</param>
        /// <param name="pageSize">The page size for paginating through the total packages&#39; labels. This is a required parameter for Non-Partnered LTL Shipments. Max value:1000. (optional)</param>
        /// <param name="pageStartIndex">The page start index for paginating through the total packages&#39; labels. This is a required parameter for Non-Partnered LTL Shipments. (optional)</param>
        /// <returns>GetLabelsResponse</returns>
        public GetLabelsResponse GetLabels (string shipmentId, string pageType, string labelType, int? numberOfPackages = null, List<string>? packageLabelsToPrint = null, int? numberOfPallets = null, int? pageSize = null, int? pageStartIndex = null)
        {
             ApiResponse<GetLabelsResponse> localVarResponse = GetLabelsWithHttpInfo(shipmentId, pageType, labelType, numberOfPackages, packageLabelsToPrint, numberOfPallets, pageSize, pageStartIndex);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns package/pallet labels for faster and more accurate shipment processing at the Amazon fulfillment center.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">A shipment identifier originally returned by the createInboundShipmentPlan operation.</param>
        /// <param name="pageType">The page type to use to print the labels. Submitting a PageType value that is not supported in your marketplace returns an error.</param>
        /// <param name="labelType">The type of labels requested. </param>
        /// <param name="numberOfPackages">The number of packages in the shipment. (optional)</param>
        /// <param name="packageLabelsToPrint">A list of identifiers that specify packages for which you want package labels printed.  If you provide box content information with the [FBA Inbound Shipment Carton Information Feed](https://developer-docs.amazon.com/sp-api/docs/fulfillment-by-amazon-feed-type-values#fba-inbound-shipment-carton-information-feed), then &#x60;PackageLabelsToPrint&#x60; must match the &#x60;CartonId&#x60; values you provide through that feed. If you provide box content information with the Fulfillment Inbound API v2024-03-20, then &#x60;PackageLabelsToPrint&#x60; must match the &#x60;boxID&#x60; values from the [&#x60;listShipmentBoxes&#x60;](https://developer-docs.amazon.com/sp-api/reference/listshipmentboxes) response. If these values do not match as required, the operation returns the &#x60;IncorrectPackageIdentifier&#x60; error code. (optional)</param>
        /// <param name="numberOfPallets">The number of pallets in the shipment. This returns four identical labels for each pallet. (optional)</param>
        /// <param name="pageSize">The page size for paginating through the total packages&#39; labels. This is a required parameter for Non-Partnered LTL Shipments. Max value:1000. (optional)</param>
        /// <param name="pageStartIndex">The page start index for paginating through the total packages&#39; labels. This is a required parameter for Non-Partnered LTL Shipments. (optional)</param>
        /// <returns>ApiResponse of GetLabelsResponse</returns>
        public ApiResponse< GetLabelsResponse > GetLabelsWithHttpInfo (string shipmentId, string pageType, string labelType, int? numberOfPackages = null, List<string>? packageLabelsToPrint = null, int? numberOfPallets = null, int? pageSize = null, int? pageStartIndex = null)
        {
            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
                throw new ApiException(400, "Missing required parameter 'shipmentId' when calling FbaInboundApi->GetLabels");
            // verify the required parameter 'pageType' is set
            if (pageType == null)
                throw new ApiException(400, "Missing required parameter 'pageType' when calling FbaInboundApi->GetLabels");
            // verify the required parameter 'labelType' is set
            if (labelType == null)
                throw new ApiException(400, "Missing required parameter 'labelType' when calling FbaInboundApi->GetLabels");

            var localVarPath = "/fba/inbound/v0/shipments/{shipmentId}/labels";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shipmentId != null) localVarPathParams.Add("shipmentId", this.Configuration.ApiClient.ParameterToString(shipmentId)); // path parameter
            if (pageType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "PageType", pageType)); // query parameter
            if (labelType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "LabelType", labelType)); // query parameter
            if (numberOfPackages != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "NumberOfPackages", numberOfPackages)); // query parameter
            if (packageLabelsToPrint != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "PackageLabelsToPrint", packageLabelsToPrint)); // query parameter
            if (numberOfPallets != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "NumberOfPallets", numberOfPallets)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "PageSize", pageSize)); // query parameter
            if (pageStartIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "PageStartIndex", pageStartIndex)); // query parameter


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath, ChangeHttpMethod("GET"), localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams, localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLabels", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetLabelsResponse>(localVarResponse.StatusCode,
                ConvertHeadersToMultimap(localVarResponse),
                (GetLabelsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetLabelsResponse)));
        }

        /// <summary>
        ///  Returns package/pallet labels for faster and more accurate shipment processing at the Amazon fulfillment center.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">A shipment identifier originally returned by the createInboundShipmentPlan operation.</param>
        /// <param name="pageType">The page type to use to print the labels. Submitting a PageType value that is not supported in your marketplace returns an error.</param>
        /// <param name="labelType">The type of labels requested. </param>
        /// <param name="numberOfPackages">The number of packages in the shipment. (optional)</param>
        /// <param name="packageLabelsToPrint">A list of identifiers that specify packages for which you want package labels printed.  If you provide box content information with the [FBA Inbound Shipment Carton Information Feed](https://developer-docs.amazon.com/sp-api/docs/fulfillment-by-amazon-feed-type-values#fba-inbound-shipment-carton-information-feed), then &#x60;PackageLabelsToPrint&#x60; must match the &#x60;CartonId&#x60; values you provide through that feed. If you provide box content information with the Fulfillment Inbound API v2024-03-20, then &#x60;PackageLabelsToPrint&#x60; must match the &#x60;boxID&#x60; values from the [&#x60;listShipmentBoxes&#x60;](https://developer-docs.amazon.com/sp-api/reference/listshipmentboxes) response. If these values do not match as required, the operation returns the &#x60;IncorrectPackageIdentifier&#x60; error code. (optional)</param>
        /// <param name="numberOfPallets">The number of pallets in the shipment. This returns four identical labels for each pallet. (optional)</param>
        /// <param name="pageSize">The page size for paginating through the total packages&#39; labels. This is a required parameter for Non-Partnered LTL Shipments. Max value:1000. (optional)</param>
        /// <param name="pageStartIndex">The page start index for paginating through the total packages&#39; labels. This is a required parameter for Non-Partnered LTL Shipments. (optional)</param>
        /// <returns>Task of GetLabelsResponse</returns>
        public async System.Threading.Tasks.Task<GetLabelsResponse> GetLabelsAsync (string shipmentId, string pageType, string labelType, int? numberOfPackages = null, List<string>? packageLabelsToPrint = null, int? numberOfPallets = null, int? pageSize = null, int? pageStartIndex = null)
        {
             ApiResponse<GetLabelsResponse> localVarResponse = await GetLabelsAsyncWithHttpInfo(shipmentId, pageType, labelType, numberOfPackages, packageLabelsToPrint, numberOfPallets, pageSize, pageStartIndex);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns package/pallet labels for faster and more accurate shipment processing at the Amazon fulfillment center.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">A shipment identifier originally returned by the createInboundShipmentPlan operation.</param>
        /// <param name="pageType">The page type to use to print the labels. Submitting a PageType value that is not supported in your marketplace returns an error.</param>
        /// <param name="labelType">The type of labels requested. </param>
        /// <param name="numberOfPackages">The number of packages in the shipment. (optional)</param>
        /// <param name="packageLabelsToPrint">A list of identifiers that specify packages for which you want package labels printed.  If you provide box content information with the [FBA Inbound Shipment Carton Information Feed](https://developer-docs.amazon.com/sp-api/docs/fulfillment-by-amazon-feed-type-values#fba-inbound-shipment-carton-information-feed), then &#x60;PackageLabelsToPrint&#x60; must match the &#x60;CartonId&#x60; values you provide through that feed. If you provide box content information with the Fulfillment Inbound API v2024-03-20, then &#x60;PackageLabelsToPrint&#x60; must match the &#x60;boxID&#x60; values from the [&#x60;listShipmentBoxes&#x60;](https://developer-docs.amazon.com/sp-api/reference/listshipmentboxes) response. If these values do not match as required, the operation returns the &#x60;IncorrectPackageIdentifier&#x60; error code. (optional)</param>
        /// <param name="numberOfPallets">The number of pallets in the shipment. This returns four identical labels for each pallet. (optional)</param>
        /// <param name="pageSize">The page size for paginating through the total packages&#39; labels. This is a required parameter for Non-Partnered LTL Shipments. Max value:1000. (optional)</param>
        /// <param name="pageStartIndex">The page start index for paginating through the total packages&#39; labels. This is a required parameter for Non-Partnered LTL Shipments. (optional)</param>
        /// <returns>Task of ApiResponse (GetLabelsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetLabelsResponse>> GetLabelsAsyncWithHttpInfo (string shipmentId, string pageType, string labelType, int? numberOfPackages = null, List<string>? packageLabelsToPrint = null, int? numberOfPallets = null, int? pageSize = null, int? pageStartIndex = null)
        {
            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
                throw new ApiException(400, "Missing required parameter 'shipmentId' when calling FbaInboundApi->GetLabels");
            // verify the required parameter 'pageType' is set
            if (pageType == null)
                throw new ApiException(400, "Missing required parameter 'pageType' when calling FbaInboundApi->GetLabels");
            // verify the required parameter 'labelType' is set
            if (labelType == null)
                throw new ApiException(400, "Missing required parameter 'labelType' when calling FbaInboundApi->GetLabels");

            var localVarPath = "/fba/inbound/v0/shipments/{shipmentId}/labels";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shipmentId != null) localVarPathParams.Add("shipmentId", this.Configuration.ApiClient.ParameterToString(shipmentId)); // path parameter
            if (pageType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "PageType", pageType)); // query parameter
            if (labelType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "LabelType", labelType)); // query parameter
            if (numberOfPackages != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "NumberOfPackages", numberOfPackages)); // query parameter
            if (packageLabelsToPrint != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "PackageLabelsToPrint", packageLabelsToPrint)); // query parameter
            if (numberOfPallets != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "NumberOfPallets", numberOfPallets)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "PageSize", pageSize)); // query parameter
            if (pageStartIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "PageStartIndex", pageStartIndex)); // query parameter


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath, ChangeHttpMethod("GET"), localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams, localVarPathParams, localVarHttpContentType);
            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLabels", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetLabelsResponse>(localVarResponse.StatusCode,
                ConvertHeadersToMultimap(localVarResponse),
                (GetLabelsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetLabelsResponse)));
        }

        /// <summary>
        ///  Returns labeling requirements and item preparation instructions to help prepare items for shipment to Amazon&#39;s fulfillment network.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipToCountryCode">The country code of the country to which the items will be shipped. Note that labeling requirements and item preparation instructions can vary by country.</param>
        /// <param name="sellerSKUList">A list of SellerSKU values. Used to identify items for which you want labeling requirements and item preparation instructions for shipment to Amazon&#39;s fulfillment network. The SellerSKU is qualified by the Seller ID, which is included with every call to the Seller Partner API.  Note: Include seller SKUs that you have used to list items on Amazon&#39;s retail website. If you include a seller SKU that you have never used to list an item on Amazon&#39;s retail website, the seller SKU is returned in the InvalidSKUList property in the response. (optional)</param>
        /// <param name="aSINList">A list of ASIN values. Used to identify items for which you want item preparation instructions to help with item sourcing decisions.  Note: ASINs must be included in the product catalog for at least one of the marketplaces that the seller  participates in. Any ASIN that is not included in the product catalog for at least one of the marketplaces that the seller participates in is returned in the InvalidASINList property in the response. You can find out which marketplaces a seller participates in by calling the getMarketplaceParticipations operation in the Selling Partner API for Sellers. (optional)</param>
        /// <returns>GetPrepInstructionsResponse</returns>
        public GetPrepInstructionsResponse GetPrepInstructions (string shipToCountryCode, List<string>? sellerSKUList = null, List<string>? aSINList = null)
        {
             ApiResponse<GetPrepInstructionsResponse> localVarResponse = GetPrepInstructionsWithHttpInfo(shipToCountryCode, sellerSKUList, aSINList);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns labeling requirements and item preparation instructions to help prepare items for shipment to Amazon&#39;s fulfillment network.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipToCountryCode">The country code of the country to which the items will be shipped. Note that labeling requirements and item preparation instructions can vary by country.</param>
        /// <param name="sellerSKUList">A list of SellerSKU values. Used to identify items for which you want labeling requirements and item preparation instructions for shipment to Amazon&#39;s fulfillment network. The SellerSKU is qualified by the Seller ID, which is included with every call to the Seller Partner API.  Note: Include seller SKUs that you have used to list items on Amazon&#39;s retail website. If you include a seller SKU that you have never used to list an item on Amazon&#39;s retail website, the seller SKU is returned in the InvalidSKUList property in the response. (optional)</param>
        /// <param name="aSINList">A list of ASIN values. Used to identify items for which you want item preparation instructions to help with item sourcing decisions.  Note: ASINs must be included in the product catalog for at least one of the marketplaces that the seller  participates in. Any ASIN that is not included in the product catalog for at least one of the marketplaces that the seller participates in is returned in the InvalidASINList property in the response. You can find out which marketplaces a seller participates in by calling the getMarketplaceParticipations operation in the Selling Partner API for Sellers. (optional)</param>
        /// <returns>ApiResponse of GetPrepInstructionsResponse</returns>
        public ApiResponse< GetPrepInstructionsResponse > GetPrepInstructionsWithHttpInfo (string shipToCountryCode, List<string>? sellerSKUList = null, List<string>? aSINList = null)
        {
            // verify the required parameter 'shipToCountryCode' is set
            if (shipToCountryCode == null)
                throw new ApiException(400, "Missing required parameter 'shipToCountryCode' when calling FbaInboundApi->GetPrepInstructions");

            var localVarPath = "/fba/inbound/v0/prepInstructions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shipToCountryCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ShipToCountryCode", shipToCountryCode)); // query parameter
            if (sellerSKUList != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "SellerSKUList", sellerSKUList)); // query parameter
            if (aSINList != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "ASINList", aSINList)); // query parameter


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath, ChangeHttpMethod("GET"), localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams, localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPrepInstructions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetPrepInstructionsResponse>(localVarResponse.StatusCode,
                ConvertHeadersToMultimap(localVarResponse),
                (GetPrepInstructionsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetPrepInstructionsResponse)));
        }

        /// <summary>
        ///  Returns labeling requirements and item preparation instructions to help prepare items for shipment to Amazon&#39;s fulfillment network.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipToCountryCode">The country code of the country to which the items will be shipped. Note that labeling requirements and item preparation instructions can vary by country.</param>
        /// <param name="sellerSKUList">A list of SellerSKU values. Used to identify items for which you want labeling requirements and item preparation instructions for shipment to Amazon&#39;s fulfillment network. The SellerSKU is qualified by the Seller ID, which is included with every call to the Seller Partner API.  Note: Include seller SKUs that you have used to list items on Amazon&#39;s retail website. If you include a seller SKU that you have never used to list an item on Amazon&#39;s retail website, the seller SKU is returned in the InvalidSKUList property in the response. (optional)</param>
        /// <param name="aSINList">A list of ASIN values. Used to identify items for which you want item preparation instructions to help with item sourcing decisions.  Note: ASINs must be included in the product catalog for at least one of the marketplaces that the seller  participates in. Any ASIN that is not included in the product catalog for at least one of the marketplaces that the seller participates in is returned in the InvalidASINList property in the response. You can find out which marketplaces a seller participates in by calling the getMarketplaceParticipations operation in the Selling Partner API for Sellers. (optional)</param>
        /// <returns>Task of GetPrepInstructionsResponse</returns>
        public async System.Threading.Tasks.Task<GetPrepInstructionsResponse> GetPrepInstructionsAsync (string shipToCountryCode, List<string>? sellerSKUList = null, List<string>? aSINList = null)
        {
             ApiResponse<GetPrepInstructionsResponse> localVarResponse = await GetPrepInstructionsAsyncWithHttpInfo(shipToCountryCode, sellerSKUList, aSINList);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns labeling requirements and item preparation instructions to help prepare items for shipment to Amazon&#39;s fulfillment network.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipToCountryCode">The country code of the country to which the items will be shipped. Note that labeling requirements and item preparation instructions can vary by country.</param>
        /// <param name="sellerSKUList">A list of SellerSKU values. Used to identify items for which you want labeling requirements and item preparation instructions for shipment to Amazon&#39;s fulfillment network. The SellerSKU is qualified by the Seller ID, which is included with every call to the Seller Partner API.  Note: Include seller SKUs that you have used to list items on Amazon&#39;s retail website. If you include a seller SKU that you have never used to list an item on Amazon&#39;s retail website, the seller SKU is returned in the InvalidSKUList property in the response. (optional)</param>
        /// <param name="aSINList">A list of ASIN values. Used to identify items for which you want item preparation instructions to help with item sourcing decisions.  Note: ASINs must be included in the product catalog for at least one of the marketplaces that the seller  participates in. Any ASIN that is not included in the product catalog for at least one of the marketplaces that the seller participates in is returned in the InvalidASINList property in the response. You can find out which marketplaces a seller participates in by calling the getMarketplaceParticipations operation in the Selling Partner API for Sellers. (optional)</param>
        /// <returns>Task of ApiResponse (GetPrepInstructionsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetPrepInstructionsResponse>> GetPrepInstructionsAsyncWithHttpInfo (string shipToCountryCode, List<string>? sellerSKUList = null, List<string>? aSINList = null)
        {
            // verify the required parameter 'shipToCountryCode' is set
            if (shipToCountryCode == null)
                throw new ApiException(400, "Missing required parameter 'shipToCountryCode' when calling FbaInboundApi->GetPrepInstructions");

            var localVarPath = "/fba/inbound/v0/prepInstructions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shipToCountryCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ShipToCountryCode", shipToCountryCode)); // query parameter
            if (sellerSKUList != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "SellerSKUList", sellerSKUList)); // query parameter
            if (aSINList != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "ASINList", aSINList)); // query parameter


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath, ChangeHttpMethod("GET"), localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams, localVarPathParams, localVarHttpContentType);
            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPrepInstructions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetPrepInstructionsResponse>(localVarResponse.StatusCode,
                ConvertHeadersToMultimap(localVarResponse),
                (GetPrepInstructionsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetPrepInstructionsResponse)));
        }

        /// <summary>
        ///  Returns a list of items in a specified inbound shipment, or a list of items that were updated within a specified time frame.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queryType">Indicates whether items are returned using a date range (by providing the LastUpdatedAfter and LastUpdatedBefore parameters), or using NextToken, which continues returning items specified in a previous request.</param>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace where the product would be stored.</param>
        /// <param name="lastUpdatedAfter">A date used for selecting inbound shipment items that were last updated after (or at) a specified time. The selection includes updates made by Amazon and by the seller. (optional)</param>
        /// <param name="lastUpdatedBefore">A date used for selecting inbound shipment items that were last updated before (or at) a specified time. The selection includes updates made by Amazon and by the seller. (optional)</param>
        /// <param name="nextToken">A string token returned in the response to your previous request. (optional)</param>
        /// <returns>GetShipmentItemsResponse</returns>
        public GetShipmentItemsResponse GetShipmentItems (string queryType, string marketplaceId, DateTime? lastUpdatedAfter = null, DateTime? lastUpdatedBefore = null, string? nextToken = null)
        {
             ApiResponse<GetShipmentItemsResponse> localVarResponse = GetShipmentItemsWithHttpInfo(queryType, marketplaceId, lastUpdatedAfter, lastUpdatedBefore, nextToken);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a list of items in a specified inbound shipment, or a list of items that were updated within a specified time frame.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queryType">Indicates whether items are returned using a date range (by providing the LastUpdatedAfter and LastUpdatedBefore parameters), or using NextToken, which continues returning items specified in a previous request.</param>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace where the product would be stored.</param>
        /// <param name="lastUpdatedAfter">A date used for selecting inbound shipment items that were last updated after (or at) a specified time. The selection includes updates made by Amazon and by the seller. (optional)</param>
        /// <param name="lastUpdatedBefore">A date used for selecting inbound shipment items that were last updated before (or at) a specified time. The selection includes updates made by Amazon and by the seller. (optional)</param>
        /// <param name="nextToken">A string token returned in the response to your previous request. (optional)</param>
        /// <returns>ApiResponse of GetShipmentItemsResponse</returns>
        public ApiResponse< GetShipmentItemsResponse > GetShipmentItemsWithHttpInfo (string queryType, string marketplaceId, DateTime? lastUpdatedAfter = null, DateTime? lastUpdatedBefore = null, string? nextToken = null)
        {
            // verify the required parameter 'queryType' is set
            if (queryType == null)
                throw new ApiException(400, "Missing required parameter 'queryType' when calling FbaInboundApi->GetShipmentItems");
            // verify the required parameter 'marketplaceId' is set
            if (marketplaceId == null)
                throw new ApiException(400, "Missing required parameter 'marketplaceId' when calling FbaInboundApi->GetShipmentItems");

            var localVarPath = "/fba/inbound/v0/shipmentItems";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (lastUpdatedAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "LastUpdatedAfter", lastUpdatedAfter)); // query parameter
            if (lastUpdatedBefore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "LastUpdatedBefore", lastUpdatedBefore)); // query parameter
            if (queryType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "QueryType", queryType)); // query parameter
            if (nextToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "NextToken", nextToken)); // query parameter
            if (marketplaceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MarketplaceId", marketplaceId)); // query parameter


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath, ChangeHttpMethod("GET"), localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams, localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetShipmentItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetShipmentItemsResponse>(localVarResponse.StatusCode,
                ConvertHeadersToMultimap(localVarResponse),
                (GetShipmentItemsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetShipmentItemsResponse)));
        }

        /// <summary>
        ///  Returns a list of items in a specified inbound shipment, or a list of items that were updated within a specified time frame.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queryType">Indicates whether items are returned using a date range (by providing the LastUpdatedAfter and LastUpdatedBefore parameters), or using NextToken, which continues returning items specified in a previous request.</param>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace where the product would be stored.</param>
        /// <param name="lastUpdatedAfter">A date used for selecting inbound shipment items that were last updated after (or at) a specified time. The selection includes updates made by Amazon and by the seller. (optional)</param>
        /// <param name="lastUpdatedBefore">A date used for selecting inbound shipment items that were last updated before (or at) a specified time. The selection includes updates made by Amazon and by the seller. (optional)</param>
        /// <param name="nextToken">A string token returned in the response to your previous request. (optional)</param>
        /// <returns>Task of GetShipmentItemsResponse</returns>
        public async System.Threading.Tasks.Task<GetShipmentItemsResponse> GetShipmentItemsAsync (string queryType, string marketplaceId, DateTime? lastUpdatedAfter = null, DateTime? lastUpdatedBefore = null, string? nextToken = null)
        {
             ApiResponse<GetShipmentItemsResponse> localVarResponse = await GetShipmentItemsAsyncWithHttpInfo(queryType, marketplaceId, lastUpdatedAfter, lastUpdatedBefore, nextToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns a list of items in a specified inbound shipment, or a list of items that were updated within a specified time frame.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queryType">Indicates whether items are returned using a date range (by providing the LastUpdatedAfter and LastUpdatedBefore parameters), or using NextToken, which continues returning items specified in a previous request.</param>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace where the product would be stored.</param>
        /// <param name="lastUpdatedAfter">A date used for selecting inbound shipment items that were last updated after (or at) a specified time. The selection includes updates made by Amazon and by the seller. (optional)</param>
        /// <param name="lastUpdatedBefore">A date used for selecting inbound shipment items that were last updated before (or at) a specified time. The selection includes updates made by Amazon and by the seller. (optional)</param>
        /// <param name="nextToken">A string token returned in the response to your previous request. (optional)</param>
        /// <returns>Task of ApiResponse (GetShipmentItemsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetShipmentItemsResponse>> GetShipmentItemsAsyncWithHttpInfo (string queryType, string marketplaceId, DateTime? lastUpdatedAfter = null, DateTime? lastUpdatedBefore = null, string? nextToken = null)
        {
            // verify the required parameter 'queryType' is set
            if (queryType == null)
                throw new ApiException(400, "Missing required parameter 'queryType' when calling FbaInboundApi->GetShipmentItems");
            // verify the required parameter 'marketplaceId' is set
            if (marketplaceId == null)
                throw new ApiException(400, "Missing required parameter 'marketplaceId' when calling FbaInboundApi->GetShipmentItems");

            var localVarPath = "/fba/inbound/v0/shipmentItems";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (lastUpdatedAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "LastUpdatedAfter", lastUpdatedAfter)); // query parameter
            if (lastUpdatedBefore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "LastUpdatedBefore", lastUpdatedBefore)); // query parameter
            if (queryType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "QueryType", queryType)); // query parameter
            if (nextToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "NextToken", nextToken)); // query parameter
            if (marketplaceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MarketplaceId", marketplaceId)); // query parameter


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath, ChangeHttpMethod("GET"), localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams, localVarPathParams, localVarHttpContentType);
            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetShipmentItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetShipmentItemsResponse>(localVarResponse.StatusCode,
                ConvertHeadersToMultimap(localVarResponse),
                (GetShipmentItemsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetShipmentItemsResponse)));
        }

        /// <summary>
        ///  Returns a list of items in a specified inbound shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">A shipment identifier used for selecting items in a specific inbound shipment.</param>
        /// <param name="marketplaceId">Deprecated. Do not use. (optional)</param>
        /// <returns>GetShipmentItemsResponse</returns>
        public GetShipmentItemsResponse GetShipmentItemsByShipmentId (string shipmentId, string? marketplaceId = null)
        {
             ApiResponse<GetShipmentItemsResponse> localVarResponse = GetShipmentItemsByShipmentIdWithHttpInfo(shipmentId, marketplaceId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a list of items in a specified inbound shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">A shipment identifier used for selecting items in a specific inbound shipment.</param>
        /// <param name="marketplaceId">Deprecated. Do not use. (optional)</param>
        /// <returns>ApiResponse of GetShipmentItemsResponse</returns>
        public ApiResponse< GetShipmentItemsResponse > GetShipmentItemsByShipmentIdWithHttpInfo (string shipmentId, string? marketplaceId = null)
        {
            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
                throw new ApiException(400, "Missing required parameter 'shipmentId' when calling FbaInboundApi->GetShipmentItemsByShipmentId");

            var localVarPath = "/fba/inbound/v0/shipments/{shipmentId}/items";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shipmentId != null) localVarPathParams.Add("shipmentId", this.Configuration.ApiClient.ParameterToString(shipmentId)); // path parameter
            if (marketplaceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MarketplaceId", marketplaceId)); // query parameter


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath, ChangeHttpMethod("GET"), localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams, localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetShipmentItemsByShipmentId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetShipmentItemsResponse>(localVarResponse.StatusCode,
                ConvertHeadersToMultimap(localVarResponse),
                (GetShipmentItemsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetShipmentItemsResponse)));
        }

        /// <summary>
        ///  Returns a list of items in a specified inbound shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">A shipment identifier used for selecting items in a specific inbound shipment.</param>
        /// <param name="marketplaceId">Deprecated. Do not use. (optional)</param>
        /// <returns>Task of GetShipmentItemsResponse</returns>
        public async System.Threading.Tasks.Task<GetShipmentItemsResponse> GetShipmentItemsByShipmentIdAsync (string shipmentId, string? marketplaceId = null)
        {
             ApiResponse<GetShipmentItemsResponse> localVarResponse = await GetShipmentItemsByShipmentIdAsyncWithHttpInfo(shipmentId, marketplaceId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns a list of items in a specified inbound shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipmentId">A shipment identifier used for selecting items in a specific inbound shipment.</param>
        /// <param name="marketplaceId">Deprecated. Do not use. (optional)</param>
        /// <returns>Task of ApiResponse (GetShipmentItemsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetShipmentItemsResponse>> GetShipmentItemsByShipmentIdAsyncWithHttpInfo (string shipmentId, string? marketplaceId = null)
        {
            // verify the required parameter 'shipmentId' is set
            if (shipmentId == null)
                throw new ApiException(400, "Missing required parameter 'shipmentId' when calling FbaInboundApi->GetShipmentItemsByShipmentId");

            var localVarPath = "/fba/inbound/v0/shipments/{shipmentId}/items";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shipmentId != null) localVarPathParams.Add("shipmentId", this.Configuration.ApiClient.ParameterToString(shipmentId)); // path parameter
            if (marketplaceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MarketplaceId", marketplaceId)); // query parameter


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath, ChangeHttpMethod("GET"), localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams, localVarPathParams, localVarHttpContentType);
            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetShipmentItemsByShipmentId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetShipmentItemsResponse>(localVarResponse.StatusCode,
                ConvertHeadersToMultimap(localVarResponse),
                (GetShipmentItemsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetShipmentItemsResponse)));
        }

        /// <summary>
        ///  Returns a list of inbound shipments based on criteria that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queryType">Indicates whether shipments are returned using shipment information (by providing the ShipmentStatusList or ShipmentIdList parameters), using a date range (by providing the LastUpdatedAfter and LastUpdatedBefore parameters), or by using NextToken to continue returning items specified in a previous request.</param>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace where the product would be stored.</param>
        /// <param name="shipmentStatusList">A list of ShipmentStatus values. Used to select shipments with a current status that matches the status values that you specify. (optional)</param>
        /// <param name="shipmentIdList">A list of shipment IDs used to select the shipments that you want. If both ShipmentStatusList and ShipmentIdList are specified, only shipments that match both parameters are returned. (optional)</param>
        /// <param name="lastUpdatedAfter">A date used for selecting inbound shipments that were last updated after (or at) a specified time. The selection includes updates made by Amazon and by the seller. (optional)</param>
        /// <param name="lastUpdatedBefore">A date used for selecting inbound shipments that were last updated before (or at) a specified time. The selection includes updates made by Amazon and by the seller. (optional)</param>
        /// <param name="nextToken">A string token returned in the response to your previous request. (optional)</param>
        /// <returns>GetShipmentsResponse</returns>
        public GetShipmentsResponse GetShipments (string queryType, string marketplaceId, List<string>? shipmentStatusList = null, List<string>? shipmentIdList = null, DateTime? lastUpdatedAfter = null, DateTime? lastUpdatedBefore = null, string? nextToken = null)
        {
             ApiResponse<GetShipmentsResponse> localVarResponse = GetShipmentsWithHttpInfo(queryType, marketplaceId, shipmentStatusList, shipmentIdList, lastUpdatedAfter, lastUpdatedBefore, nextToken);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a list of inbound shipments based on criteria that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queryType">Indicates whether shipments are returned using shipment information (by providing the ShipmentStatusList or ShipmentIdList parameters), using a date range (by providing the LastUpdatedAfter and LastUpdatedBefore parameters), or by using NextToken to continue returning items specified in a previous request.</param>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace where the product would be stored.</param>
        /// <param name="shipmentStatusList">A list of ShipmentStatus values. Used to select shipments with a current status that matches the status values that you specify. (optional)</param>
        /// <param name="shipmentIdList">A list of shipment IDs used to select the shipments that you want. If both ShipmentStatusList and ShipmentIdList are specified, only shipments that match both parameters are returned. (optional)</param>
        /// <param name="lastUpdatedAfter">A date used for selecting inbound shipments that were last updated after (or at) a specified time. The selection includes updates made by Amazon and by the seller. (optional)</param>
        /// <param name="lastUpdatedBefore">A date used for selecting inbound shipments that were last updated before (or at) a specified time. The selection includes updates made by Amazon and by the seller. (optional)</param>
        /// <param name="nextToken">A string token returned in the response to your previous request. (optional)</param>
        /// <returns>ApiResponse of GetShipmentsResponse</returns>
        public ApiResponse< GetShipmentsResponse > GetShipmentsWithHttpInfo (string queryType, string marketplaceId, List<string>? shipmentStatusList = null, List<string>? shipmentIdList = null, DateTime? lastUpdatedAfter = null, DateTime? lastUpdatedBefore = null, string? nextToken = null)
        {
            // verify the required parameter 'queryType' is set
            if (queryType == null)
                throw new ApiException(400, "Missing required parameter 'queryType' when calling FbaInboundApi->GetShipments");
            // verify the required parameter 'marketplaceId' is set
            if (marketplaceId == null)
                throw new ApiException(400, "Missing required parameter 'marketplaceId' when calling FbaInboundApi->GetShipments");

            var localVarPath = "/fba/inbound/v0/shipments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shipmentStatusList != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "ShipmentStatusList", shipmentStatusList)); // query parameter
            if (shipmentIdList != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "ShipmentIdList", shipmentIdList)); // query parameter
            if (lastUpdatedAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "LastUpdatedAfter", lastUpdatedAfter)); // query parameter
            if (lastUpdatedBefore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "LastUpdatedBefore", lastUpdatedBefore)); // query parameter
            if (queryType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "QueryType", queryType)); // query parameter
            if (nextToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "NextToken", nextToken)); // query parameter
            if (marketplaceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MarketplaceId", marketplaceId)); // query parameter


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath, ChangeHttpMethod("GET"), localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams, localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetShipments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetShipmentsResponse>(localVarResponse.StatusCode,
                ConvertHeadersToMultimap(localVarResponse),
                (GetShipmentsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetShipmentsResponse)));
        }

        /// <summary>
        ///  Returns a list of inbound shipments based on criteria that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queryType">Indicates whether shipments are returned using shipment information (by providing the ShipmentStatusList or ShipmentIdList parameters), using a date range (by providing the LastUpdatedAfter and LastUpdatedBefore parameters), or by using NextToken to continue returning items specified in a previous request.</param>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace where the product would be stored.</param>
        /// <param name="shipmentStatusList">A list of ShipmentStatus values. Used to select shipments with a current status that matches the status values that you specify. (optional)</param>
        /// <param name="shipmentIdList">A list of shipment IDs used to select the shipments that you want. If both ShipmentStatusList and ShipmentIdList are specified, only shipments that match both parameters are returned. (optional)</param>
        /// <param name="lastUpdatedAfter">A date used for selecting inbound shipments that were last updated after (or at) a specified time. The selection includes updates made by Amazon and by the seller. (optional)</param>
        /// <param name="lastUpdatedBefore">A date used for selecting inbound shipments that were last updated before (or at) a specified time. The selection includes updates made by Amazon and by the seller. (optional)</param>
        /// <param name="nextToken">A string token returned in the response to your previous request. (optional)</param>
        /// <returns>Task of GetShipmentsResponse</returns>
        public async System.Threading.Tasks.Task<GetShipmentsResponse> GetShipmentsAsync (string queryType, string marketplaceId, List<string>? shipmentStatusList = null, List<string>? shipmentIdList = null, DateTime? lastUpdatedAfter = null, DateTime? lastUpdatedBefore = null, string? nextToken = null)
        {
             ApiResponse<GetShipmentsResponse> localVarResponse = await GetShipmentsAsyncWithHttpInfo(queryType, marketplaceId, shipmentStatusList, shipmentIdList, lastUpdatedAfter, lastUpdatedBefore, nextToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns a list of inbound shipments based on criteria that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | - -- - | - -- - | | 2 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
        /// </summary>
        /// <exception cref="software.amzn.spapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queryType">Indicates whether shipments are returned using shipment information (by providing the ShipmentStatusList or ShipmentIdList parameters), using a date range (by providing the LastUpdatedAfter and LastUpdatedBefore parameters), or by using NextToken to continue returning items specified in a previous request.</param>
        /// <param name="marketplaceId">A marketplace identifier. Specifies the marketplace where the product would be stored.</param>
        /// <param name="shipmentStatusList">A list of ShipmentStatus values. Used to select shipments with a current status that matches the status values that you specify. (optional)</param>
        /// <param name="shipmentIdList">A list of shipment IDs used to select the shipments that you want. If both ShipmentStatusList and ShipmentIdList are specified, only shipments that match both parameters are returned. (optional)</param>
        /// <param name="lastUpdatedAfter">A date used for selecting inbound shipments that were last updated after (or at) a specified time. The selection includes updates made by Amazon and by the seller. (optional)</param>
        /// <param name="lastUpdatedBefore">A date used for selecting inbound shipments that were last updated before (or at) a specified time. The selection includes updates made by Amazon and by the seller. (optional)</param>
        /// <param name="nextToken">A string token returned in the response to your previous request. (optional)</param>
        /// <returns>Task of ApiResponse (GetShipmentsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetShipmentsResponse>> GetShipmentsAsyncWithHttpInfo (string queryType, string marketplaceId, List<string>? shipmentStatusList = null, List<string>? shipmentIdList = null, DateTime? lastUpdatedAfter = null, DateTime? lastUpdatedBefore = null, string? nextToken = null)
        {
            // verify the required parameter 'queryType' is set
            if (queryType == null)
                throw new ApiException(400, "Missing required parameter 'queryType' when calling FbaInboundApi->GetShipments");
            // verify the required parameter 'marketplaceId' is set
            if (marketplaceId == null)
                throw new ApiException(400, "Missing required parameter 'marketplaceId' when calling FbaInboundApi->GetShipments");

            var localVarPath = "/fba/inbound/v0/shipments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shipmentStatusList != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "ShipmentStatusList", shipmentStatusList)); // query parameter
            if (shipmentIdList != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "ShipmentIdList", shipmentIdList)); // query parameter
            if (lastUpdatedAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "LastUpdatedAfter", lastUpdatedAfter)); // query parameter
            if (lastUpdatedBefore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "LastUpdatedBefore", lastUpdatedBefore)); // query parameter
            if (queryType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "QueryType", queryType)); // query parameter
            if (nextToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "NextToken", nextToken)); // query parameter
            if (marketplaceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "MarketplaceId", marketplaceId)); // query parameter


            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath, ChangeHttpMethod("GET"), localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams, localVarPathParams, localVarHttpContentType);
            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetShipments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetShipmentsResponse>(localVarResponse.StatusCode,
                ConvertHeadersToMultimap(localVarResponse),
                (GetShipmentsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetShipmentsResponse)));
        }


        public class Builder
        {
            private LWAAuthorizationCredentials lwaAuthorizationCredentials;
            private RateLimitConfiguration rateLimitConfiguration;

            public Builder SetLWAAuthorizationCredentials(LWAAuthorizationCredentials lwaAuthorizationCredentials)
            {
                this.lwaAuthorizationCredentials = lwaAuthorizationCredentials;
                return this;
            }
            
            
            public Builder SetRateLimitConfiguration(RateLimitConfiguration rateLimitConfiguration)
            {
                this.rateLimitConfiguration = rateLimitConfiguration;
                return this;
            }

            public FbaInboundApi Build() 
            {
                if (lwaAuthorizationCredentials == null) 
                {
                    throw new NullReferenceException("LWAAuthoriztionCredentials not set");
                }

                
                software.amzn.spapi.Client.Configuration configuration = new software.amzn.spapi.Client.Configuration()
                {
                    AuthorizationCredentials = lwaAuthorizationCredentials,
                    RateLimitConfig = rateLimitConfiguration
                };

                // default HTTP connection timeout (in milliseconds)
                configuration.initializeApiClient();
                configuration.Timeout = 100000;

                return new FbaInboundApi(configuration);
            }
        }
        
        private static Multimap<string, string> ConvertHeadersToMultimap(RestResponse response)
        {
            var multimap = new Multimap<string, string>();
            foreach (var header in response.Headers)
            {
                multimap.Add(header.Name, header.Value?.ToString());
            }
            return multimap;
        }


        private static RestSharp.Method ChangeHttpMethod(String httpMethod) {
            switch(httpMethod) {
                case "GET":
                    // GET logic
                    return Method.Get;
                case "POST":
                    // POST logic
                    return Method.Post;
                case "DELETE":
                    return Method.Delete;
                case "PUT":
                    return Method.Put;
                case "PATCH":
                    return Method.Patch;
                case "OPTIONS":
                    return Method.Options;
            }
            return Method.Head;
        }

    }
}
