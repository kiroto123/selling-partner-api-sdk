/*
 * The Selling Partner API for CustomerFeedback
 *
 * The Selling Partner API for Customer Feedback (Customer Feedback API) provides information about customer reviews and returns at both the item and browse node level.
 *
 * The version of the OpenAPI document: 2024-06-01
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.customerFeedback.v2024_06_01
{
    /// <summary>
    /// The trend of return topic metrics for all items in the requested browse node.
    /// </summary>
    [DataContract(Name = "BrowseNodeReturnTrend")]
    public partial class BrowseNodeReturnTrend : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BrowseNodeReturnTrend" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BrowseNodeReturnTrend() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BrowseNodeReturnTrend" /> class.
        /// </summary>
        /// <param name="topic">The name of the topic. (required).</param>
        /// <param name="trendMetrics">The browse node return trend metrics. (required).</param>
        public BrowseNodeReturnTrend(string topic = default(string), List<BrowseNodeReturnTrendPoint> trendMetrics = default(List<BrowseNodeReturnTrendPoint>))
        {
            // to ensure "topic" is required (not null)
            if (topic == null)
            {
                throw new ArgumentNullException("topic is a required property for BrowseNodeReturnTrend and cannot be null");
            }
            this.Topic = topic;
            // to ensure "trendMetrics" is required (not null)
            if (trendMetrics == null)
            {
                throw new ArgumentNullException("trendMetrics is a required property for BrowseNodeReturnTrend and cannot be null");
            }
            this.TrendMetrics = trendMetrics;
        }

        /// <summary>
        /// The name of the topic.
        /// </summary>
        /// <value>The name of the topic.</value>
        [DataMember(Name = "topic", IsRequired = true, EmitDefaultValue = true)]
        public string Topic { get; set; }

        /// <summary>
        /// The browse node return trend metrics.
        /// </summary>
        /// <value>The browse node return trend metrics.</value>
        [DataMember(Name = "trendMetrics", IsRequired = true, EmitDefaultValue = true)]
        public List<BrowseNodeReturnTrendPoint> TrendMetrics { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BrowseNodeReturnTrend {\n");
            sb.Append("  Topic: ").Append(Topic).Append("\n");
            sb.Append("  TrendMetrics: ").Append(TrendMetrics).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
