/*
 * The Selling Partner API for CustomerFeedback
 *
 * The Selling Partner API for Customer Feedback (Customer Feedback API) provides information about customer reviews and returns at both the item and browse node level.
 *
 * The version of the OpenAPI document: 2024-06-01
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.customerFeedback.v2024_06_01
{
    /// <summary>
    /// Details of the subtopic for an item review topic.
    /// </summary>
    [DataContract(Name = "ItemReviewSubtopic")]
    public partial class ItemReviewSubtopic : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ItemReviewSubtopic" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ItemReviewSubtopic() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ItemReviewSubtopic" /> class.
        /// </summary>
        /// <param name="subtopic">The name of the subtopic. (required).</param>
        /// <param name="metrics">metrics (required).</param>
        /// <param name="reviewSnippets">A list of up to three snippets from reviews that contain the subtopic. This value is &#x60;null&#x60; if there aren&#39;t enough review snippets for the subtopic..</param>
        public ItemReviewSubtopic(string subtopic = default(string), ItemReviewSubtopicMetrics metrics = default(ItemReviewSubtopicMetrics), List<string> reviewSnippets = default(List<string>))
        {
            // to ensure "subtopic" is required (not null)
            if (subtopic == null)
            {
                throw new ArgumentNullException("subtopic is a required property for ItemReviewSubtopic and cannot be null");
            }
            this.Subtopic = subtopic;
            // to ensure "metrics" is required (not null)
            if (metrics == null)
            {
                throw new ArgumentNullException("metrics is a required property for ItemReviewSubtopic and cannot be null");
            }
            this.Metrics = metrics;
            this.ReviewSnippets = reviewSnippets;
        }

        /// <summary>
        /// The name of the subtopic.
        /// </summary>
        /// <value>The name of the subtopic.</value>
        [DataMember(Name = "subtopic", IsRequired = true, EmitDefaultValue = true)]
        public string Subtopic { get; set; }

        /// <summary>
        /// Gets or Sets Metrics
        /// </summary>
        [DataMember(Name = "metrics", IsRequired = true, EmitDefaultValue = true)]
        public ItemReviewSubtopicMetrics Metrics { get; set; }

        /// <summary>
        /// A list of up to three snippets from reviews that contain the subtopic. This value is &#x60;null&#x60; if there aren&#39;t enough review snippets for the subtopic.
        /// </summary>
        /// <value>A list of up to three snippets from reviews that contain the subtopic. This value is &#x60;null&#x60; if there aren&#39;t enough review snippets for the subtopic.</value>
        [DataMember(Name = "reviewSnippets", EmitDefaultValue = false)]
        public List<string> ReviewSnippets { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ItemReviewSubtopic {\n");
            sb.Append("  Subtopic: ").Append(Subtopic).Append("\n");
            sb.Append("  Metrics: ").Append(Metrics).Append("\n");
            sb.Append("  ReviewSnippets: ").Append(ReviewSnippets).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
