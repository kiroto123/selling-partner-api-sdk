/*
 * The Selling Partner API for CustomerFeedback
 *
 * The Selling Partner API for Customer Feedback (Customer Feedback API) provides information about customer reviews and returns at both the item and browse node level.
 *
 * The version of the OpenAPI document: 2024-06-01
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.customerFeedback.v2024_06_01
{
    /// <summary>
    /// The response for the &#x60;getItemReviewTopics&#x60; operation.
    /// </summary>
    [DataContract(Name = "ItemReviewTopicsResponse")]
    public partial class ItemReviewTopicsResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ItemReviewTopicsResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ItemReviewTopicsResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ItemReviewTopicsResponse" /> class.
        /// </summary>
        /// <param name="asin">The requested ASIN. The Amazon Standard Identification Number (ASIN) is the unique identifier of a product within a marketplace. (required).</param>
        /// <param name="itemName">The product title of the requested ASIN. (required).</param>
        /// <param name="marketplaceId">The requested marketplace id. (required).</param>
        /// <param name="countryCode">The two digit country code of the requested marketplace id, in ISO 3166-1 alpha-2 format. (required).</param>
        /// <param name="dateRange">dateRange (required).</param>
        /// <param name="topics">topics (required).</param>
        public ItemReviewTopicsResponse(string asin = default(string), string itemName = default(string), string marketplaceId = default(string), string countryCode = default(string), DateRange dateRange = default(DateRange), ItemReviewTopics topics = default(ItemReviewTopics))
        {
            // to ensure "asin" is required (not null)
            if (asin == null)
            {
                throw new ArgumentNullException("asin is a required property for ItemReviewTopicsResponse and cannot be null");
            }
            this.Asin = asin;
            // to ensure "itemName" is required (not null)
            if (itemName == null)
            {
                throw new ArgumentNullException("itemName is a required property for ItemReviewTopicsResponse and cannot be null");
            }
            this.ItemName = itemName;
            // to ensure "marketplaceId" is required (not null)
            if (marketplaceId == null)
            {
                throw new ArgumentNullException("marketplaceId is a required property for ItemReviewTopicsResponse and cannot be null");
            }
            this.MarketplaceId = marketplaceId;
            // to ensure "countryCode" is required (not null)
            if (countryCode == null)
            {
                throw new ArgumentNullException("countryCode is a required property for ItemReviewTopicsResponse and cannot be null");
            }
            this.CountryCode = countryCode;
            // to ensure "dateRange" is required (not null)
            if (dateRange == null)
            {
                throw new ArgumentNullException("dateRange is a required property for ItemReviewTopicsResponse and cannot be null");
            }
            this.DateRange = dateRange;
            // to ensure "topics" is required (not null)
            if (topics == null)
            {
                throw new ArgumentNullException("topics is a required property for ItemReviewTopicsResponse and cannot be null");
            }
            this.Topics = topics;
        }

        /// <summary>
        /// The requested ASIN. The Amazon Standard Identification Number (ASIN) is the unique identifier of a product within a marketplace.
        /// </summary>
        /// <value>The requested ASIN. The Amazon Standard Identification Number (ASIN) is the unique identifier of a product within a marketplace.</value>
        [DataMember(Name = "asin", IsRequired = true, EmitDefaultValue = true)]
        public string Asin { get; set; }

        /// <summary>
        /// The product title of the requested ASIN.
        /// </summary>
        /// <value>The product title of the requested ASIN.</value>
        [DataMember(Name = "itemName", IsRequired = true, EmitDefaultValue = true)]
        public string ItemName { get; set; }

        /// <summary>
        /// The requested marketplace id.
        /// </summary>
        /// <value>The requested marketplace id.</value>
        [DataMember(Name = "marketplaceId", IsRequired = true, EmitDefaultValue = true)]
        public string MarketplaceId { get; set; }

        /// <summary>
        /// The two digit country code of the requested marketplace id, in ISO 3166-1 alpha-2 format.
        /// </summary>
        /// <value>The two digit country code of the requested marketplace id, in ISO 3166-1 alpha-2 format.</value>
        [DataMember(Name = "countryCode", IsRequired = true, EmitDefaultValue = true)]
        public string CountryCode { get; set; }

        /// <summary>
        /// Gets or Sets DateRange
        /// </summary>
        [DataMember(Name = "dateRange", IsRequired = true, EmitDefaultValue = true)]
        public DateRange DateRange { get; set; }

        /// <summary>
        /// Gets or Sets Topics
        /// </summary>
        [DataMember(Name = "topics", IsRequired = true, EmitDefaultValue = true)]
        public ItemReviewTopics Topics { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ItemReviewTopicsResponse {\n");
            sb.Append("  Asin: ").Append(Asin).Append("\n");
            sb.Append("  ItemName: ").Append(ItemName).Append("\n");
            sb.Append("  MarketplaceId: ").Append(MarketplaceId).Append("\n");
            sb.Append("  CountryCode: ").Append(CountryCode).Append("\n");
            sb.Append("  DateRange: ").Append(DateRange).Append("\n");
            sb.Append("  Topics: ").Append(Topics).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
