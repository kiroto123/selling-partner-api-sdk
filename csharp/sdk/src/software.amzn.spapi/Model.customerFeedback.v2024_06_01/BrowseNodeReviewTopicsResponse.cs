/*
 * The Selling Partner API for CustomerFeedback
 *
 * The Selling Partner API for Customer Feedback (Customer Feedback API) provides information about customer reviews and returns at both the item and browse node level.
 *
 * The version of the OpenAPI document: 2024-06-01
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.customerFeedback.v2024_06_01
{
    /// <summary>
    /// The response for the &#x60;getBrowseNodeReviewTopics&#x60; operation.
    /// </summary>
    [DataContract(Name = "BrowseNodeReviewTopicsResponse")]
    public partial class BrowseNodeReviewTopicsResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BrowseNodeReviewTopicsResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BrowseNodeReviewTopicsResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BrowseNodeReviewTopicsResponse" /> class.
        /// </summary>
        /// <param name="browseNodeId">The requested browse node id. A browse node id is the unique identifier of a given browse node. (required).</param>
        /// <param name="displayName">The display name of the requested browse node id. The display name of the browse node as visible on the Amazon retail website. (required).</param>
        /// <param name="marketplaceId">The requested marketplace id. (required).</param>
        /// <param name="countryCode">The two digit country code of requested marketplace id, in ISO 3166-1 alpha-2 format. (required).</param>
        /// <param name="dateRange">dateRange (required).</param>
        /// <param name="topics">topics (required).</param>
        public BrowseNodeReviewTopicsResponse(string browseNodeId = default(string), string displayName = default(string), string marketplaceId = default(string), string countryCode = default(string), DateRange dateRange = default(DateRange), BrowseNodeReviewTopics topics = default(BrowseNodeReviewTopics))
        {
            // to ensure "browseNodeId" is required (not null)
            if (browseNodeId == null)
            {
                throw new ArgumentNullException("browseNodeId is a required property for BrowseNodeReviewTopicsResponse and cannot be null");
            }
            this.BrowseNodeId = browseNodeId;
            // to ensure "displayName" is required (not null)
            if (displayName == null)
            {
                throw new ArgumentNullException("displayName is a required property for BrowseNodeReviewTopicsResponse and cannot be null");
            }
            this.DisplayName = displayName;
            // to ensure "marketplaceId" is required (not null)
            if (marketplaceId == null)
            {
                throw new ArgumentNullException("marketplaceId is a required property for BrowseNodeReviewTopicsResponse and cannot be null");
            }
            this.MarketplaceId = marketplaceId;
            // to ensure "countryCode" is required (not null)
            if (countryCode == null)
            {
                throw new ArgumentNullException("countryCode is a required property for BrowseNodeReviewTopicsResponse and cannot be null");
            }
            this.CountryCode = countryCode;
            // to ensure "dateRange" is required (not null)
            if (dateRange == null)
            {
                throw new ArgumentNullException("dateRange is a required property for BrowseNodeReviewTopicsResponse and cannot be null");
            }
            this.DateRange = dateRange;
            // to ensure "topics" is required (not null)
            if (topics == null)
            {
                throw new ArgumentNullException("topics is a required property for BrowseNodeReviewTopicsResponse and cannot be null");
            }
            this.Topics = topics;
        }

        /// <summary>
        /// The requested browse node id. A browse node id is the unique identifier of a given browse node.
        /// </summary>
        /// <value>The requested browse node id. A browse node id is the unique identifier of a given browse node.</value>
        [DataMember(Name = "browseNodeId", IsRequired = true, EmitDefaultValue = true)]
        public string BrowseNodeId { get; set; }

        /// <summary>
        /// The display name of the requested browse node id. The display name of the browse node as visible on the Amazon retail website.
        /// </summary>
        /// <value>The display name of the requested browse node id. The display name of the browse node as visible on the Amazon retail website.</value>
        [DataMember(Name = "displayName", IsRequired = true, EmitDefaultValue = true)]
        public string DisplayName { get; set; }

        /// <summary>
        /// The requested marketplace id.
        /// </summary>
        /// <value>The requested marketplace id.</value>
        [DataMember(Name = "marketplaceId", IsRequired = true, EmitDefaultValue = true)]
        public string MarketplaceId { get; set; }

        /// <summary>
        /// The two digit country code of requested marketplace id, in ISO 3166-1 alpha-2 format.
        /// </summary>
        /// <value>The two digit country code of requested marketplace id, in ISO 3166-1 alpha-2 format.</value>
        [DataMember(Name = "countryCode", IsRequired = true, EmitDefaultValue = true)]
        public string CountryCode { get; set; }

        /// <summary>
        /// Gets or Sets DateRange
        /// </summary>
        [DataMember(Name = "dateRange", IsRequired = true, EmitDefaultValue = true)]
        public DateRange DateRange { get; set; }

        /// <summary>
        /// Gets or Sets Topics
        /// </summary>
        [DataMember(Name = "topics", IsRequired = true, EmitDefaultValue = true)]
        public BrowseNodeReviewTopics Topics { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BrowseNodeReviewTopicsResponse {\n");
            sb.Append("  BrowseNodeId: ").Append(BrowseNodeId).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  MarketplaceId: ").Append(MarketplaceId).Append("\n");
            sb.Append("  CountryCode: ").Append(CountryCode).Append("\n");
            sb.Append("  DateRange: ").Append(DateRange).Append("\n");
            sb.Append("  Topics: ").Append(Topics).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
