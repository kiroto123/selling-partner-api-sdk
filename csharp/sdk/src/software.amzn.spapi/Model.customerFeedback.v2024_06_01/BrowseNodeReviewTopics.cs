/*
 * The Selling Partner API for CustomerFeedback
 *
 * The Selling Partner API for Customer Feedback (Customer Feedback API) provides information about customer reviews and returns at both the item and browse node level.
 *
 * The version of the OpenAPI document: 2024-06-01
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.customerFeedback.v2024_06_01
{
    /// <summary>
    /// The 10 most positive and most negative review topics for all items in a browse node.
    /// </summary>
    [DataContract(Name = "BrowseNodeReviewTopics")]
    public partial class BrowseNodeReviewTopics : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BrowseNodeReviewTopics" /> class.
        /// </summary>
        /// <param name="positiveTopics">A list of the most positive review topics. When the &#x60;sortBy&#x60; query parameter is set to &#x60;MENTIONS&#x60;, the number of reviews of items within the requested browse node that mention the topic determine the topic&#39;s placement in the list. When &#x60;sortBy&#x60; is set to &#x60;STAR_RATING_IMPACT&#x60;, the effect that the topic has on the star rating of items within the requested browse node determine placement in the list. This value is &#x60;null&#x60; if there are not enough positive reviews for the requested browse node.  **Max length:** 10.</param>
        /// <param name="negativeTopics">A list of the most negative review topics. When the &#x60;sortBy&#x60; query parameter is set to &#x60;MENTIONS&#x60;, the number of reviews of items within the requested browse node that mention the topic determine the topic&#39;s placement in the list. When &#x60;sortBy&#x60; is set to &#x60;STAR_RATING_IMPACT&#x60;, the effect that the topic has on the star rating of items within the requested browse node determine placement in the list. This value is &#x60;null&#x60; if there are not enough negative reviews for the requested browse node.  **Max length:** 10.</param>
        public BrowseNodeReviewTopics(List<BrowseNodeReviewTopic> positiveTopics = default(List<BrowseNodeReviewTopic>), List<BrowseNodeReviewTopic> negativeTopics = default(List<BrowseNodeReviewTopic>))
        {
            this.PositiveTopics = positiveTopics;
            this.NegativeTopics = negativeTopics;
        }

        /// <summary>
        /// A list of the most positive review topics. When the &#x60;sortBy&#x60; query parameter is set to &#x60;MENTIONS&#x60;, the number of reviews of items within the requested browse node that mention the topic determine the topic&#39;s placement in the list. When &#x60;sortBy&#x60; is set to &#x60;STAR_RATING_IMPACT&#x60;, the effect that the topic has on the star rating of items within the requested browse node determine placement in the list. This value is &#x60;null&#x60; if there are not enough positive reviews for the requested browse node.  **Max length:** 10
        /// </summary>
        /// <value>A list of the most positive review topics. When the &#x60;sortBy&#x60; query parameter is set to &#x60;MENTIONS&#x60;, the number of reviews of items within the requested browse node that mention the topic determine the topic&#39;s placement in the list. When &#x60;sortBy&#x60; is set to &#x60;STAR_RATING_IMPACT&#x60;, the effect that the topic has on the star rating of items within the requested browse node determine placement in the list. This value is &#x60;null&#x60; if there are not enough positive reviews for the requested browse node.  **Max length:** 10</value>
        [DataMember(Name = "positiveTopics", EmitDefaultValue = false)]
        public List<BrowseNodeReviewTopic> PositiveTopics { get; set; }

        /// <summary>
        /// A list of the most negative review topics. When the &#x60;sortBy&#x60; query parameter is set to &#x60;MENTIONS&#x60;, the number of reviews of items within the requested browse node that mention the topic determine the topic&#39;s placement in the list. When &#x60;sortBy&#x60; is set to &#x60;STAR_RATING_IMPACT&#x60;, the effect that the topic has on the star rating of items within the requested browse node determine placement in the list. This value is &#x60;null&#x60; if there are not enough negative reviews for the requested browse node.  **Max length:** 10
        /// </summary>
        /// <value>A list of the most negative review topics. When the &#x60;sortBy&#x60; query parameter is set to &#x60;MENTIONS&#x60;, the number of reviews of items within the requested browse node that mention the topic determine the topic&#39;s placement in the list. When &#x60;sortBy&#x60; is set to &#x60;STAR_RATING_IMPACT&#x60;, the effect that the topic has on the star rating of items within the requested browse node determine placement in the list. This value is &#x60;null&#x60; if there are not enough negative reviews for the requested browse node.  **Max length:** 10</value>
        [DataMember(Name = "negativeTopics", EmitDefaultValue = false)]
        public List<BrowseNodeReviewTopic> NegativeTopics { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BrowseNodeReviewTopics {\n");
            sb.Append("  PositiveTopics: ").Append(PositiveTopics).Append("\n");
            sb.Append("  NegativeTopics: ").Append(NegativeTopics).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
