/*
 * The Selling Partner API for CustomerFeedback
 *
 * The Selling Partner API for Customer Feedback (Customer Feedback API) provides information about customer reviews and returns at both the item and browse node level.
 *
 * The version of the OpenAPI document: 2024-06-01
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = software.amzn.spapi.Client.OpenAPIDateConverter;

namespace software.amzn.spapi.Model.customerFeedback.v2024_06_01
{
    /// <summary>
    /// The trend of review topic metrics for the requested item.
    /// </summary>
    [DataContract(Name = "ItemReviewTrend")]
    public partial class ItemReviewTrend : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ItemReviewTrend" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ItemReviewTrend() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ItemReviewTrend" /> class.
        /// </summary>
        /// <param name="topic">The name of the item review topic. (required).</param>
        /// <param name="trendMetrics">The item&#39;s review trend metrics for the past six months. (required).</param>
        public ItemReviewTrend(string topic = default(string), List<ItemReviewTrendPoint> trendMetrics = default(List<ItemReviewTrendPoint>))
        {
            // to ensure "topic" is required (not null)
            if (topic == null)
            {
                throw new ArgumentNullException("topic is a required property for ItemReviewTrend and cannot be null");
            }
            this.Topic = topic;
            // to ensure "trendMetrics" is required (not null)
            if (trendMetrics == null)
            {
                throw new ArgumentNullException("trendMetrics is a required property for ItemReviewTrend and cannot be null");
            }
            this.TrendMetrics = trendMetrics;
        }

        /// <summary>
        /// The name of the item review topic.
        /// </summary>
        /// <value>The name of the item review topic.</value>
        [DataMember(Name = "topic", IsRequired = true, EmitDefaultValue = true)]
        public string Topic { get; set; }

        /// <summary>
        /// The item&#39;s review trend metrics for the past six months.
        /// </summary>
        /// <value>The item&#39;s review trend metrics for the past six months.</value>
        [DataMember(Name = "trendMetrics", IsRequired = true, EmitDefaultValue = true)]
        public List<ItemReviewTrendPoint> TrendMetrics { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ItemReviewTrend {\n");
            sb.Append("  Topic: ").Append(Topic).Append("\n");
            sb.Append("  TrendMetrics: ").Append(TrendMetrics).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
