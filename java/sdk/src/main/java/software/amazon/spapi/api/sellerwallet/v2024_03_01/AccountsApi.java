/*
 * The Selling Partner API for Amazon Seller Wallet Open Banking API
 * The Selling Partner API for Seller Wallet (Seller Wallet API) provides financial information that is relevant to a seller's Seller Wallet account. You can obtain financial events, balances, and transfer schedules for Seller Wallet accounts. You can also schedule and initiate transactions.
 *
 * OpenAPI spec version: 2024-03-01
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package software.amazon.spapi.api.sellerwallet.v2024_03_01;

import com.amazon.SellingPartnerAPIAA.LWAAccessTokenCache;
import com.amazon.SellingPartnerAPIAA.LWAAccessTokenCacheImpl;
import com.amazon.SellingPartnerAPIAA.LWAAuthorizationCredentials;
import com.amazon.SellingPartnerAPIAA.LWAAuthorizationSigner;
import com.amazon.SellingPartnerAPIAA.LWAException;
import com.amazon.SellingPartnerAPIAA.RestrictedDataTokenSigner;
import com.google.gson.reflect.TypeToken;
import io.github.bucket4j.Bucket;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import software.amazon.spapi.ApiCallback;
import software.amazon.spapi.ApiClient;
import software.amazon.spapi.ApiException;
import software.amazon.spapi.ApiResponse;
import software.amazon.spapi.Configuration;
import software.amazon.spapi.Pair;
import software.amazon.spapi.ProgressRequestBody;
import software.amazon.spapi.StringUtil;
import software.amazon.spapi.models.sellerwallet.v2024_03_01.BalanceListing;
import software.amazon.spapi.models.sellerwallet.v2024_03_01.BankAccount;
import software.amazon.spapi.models.sellerwallet.v2024_03_01.BankAccountListing;

public class AccountsApi {
    private ApiClient apiClient;
    private Boolean disableRateLimiting;

    public AccountsApi(ApiClient apiClient, Boolean disableRateLimiting) {
        this.apiClient = apiClient;
        this.disableRateLimiting = disableRateLimiting;
    }

    private final Configuration config = Configuration.get();

    public final Bucket getAccountBucket =
            Bucket.builder().addLimit(config.getLimit("AccountsApi-getAccount")).build();

    public final Bucket listAccountBalancesBucket = Bucket.builder()
            .addLimit(config.getLimit("AccountsApi-listAccountBalances"))
            .build();

    public final Bucket listAccountsBucket = Bucket.builder()
            .addLimit(config.getLimit("AccountsApi-listAccounts"))
            .build();

    /**
     * Build call for getAccount
     *
     * @param accountId ID of the Amazon SW account (required)
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    private okhttp3.Call getAccountCall(
            String accountId, final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/finances/transfers/wallet/2024-03-01/accounts/{accountId}"
                .replaceAll("\\{" + "accountId" + "\\}", apiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {};

        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        return apiClient.buildCall(
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                progressRequestListener);
    }

    private okhttp3.Call getAccountValidateBeforeCall(
            String accountId, final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling getAccount(Async)");
        }

        return getAccountCall(accountId, progressRequestListener);
    }

    /**
     * Find particular Amazon SW account by Amazon account identifier Retrieve a Seller Wallet bank account by Amazon
     * account identifier.
     *
     * @param accountId ID of the Amazon SW account (required)
     * @param restrictedDataToken Restricted Data Token (optional)
     * @return BankAccount
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public BankAccount getAccount(String accountId, String restrictedDataToken) throws ApiException, LWAException {
        ApiResponse<BankAccount> resp = getAccountWithHttpInfo(accountId, restrictedDataToken);
        return resp.getData();
    }

    /**
     * Find particular Amazon SW account by Amazon account identifier Retrieve a Seller Wallet bank account by Amazon
     * account identifier.
     *
     * @param accountId ID of the Amazon SW account (required)
     * @return BankAccount
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public BankAccount getAccount(String accountId) throws ApiException, LWAException {
        ApiResponse<BankAccount> resp = getAccountWithHttpInfo(accountId, null);
        return resp.getData();
    }

    /**
     * Find particular Amazon SW account by Amazon account identifier Retrieve a Seller Wallet bank account by Amazon
     * account identifier.
     *
     * @param accountId ID of the Amazon SW account (required)
     * @param restrictedDataToken Restricted Data Token (optional)
     * @return ApiResponse&lt;BankAccount&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<BankAccount> getAccountWithHttpInfo(String accountId, String restrictedDataToken)
            throws ApiException, LWAException {
        okhttp3.Call call = getAccountValidateBeforeCall(accountId, null);

        if (restrictedDataToken != null) {
            okhttp3.Request request = call.request();
            request = RestrictedDataTokenSigner.sign(request, restrictedDataToken, "AccountsApi-getAccount");
            call = apiClient.getHttpClient().newCall(request);
        }

        if (disableRateLimiting || getAccountBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<BankAccount>() {}.getType();
            return apiClient.execute(call, localVarReturnType);
        } else throw new ApiException.RateLimitExceeded("getAccount operation exceeds rate limit");
    }

    /**
     * Find particular Amazon SW account by Amazon account identifier Retrieve a Seller Wallet bank account by Amazon
     * account identifier.
     *
     * @param accountId ID of the Amazon SW account (required)
     * @return ApiResponse&lt;BankAccount&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<BankAccount> getAccountWithHttpInfo(String accountId) throws ApiException, LWAException {
        return getAccountWithHttpInfo(accountId, null);
    }

    /**
     * Find particular Amazon SW account by Amazon account identifier (asynchronously) Retrieve a Seller Wallet bank
     * account by Amazon account identifier.
     *
     * @param accountId ID of the Amazon SW account (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call getAccountAsync(String accountId, final ApiCallback<BankAccount> callback)
            throws ApiException, LWAException {
        return getAccountAsync(accountId, callback, null);
    }
    /**
     * Find particular Amazon SW account by Amazon account identifier (asynchronously) Retrieve a Seller Wallet bank
     * account by Amazon account identifier.
     *
     * @param accountId ID of the Amazon SW account (required)
     * @param callback The callback to be executed when the API call finishes
     * @param restrictedDataToken Restricted Data Token (optional)
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call getAccountAsync(
            String accountId, final ApiCallback<BankAccount> callback, String restrictedDataToken)
            throws ApiException, LWAException {

        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = getAccountValidateBeforeCall(accountId, progressRequestListener);

        if (restrictedDataToken != null) {
            okhttp3.Request request = call.request();
            request = RestrictedDataTokenSigner.sign(request, restrictedDataToken, "AccountsApi-getAccount");
            call = apiClient.getHttpClient().newCall(request);
        }

        if (disableRateLimiting || getAccountBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<BankAccount>() {}.getType();
            apiClient.executeAsync(call, localVarReturnType, callback);
            return call;
        } else throw new ApiException.RateLimitExceeded("getAccount operation exceeds rate limit");
    }
    /**
     * Build call for listAccountBalances
     *
     * @param accountId ID of the Amazon SW account (required)
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    private okhttp3.Call listAccountBalancesCall(
            String accountId, final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/finances/transfers/wallet/2024-03-01/accounts/{accountId}/balance"
                .replaceAll("\\{" + "accountId" + "\\}", apiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {};

        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        return apiClient.buildCall(
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                progressRequestListener);
    }

    private okhttp3.Call listAccountBalancesValidateBeforeCall(
            String accountId, final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException(
                    "Missing the required parameter 'accountId' when calling listAccountBalances(Async)");
        }

        return listAccountBalancesCall(accountId, progressRequestListener);
    }

    /**
     * Find balance in particular Amazon SW account by Amazon account identifier Retrieve the balance in a given Seller
     * Wallet bank account.
     *
     * @param accountId ID of the Amazon SW account (required)
     * @param restrictedDataToken Restricted Data Token (optional)
     * @return BalanceListing
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public BalanceListing listAccountBalances(String accountId, String restrictedDataToken)
            throws ApiException, LWAException {
        ApiResponse<BalanceListing> resp = listAccountBalancesWithHttpInfo(accountId, restrictedDataToken);
        return resp.getData();
    }

    /**
     * Find balance in particular Amazon SW account by Amazon account identifier Retrieve the balance in a given Seller
     * Wallet bank account.
     *
     * @param accountId ID of the Amazon SW account (required)
     * @return BalanceListing
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public BalanceListing listAccountBalances(String accountId) throws ApiException, LWAException {
        ApiResponse<BalanceListing> resp = listAccountBalancesWithHttpInfo(accountId, null);
        return resp.getData();
    }

    /**
     * Find balance in particular Amazon SW account by Amazon account identifier Retrieve the balance in a given Seller
     * Wallet bank account.
     *
     * @param accountId ID of the Amazon SW account (required)
     * @param restrictedDataToken Restricted Data Token (optional)
     * @return ApiResponse&lt;BalanceListing&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<BalanceListing> listAccountBalancesWithHttpInfo(String accountId, String restrictedDataToken)
            throws ApiException, LWAException {
        okhttp3.Call call = listAccountBalancesValidateBeforeCall(accountId, null);

        if (restrictedDataToken != null) {
            okhttp3.Request request = call.request();
            request = RestrictedDataTokenSigner.sign(request, restrictedDataToken, "AccountsApi-listAccountBalances");
            call = apiClient.getHttpClient().newCall(request);
        }

        if (disableRateLimiting || listAccountBalancesBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<BalanceListing>() {}.getType();
            return apiClient.execute(call, localVarReturnType);
        } else throw new ApiException.RateLimitExceeded("listAccountBalances operation exceeds rate limit");
    }

    /**
     * Find balance in particular Amazon SW account by Amazon account identifier Retrieve the balance in a given Seller
     * Wallet bank account.
     *
     * @param accountId ID of the Amazon SW account (required)
     * @return ApiResponse&lt;BalanceListing&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<BalanceListing> listAccountBalancesWithHttpInfo(String accountId)
            throws ApiException, LWAException {
        return listAccountBalancesWithHttpInfo(accountId, null);
    }

    /**
     * Find balance in particular Amazon SW account by Amazon account identifier (asynchronously) Retrieve the balance
     * in a given Seller Wallet bank account.
     *
     * @param accountId ID of the Amazon SW account (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call listAccountBalancesAsync(String accountId, final ApiCallback<BalanceListing> callback)
            throws ApiException, LWAException {
        return listAccountBalancesAsync(accountId, callback, null);
    }
    /**
     * Find balance in particular Amazon SW account by Amazon account identifier (asynchronously) Retrieve the balance
     * in a given Seller Wallet bank account.
     *
     * @param accountId ID of the Amazon SW account (required)
     * @param callback The callback to be executed when the API call finishes
     * @param restrictedDataToken Restricted Data Token (optional)
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call listAccountBalancesAsync(
            String accountId, final ApiCallback<BalanceListing> callback, String restrictedDataToken)
            throws ApiException, LWAException {

        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = listAccountBalancesValidateBeforeCall(accountId, progressRequestListener);

        if (restrictedDataToken != null) {
            okhttp3.Request request = call.request();
            request = RestrictedDataTokenSigner.sign(request, restrictedDataToken, "AccountsApi-listAccountBalances");
            call = apiClient.getHttpClient().newCall(request);
        }

        if (disableRateLimiting || listAccountBalancesBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<BalanceListing>() {}.getType();
            apiClient.executeAsync(call, localVarReturnType, callback);
            return call;
        } else throw new ApiException.RateLimitExceeded("listAccountBalances operation exceeds rate limit");
    }
    /**
     * Build call for listAccounts
     *
     * @param marketplaceId A marketplace identifier. Specifies the marketplace for which items are returned. (required)
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    private okhttp3.Call listAccountsCall(
            String marketplaceId, final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/finances/transfers/wallet/2024-03-01/accounts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (marketplaceId != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("marketplaceId", marketplaceId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {};

        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        return apiClient.buildCall(
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                progressRequestListener);
    }

    private okhttp3.Call listAccountsValidateBeforeCall(
            String marketplaceId, final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        // verify the required parameter 'marketplaceId' is set
        if (marketplaceId == null) {
            throw new ApiException("Missing the required parameter 'marketplaceId' when calling listAccounts(Async)");
        }

        return listAccountsCall(marketplaceId, progressRequestListener);
    }

    /**
     * Get all Amazon SW accounts for the seller Get Seller Wallet accounts for a seller.
     *
     * @param marketplaceId A marketplace identifier. Specifies the marketplace for which items are returned. (required)
     * @param restrictedDataToken Restricted Data Token (optional)
     * @return BankAccountListing
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public BankAccountListing listAccounts(String marketplaceId, String restrictedDataToken)
            throws ApiException, LWAException {
        ApiResponse<BankAccountListing> resp = listAccountsWithHttpInfo(marketplaceId, restrictedDataToken);
        return resp.getData();
    }

    /**
     * Get all Amazon SW accounts for the seller Get Seller Wallet accounts for a seller.
     *
     * @param marketplaceId A marketplace identifier. Specifies the marketplace for which items are returned. (required)
     * @return BankAccountListing
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public BankAccountListing listAccounts(String marketplaceId) throws ApiException, LWAException {
        ApiResponse<BankAccountListing> resp = listAccountsWithHttpInfo(marketplaceId, null);
        return resp.getData();
    }

    /**
     * Get all Amazon SW accounts for the seller Get Seller Wallet accounts for a seller.
     *
     * @param marketplaceId A marketplace identifier. Specifies the marketplace for which items are returned. (required)
     * @param restrictedDataToken Restricted Data Token (optional)
     * @return ApiResponse&lt;BankAccountListing&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<BankAccountListing> listAccountsWithHttpInfo(String marketplaceId, String restrictedDataToken)
            throws ApiException, LWAException {
        okhttp3.Call call = listAccountsValidateBeforeCall(marketplaceId, null);

        if (restrictedDataToken != null) {
            okhttp3.Request request = call.request();
            request = RestrictedDataTokenSigner.sign(request, restrictedDataToken, "AccountsApi-listAccounts");
            call = apiClient.getHttpClient().newCall(request);
        }

        if (disableRateLimiting || listAccountsBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<BankAccountListing>() {}.getType();
            return apiClient.execute(call, localVarReturnType);
        } else throw new ApiException.RateLimitExceeded("listAccounts operation exceeds rate limit");
    }

    /**
     * Get all Amazon SW accounts for the seller Get Seller Wallet accounts for a seller.
     *
     * @param marketplaceId A marketplace identifier. Specifies the marketplace for which items are returned. (required)
     * @return ApiResponse&lt;BankAccountListing&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<BankAccountListing> listAccountsWithHttpInfo(String marketplaceId)
            throws ApiException, LWAException {
        return listAccountsWithHttpInfo(marketplaceId, null);
    }

    /**
     * Get all Amazon SW accounts for the seller (asynchronously) Get Seller Wallet accounts for a seller.
     *
     * @param marketplaceId A marketplace identifier. Specifies the marketplace for which items are returned. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call listAccountsAsync(String marketplaceId, final ApiCallback<BankAccountListing> callback)
            throws ApiException, LWAException {
        return listAccountsAsync(marketplaceId, callback, null);
    }
    /**
     * Get all Amazon SW accounts for the seller (asynchronously) Get Seller Wallet accounts for a seller.
     *
     * @param marketplaceId A marketplace identifier. Specifies the marketplace for which items are returned. (required)
     * @param callback The callback to be executed when the API call finishes
     * @param restrictedDataToken Restricted Data Token (optional)
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call listAccountsAsync(
            String marketplaceId, final ApiCallback<BankAccountListing> callback, String restrictedDataToken)
            throws ApiException, LWAException {

        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = listAccountsValidateBeforeCall(marketplaceId, progressRequestListener);

        if (restrictedDataToken != null) {
            okhttp3.Request request = call.request();
            request = RestrictedDataTokenSigner.sign(request, restrictedDataToken, "AccountsApi-listAccounts");
            call = apiClient.getHttpClient().newCall(request);
        }

        if (disableRateLimiting || listAccountsBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<BankAccountListing>() {}.getType();
            apiClient.executeAsync(call, localVarReturnType, callback);
            return call;
        } else throw new ApiException.RateLimitExceeded("listAccounts operation exceeds rate limit");
    }

    public static class Builder {
        private LWAAuthorizationCredentials lwaAuthorizationCredentials;
        private String endpoint;
        private LWAAccessTokenCache lwaAccessTokenCache;
        private Boolean disableAccessTokenCache = false;
        private Boolean disableRateLimiting = false;

        public Builder lwaAuthorizationCredentials(LWAAuthorizationCredentials lwaAuthorizationCredentials) {
            this.lwaAuthorizationCredentials = lwaAuthorizationCredentials;
            return this;
        }

        public Builder endpoint(String endpoint) {
            this.endpoint = endpoint;
            return this;
        }

        public Builder lwaAccessTokenCache(LWAAccessTokenCache lwaAccessTokenCache) {
            this.lwaAccessTokenCache = lwaAccessTokenCache;
            return this;
        }

        public Builder disableAccessTokenCache() {
            this.disableAccessTokenCache = true;
            return this;
        }

        public Builder disableRateLimiting() {
            this.disableRateLimiting = true;
            return this;
        }

        public AccountsApi build() {
            if (lwaAuthorizationCredentials == null) {
                throw new RuntimeException("LWAAuthorizationCredentials not set");
            }

            if (StringUtil.isEmpty(endpoint)) {
                throw new RuntimeException("Endpoint not set");
            }

            LWAAuthorizationSigner lwaAuthorizationSigner = null;
            if (disableAccessTokenCache) {
                lwaAuthorizationSigner = new LWAAuthorizationSigner(lwaAuthorizationCredentials);
            } else {
                if (lwaAccessTokenCache == null) {
                    lwaAccessTokenCache = new LWAAccessTokenCacheImpl();
                }
                lwaAuthorizationSigner = new LWAAuthorizationSigner(lwaAuthorizationCredentials, lwaAccessTokenCache);
            }

            return new AccountsApi(
                    new ApiClient()
                            .setLWAAuthorizationSigner(lwaAuthorizationSigner)
                            .setBasePath(endpoint),
                    disableRateLimiting);
        }
    }
}
