/*
 * The Selling Partner API for Amazon Seller Wallet Open Banking API
 * The Selling Partner API for Seller Wallet (Seller Wallet API) provides financial information that is relevant to a seller's Seller Wallet account. You can obtain financial events, balances, and transfer schedules for Seller Wallet accounts. You can also schedule and initiate transactions.
 *
 * OpenAPI spec version: 2024-03-01
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package software.amazon.spapi.models.sellerwallet.v2024_03_01;

import com.google.gson.annotations.SerializedName;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/** A list of transactions. */
@Schema(description = "A list of transactions.")
public class TransactionListing {
    @SerializedName("nextPageToken")
    private String nextPageToken = null;

    @SerializedName("transactions")
    private List<Transaction> transactions = new ArrayList<>();

    public TransactionListing nextPageToken(String nextPageToken) {
        this.nextPageToken = nextPageToken;
        return this;
    }

    /**
     * A token that you use to retrieve the next page of results. The response includes &#x60;nextPageToken&#x60; when
     * the number of results exceeds 100. To get the next page of results, call the operation with this token and
     * include the same arguments as the call that produced the token. To get a complete list, call this operation until
     * &#x60;nextPageToken&#x60; is null. Note that this operation can return empty pages.
     *
     * @return nextPageToken
     */
    @Schema(
            example = "3493805734095308457308475",
            description =
                    "A token that you use to retrieve the next page of results. The response includes `nextPageToken` when the number of results exceeds 100. To get the next page of results, call the operation with this token and include the same arguments as the call that produced the token. To get a complete list, call this operation until `nextPageToken` is null. Note that this operation can return empty pages.")
    public String getNextPageToken() {
        return nextPageToken;
    }

    public void setNextPageToken(String nextPageToken) {
        this.nextPageToken = nextPageToken;
    }

    public TransactionListing transactions(List<Transaction> transactions) {
        this.transactions = transactions;
        return this;
    }

    public TransactionListing addTransactionsItem(Transaction transactionsItem) {
        this.transactions.add(transactionsItem);
        return this;
    }

    /**
     * A list of transactions.
     *
     * @return transactions
     */
    @Schema(required = true, description = "A list of transactions.")
    public List<Transaction> getTransactions() {
        return transactions;
    }

    public void setTransactions(List<Transaction> transactions) {
        this.transactions = transactions;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TransactionListing transactionListing = (TransactionListing) o;
        return Objects.equals(this.nextPageToken, transactionListing.nextPageToken)
                && Objects.equals(this.transactions, transactionListing.transactions);
    }

    @Override
    public int hashCode() {
        return Objects.hash(nextPageToken, transactions);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class TransactionListing {\n");

        sb.append("    nextPageToken: ").append(toIndentedString(nextPageToken)).append("\n");
        sb.append("    transactions: ").append(toIndentedString(transactions)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /** Convert the given object to string with each line indented by 4 spaces (except the first line). */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }
}
