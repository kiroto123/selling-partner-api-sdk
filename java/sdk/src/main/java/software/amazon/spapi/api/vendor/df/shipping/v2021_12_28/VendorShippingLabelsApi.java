/*
 * Selling Partner API for Direct Fulfillment Shipping
 * Use the Selling Partner API for Direct Fulfillment Shipping to access a direct fulfillment vendor's shipping data.
 *
 * OpenAPI spec version: 2021-12-28
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package software.amazon.spapi.api.vendor.df.shipping.v2021_12_28;

import com.amazon.SellingPartnerAPIAA.LWAAccessTokenCache;
import com.amazon.SellingPartnerAPIAA.LWAAccessTokenCacheImpl;
import com.amazon.SellingPartnerAPIAA.LWAAuthorizationCredentials;
import com.amazon.SellingPartnerAPIAA.LWAAuthorizationSigner;
import com.amazon.SellingPartnerAPIAA.LWAException;
import com.amazon.SellingPartnerAPIAA.RestrictedDataTokenSigner;
import com.google.gson.reflect.TypeToken;
import io.github.bucket4j.Bucket;
import java.lang.reflect.Type;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import software.amazon.spapi.ApiCallback;
import software.amazon.spapi.ApiClient;
import software.amazon.spapi.ApiException;
import software.amazon.spapi.ApiResponse;
import software.amazon.spapi.Configuration;
import software.amazon.spapi.Pair;
import software.amazon.spapi.ProgressRequestBody;
import software.amazon.spapi.StringUtil;
import software.amazon.spapi.models.vendor.df.shipping.v2021_12_28.CreateShippingLabelsRequest;
import software.amazon.spapi.models.vendor.df.shipping.v2021_12_28.ShippingLabel;
import software.amazon.spapi.models.vendor.df.shipping.v2021_12_28.ShippingLabelList;
import software.amazon.spapi.models.vendor.df.shipping.v2021_12_28.SubmitShippingLabelsRequest;
import software.amazon.spapi.models.vendor.df.shipping.v2021_12_28.TransactionReference;

public class VendorShippingLabelsApi {
    private ApiClient apiClient;
    private Boolean disableRateLimiting;

    public VendorShippingLabelsApi(ApiClient apiClient, Boolean disableRateLimiting) {
        this.apiClient = apiClient;
        this.disableRateLimiting = disableRateLimiting;
    }

    private final Configuration config = Configuration.get();

    public final Bucket createShippingLabelsBucket = Bucket.builder()
            .addLimit(config.getLimit("VendorShippingLabelsApi-createShippingLabels"))
            .build();

    public final Bucket getShippingLabelBucket = Bucket.builder()
            .addLimit(config.getLimit("VendorShippingLabelsApi-getShippingLabel"))
            .build();

    public final Bucket getShippingLabelsBucket = Bucket.builder()
            .addLimit(config.getLimit("VendorShippingLabelsApi-getShippingLabels"))
            .build();

    public final Bucket submitShippingLabelRequestBucket = Bucket.builder()
            .addLimit(config.getLimit("VendorShippingLabelsApi-submitShippingLabelRequest"))
            .build();

    /**
     * Build call for createShippingLabels
     *
     * @param body The request payload that contains the parameters for creating shipping labels. (required)
     * @param purchaseOrderNumber The purchase order number for which you want to return the shipping labels. It should
     *     be the same number as the &#x60;purchaseOrderNumber&#x60; in the order. (required)
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    private okhttp3.Call createShippingLabelsCall(
            CreateShippingLabelsRequest body,
            String purchaseOrderNumber,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/vendor/directFulfillment/shipping/2021-12-28/shippingLabels/{purchaseOrderNumber}"
                .replaceAll(
                        "\\{" + "purchaseOrderNumber" + "\\}", apiClient.escapeString(purchaseOrderNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        return apiClient.buildCall(
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                progressRequestListener);
    }

    private okhttp3.Call createShippingLabelsValidateBeforeCall(
            CreateShippingLabelsRequest body,
            String purchaseOrderNumber,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createShippingLabels(Async)");
        }
        // verify the required parameter 'purchaseOrderNumber' is set
        if (purchaseOrderNumber == null) {
            throw new ApiException(
                    "Missing the required parameter 'purchaseOrderNumber' when calling createShippingLabels(Async)");
        }

        return createShippingLabelsCall(body, purchaseOrderNumber, progressRequestListener);
    }

    /**
     * createShippingLabels Creates shipping labels for a purchase order and returns the labels. **Usage Plan:** | Rate
     * (requests per second) | Burst | | ---- | ---- | | 10 | 10 | The &#x60;x-amzn-RateLimit-Limit&#x60; response
     * header returns the usage plan rate limits that were applied to the requested operation, when available. The
     * preceding table indicates the default rate and burst values for this operation. Selling partners whose business
     * demands require higher throughput may have higher rate and burst values then those shown here. For more
     * information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits).
     *
     * @param body The request payload that contains the parameters for creating shipping labels. (required)
     * @param purchaseOrderNumber The purchase order number for which you want to return the shipping labels. It should
     *     be the same number as the &#x60;purchaseOrderNumber&#x60; in the order. (required)
     * @param restrictedDataToken Restricted Data Token (optional)
     * @return ShippingLabel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ShippingLabel createShippingLabels(
            CreateShippingLabelsRequest body, String purchaseOrderNumber, String restrictedDataToken)
            throws ApiException, LWAException {
        ApiResponse<ShippingLabel> resp =
                createShippingLabelsWithHttpInfo(body, purchaseOrderNumber, restrictedDataToken);
        return resp.getData();
    }

    /**
     * createShippingLabels Creates shipping labels for a purchase order and returns the labels. **Usage Plan:** | Rate
     * (requests per second) | Burst | | ---- | ---- | | 10 | 10 | The &#x60;x-amzn-RateLimit-Limit&#x60; response
     * header returns the usage plan rate limits that were applied to the requested operation, when available. The
     * preceding table indicates the default rate and burst values for this operation. Selling partners whose business
     * demands require higher throughput may have higher rate and burst values then those shown here. For more
     * information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits).
     *
     * @param body The request payload that contains the parameters for creating shipping labels. (required)
     * @param purchaseOrderNumber The purchase order number for which you want to return the shipping labels. It should
     *     be the same number as the &#x60;purchaseOrderNumber&#x60; in the order. (required)
     * @return ShippingLabel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ShippingLabel createShippingLabels(CreateShippingLabelsRequest body, String purchaseOrderNumber)
            throws ApiException, LWAException {
        ApiResponse<ShippingLabel> resp = createShippingLabelsWithHttpInfo(body, purchaseOrderNumber, null);
        return resp.getData();
    }

    /**
     * createShippingLabels Creates shipping labels for a purchase order and returns the labels. **Usage Plan:** | Rate
     * (requests per second) | Burst | | ---- | ---- | | 10 | 10 | The &#x60;x-amzn-RateLimit-Limit&#x60; response
     * header returns the usage plan rate limits that were applied to the requested operation, when available. The
     * preceding table indicates the default rate and burst values for this operation. Selling partners whose business
     * demands require higher throughput may have higher rate and burst values then those shown here. For more
     * information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits).
     *
     * @param body The request payload that contains the parameters for creating shipping labels. (required)
     * @param purchaseOrderNumber The purchase order number for which you want to return the shipping labels. It should
     *     be the same number as the &#x60;purchaseOrderNumber&#x60; in the order. (required)
     * @param restrictedDataToken Restricted Data Token (optional)
     * @return ApiResponse&lt;ShippingLabel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<ShippingLabel> createShippingLabelsWithHttpInfo(
            CreateShippingLabelsRequest body, String purchaseOrderNumber, String restrictedDataToken)
            throws ApiException, LWAException {
        okhttp3.Call call = createShippingLabelsValidateBeforeCall(body, purchaseOrderNumber, null);

        if (restrictedDataToken != null) {
            okhttp3.Request request = call.request();
            request = RestrictedDataTokenSigner.sign(
                    request, restrictedDataToken, "VendorShippingLabelsApi-createShippingLabels");
            call = apiClient.getHttpClient().newCall(request);
        }

        if (disableRateLimiting || createShippingLabelsBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<ShippingLabel>() {}.getType();
            return apiClient.execute(call, localVarReturnType);
        } else throw new ApiException.RateLimitExceeded("createShippingLabels operation exceeds rate limit");
    }

    /**
     * createShippingLabels Creates shipping labels for a purchase order and returns the labels. **Usage Plan:** | Rate
     * (requests per second) | Burst | | ---- | ---- | | 10 | 10 | The &#x60;x-amzn-RateLimit-Limit&#x60; response
     * header returns the usage plan rate limits that were applied to the requested operation, when available. The
     * preceding table indicates the default rate and burst values for this operation. Selling partners whose business
     * demands require higher throughput may have higher rate and burst values then those shown here. For more
     * information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits).
     *
     * @param body The request payload that contains the parameters for creating shipping labels. (required)
     * @param purchaseOrderNumber The purchase order number for which you want to return the shipping labels. It should
     *     be the same number as the &#x60;purchaseOrderNumber&#x60; in the order. (required)
     * @return ApiResponse&lt;ShippingLabel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<ShippingLabel> createShippingLabelsWithHttpInfo(
            CreateShippingLabelsRequest body, String purchaseOrderNumber) throws ApiException, LWAException {
        return createShippingLabelsWithHttpInfo(body, purchaseOrderNumber, null);
    }

    /**
     * createShippingLabels (asynchronously) Creates shipping labels for a purchase order and returns the labels.
     * **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 10 | The
     * &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the
     * requested operation, when available. The preceding table indicates the default rate and burst values for this
     * operation. Selling partners whose business demands require higher throughput may have higher rate and burst
     * values then those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits).
     *
     * @param body The request payload that contains the parameters for creating shipping labels. (required)
     * @param purchaseOrderNumber The purchase order number for which you want to return the shipping labels. It should
     *     be the same number as the &#x60;purchaseOrderNumber&#x60; in the order. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call createShippingLabelsAsync(
            CreateShippingLabelsRequest body, String purchaseOrderNumber, final ApiCallback<ShippingLabel> callback)
            throws ApiException, LWAException {
        return createShippingLabelsAsync(body, purchaseOrderNumber, callback, null);
    }
    /**
     * createShippingLabels (asynchronously) Creates shipping labels for a purchase order and returns the labels.
     * **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 10 | The
     * &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the
     * requested operation, when available. The preceding table indicates the default rate and burst values for this
     * operation. Selling partners whose business demands require higher throughput may have higher rate and burst
     * values then those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits).
     *
     * @param body The request payload that contains the parameters for creating shipping labels. (required)
     * @param purchaseOrderNumber The purchase order number for which you want to return the shipping labels. It should
     *     be the same number as the &#x60;purchaseOrderNumber&#x60; in the order. (required)
     * @param callback The callback to be executed when the API call finishes
     * @param restrictedDataToken Restricted Data Token (optional)
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call createShippingLabelsAsync(
            CreateShippingLabelsRequest body,
            String purchaseOrderNumber,
            final ApiCallback<ShippingLabel> callback,
            String restrictedDataToken)
            throws ApiException, LWAException {

        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = createShippingLabelsValidateBeforeCall(body, purchaseOrderNumber, progressRequestListener);

        if (restrictedDataToken != null) {
            okhttp3.Request request = call.request();
            request = RestrictedDataTokenSigner.sign(
                    request, restrictedDataToken, "VendorShippingLabelsApi-createShippingLabels");
            call = apiClient.getHttpClient().newCall(request);
        }

        if (disableRateLimiting || createShippingLabelsBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<ShippingLabel>() {}.getType();
            apiClient.executeAsync(call, localVarReturnType, callback);
            return call;
        } else throw new ApiException.RateLimitExceeded("createShippingLabels operation exceeds rate limit");
    }
    /**
     * Build call for getShippingLabel
     *
     * @param purchaseOrderNumber The purchase order number for which you want to return the shipping label. It should
     *     be the same &#x60;purchaseOrderNumber&#x60; that you received in the order. (required)
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    private okhttp3.Call getShippingLabelCall(
            String purchaseOrderNumber, final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/vendor/directFulfillment/shipping/2021-12-28/shippingLabels/{purchaseOrderNumber}"
                .replaceAll(
                        "\\{" + "purchaseOrderNumber" + "\\}", apiClient.escapeString(purchaseOrderNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {};

        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        return apiClient.buildCall(
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                progressRequestListener);
    }

    private okhttp3.Call getShippingLabelValidateBeforeCall(
            String purchaseOrderNumber, final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        // verify the required parameter 'purchaseOrderNumber' is set
        if (purchaseOrderNumber == null) {
            throw new ApiException(
                    "Missing the required parameter 'purchaseOrderNumber' when calling getShippingLabel(Async)");
        }

        return getShippingLabelCall(purchaseOrderNumber, progressRequestListener);
    }

    /**
     * getShippingLabel Returns a shipping label for the &#x60;purchaseOrderNumber&#x60; that you specify. **Usage
     * Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 10 | The &#x60;x-amzn-RateLimit-Limit&#x60;
     * response header returns the usage plan rate limits that were applied to the requested operation, when available.
     * The preceding table indicates the default rate and burst values for this operation. Selling partners whose
     * business demands require higher throughput may have higher rate and burst values then those shown here. For more
     * information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits).
     *
     * @param purchaseOrderNumber The purchase order number for which you want to return the shipping label. It should
     *     be the same &#x60;purchaseOrderNumber&#x60; that you received in the order. (required)
     * @param restrictedDataToken Restricted Data Token (optional)
     * @return ShippingLabel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ShippingLabel getShippingLabel(String purchaseOrderNumber, String restrictedDataToken)
            throws ApiException, LWAException {
        ApiResponse<ShippingLabel> resp = getShippingLabelWithHttpInfo(purchaseOrderNumber, restrictedDataToken);
        return resp.getData();
    }

    /**
     * getShippingLabel Returns a shipping label for the &#x60;purchaseOrderNumber&#x60; that you specify. **Usage
     * Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 10 | The &#x60;x-amzn-RateLimit-Limit&#x60;
     * response header returns the usage plan rate limits that were applied to the requested operation, when available.
     * The preceding table indicates the default rate and burst values for this operation. Selling partners whose
     * business demands require higher throughput may have higher rate and burst values then those shown here. For more
     * information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits).
     *
     * @param purchaseOrderNumber The purchase order number for which you want to return the shipping label. It should
     *     be the same &#x60;purchaseOrderNumber&#x60; that you received in the order. (required)
     * @return ShippingLabel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ShippingLabel getShippingLabel(String purchaseOrderNumber) throws ApiException, LWAException {
        ApiResponse<ShippingLabel> resp = getShippingLabelWithHttpInfo(purchaseOrderNumber, null);
        return resp.getData();
    }

    /**
     * getShippingLabel Returns a shipping label for the &#x60;purchaseOrderNumber&#x60; that you specify. **Usage
     * Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 10 | The &#x60;x-amzn-RateLimit-Limit&#x60;
     * response header returns the usage plan rate limits that were applied to the requested operation, when available.
     * The preceding table indicates the default rate and burst values for this operation. Selling partners whose
     * business demands require higher throughput may have higher rate and burst values then those shown here. For more
     * information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits).
     *
     * @param purchaseOrderNumber The purchase order number for which you want to return the shipping label. It should
     *     be the same &#x60;purchaseOrderNumber&#x60; that you received in the order. (required)
     * @param restrictedDataToken Restricted Data Token (optional)
     * @return ApiResponse&lt;ShippingLabel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<ShippingLabel> getShippingLabelWithHttpInfo(
            String purchaseOrderNumber, String restrictedDataToken) throws ApiException, LWAException {
        okhttp3.Call call = getShippingLabelValidateBeforeCall(purchaseOrderNumber, null);

        if (restrictedDataToken != null) {
            okhttp3.Request request = call.request();
            request = RestrictedDataTokenSigner.sign(
                    request, restrictedDataToken, "VendorShippingLabelsApi-getShippingLabel");
            call = apiClient.getHttpClient().newCall(request);
        }

        if (disableRateLimiting || getShippingLabelBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<ShippingLabel>() {}.getType();
            return apiClient.execute(call, localVarReturnType);
        } else throw new ApiException.RateLimitExceeded("getShippingLabel operation exceeds rate limit");
    }

    /**
     * getShippingLabel Returns a shipping label for the &#x60;purchaseOrderNumber&#x60; that you specify. **Usage
     * Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 10 | The &#x60;x-amzn-RateLimit-Limit&#x60;
     * response header returns the usage plan rate limits that were applied to the requested operation, when available.
     * The preceding table indicates the default rate and burst values for this operation. Selling partners whose
     * business demands require higher throughput may have higher rate and burst values then those shown here. For more
     * information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits).
     *
     * @param purchaseOrderNumber The purchase order number for which you want to return the shipping label. It should
     *     be the same &#x60;purchaseOrderNumber&#x60; that you received in the order. (required)
     * @return ApiResponse&lt;ShippingLabel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<ShippingLabel> getShippingLabelWithHttpInfo(String purchaseOrderNumber)
            throws ApiException, LWAException {
        return getShippingLabelWithHttpInfo(purchaseOrderNumber, null);
    }

    /**
     * getShippingLabel (asynchronously) Returns a shipping label for the &#x60;purchaseOrderNumber&#x60; that you
     * specify. **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 10 | The
     * &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the
     * requested operation, when available. The preceding table indicates the default rate and burst values for this
     * operation. Selling partners whose business demands require higher throughput may have higher rate and burst
     * values then those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits).
     *
     * @param purchaseOrderNumber The purchase order number for which you want to return the shipping label. It should
     *     be the same &#x60;purchaseOrderNumber&#x60; that you received in the order. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call getShippingLabelAsync(String purchaseOrderNumber, final ApiCallback<ShippingLabel> callback)
            throws ApiException, LWAException {
        return getShippingLabelAsync(purchaseOrderNumber, callback, null);
    }
    /**
     * getShippingLabel (asynchronously) Returns a shipping label for the &#x60;purchaseOrderNumber&#x60; that you
     * specify. **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 10 | The
     * &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the
     * requested operation, when available. The preceding table indicates the default rate and burst values for this
     * operation. Selling partners whose business demands require higher throughput may have higher rate and burst
     * values then those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits).
     *
     * @param purchaseOrderNumber The purchase order number for which you want to return the shipping label. It should
     *     be the same &#x60;purchaseOrderNumber&#x60; that you received in the order. (required)
     * @param callback The callback to be executed when the API call finishes
     * @param restrictedDataToken Restricted Data Token (optional)
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call getShippingLabelAsync(
            String purchaseOrderNumber, final ApiCallback<ShippingLabel> callback, String restrictedDataToken)
            throws ApiException, LWAException {

        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = getShippingLabelValidateBeforeCall(purchaseOrderNumber, progressRequestListener);

        if (restrictedDataToken != null) {
            okhttp3.Request request = call.request();
            request = RestrictedDataTokenSigner.sign(
                    request, restrictedDataToken, "VendorShippingLabelsApi-getShippingLabel");
            call = apiClient.getHttpClient().newCall(request);
        }

        if (disableRateLimiting || getShippingLabelBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<ShippingLabel>() {}.getType();
            apiClient.executeAsync(call, localVarReturnType, callback);
            return call;
        } else throw new ApiException.RateLimitExceeded("getShippingLabel operation exceeds rate limit");
    }
    /**
     * Build call for getShippingLabels
     *
     * @param createdAfter Shipping labels that became available after this date and time will be included in the
     *     result. Values are in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format.
     *     (required)
     * @param createdBefore Shipping labels that became available before this date and time will be included in the
     *     result. Values are in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format.
     *     (required)
     * @param shipFromPartyId The vendor &#x60;warehouseId&#x60; for order fulfillment. If not specified, the result
     *     contains orders for all warehouses. (optional)
     * @param limit The limit to the number of records returned. (optional)
     * @param sortOrder The sort order creation date. You can choose between ascending (&#x60;ASC&#x60;) or descending
     *     (&#x60;DESC&#x60;) sort order. (optional, default to ASC)
     * @param nextToken Used for pagination when there are more ship labels than the specified result size limit. The
     *     token value is returned in the previous API call. (optional)
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    private okhttp3.Call getShippingLabelsCall(
            OffsetDateTime createdAfter,
            OffsetDateTime createdBefore,
            String shipFromPartyId,
            Integer limit,
            String sortOrder,
            String nextToken,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/vendor/directFulfillment/shipping/2021-12-28/shippingLabels";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (shipFromPartyId != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("shipFromPartyId", shipFromPartyId));
        if (limit != null) localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (createdAfter != null) localVarQueryParams.addAll(apiClient.parameterToPair("createdAfter", createdAfter));
        if (createdBefore != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("createdBefore", createdBefore));
        if (sortOrder != null) localVarQueryParams.addAll(apiClient.parameterToPair("sortOrder", sortOrder));
        if (nextToken != null) localVarQueryParams.addAll(apiClient.parameterToPair("nextToken", nextToken));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json", "pagination", "shippingLabels"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {};

        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        return apiClient.buildCall(
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                progressRequestListener);
    }

    private okhttp3.Call getShippingLabelsValidateBeforeCall(
            OffsetDateTime createdAfter,
            OffsetDateTime createdBefore,
            String shipFromPartyId,
            Integer limit,
            String sortOrder,
            String nextToken,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        // verify the required parameter 'createdAfter' is set
        if (createdAfter == null) {
            throw new ApiException(
                    "Missing the required parameter 'createdAfter' when calling getShippingLabels(Async)");
        }
        // verify the required parameter 'createdBefore' is set
        if (createdBefore == null) {
            throw new ApiException(
                    "Missing the required parameter 'createdBefore' when calling getShippingLabels(Async)");
        }

        return getShippingLabelsCall(
                createdAfter, createdBefore, shipFromPartyId, limit, sortOrder, nextToken, progressRequestListener);
    }

    /**
     * getShippingLabels Returns a list of shipping labels created during the time frame that you specify. Use the
     * &#x60;createdAfter&#x60; and &#x60;createdBefore&#x60; parameters to define the time frame. You must use both of
     * these parameters. The date range to search must not be more than seven days. **Usage Plan:** | Rate (requests per
     * second) | Burst | | ---- | ---- | | 10 | 10 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the
     * usage plan rate limits that were applied to the requested operation, when available. The preceding table
     * indicates the default rate and burst values for this operation. Selling partners whose business demands require
     * higher throughput may have higher rate and burst values then those shown here. For more information, refer to
     * [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits).
     *
     * @param createdAfter Shipping labels that became available after this date and time will be included in the
     *     result. Values are in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format.
     *     (required)
     * @param createdBefore Shipping labels that became available before this date and time will be included in the
     *     result. Values are in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format.
     *     (required)
     * @param shipFromPartyId The vendor &#x60;warehouseId&#x60; for order fulfillment. If not specified, the result
     *     contains orders for all warehouses. (optional)
     * @param limit The limit to the number of records returned. (optional)
     * @param sortOrder The sort order creation date. You can choose between ascending (&#x60;ASC&#x60;) or descending
     *     (&#x60;DESC&#x60;) sort order. (optional, default to ASC)
     * @param nextToken Used for pagination when there are more ship labels than the specified result size limit. The
     *     token value is returned in the previous API call. (optional)
     * @param restrictedDataToken Restricted Data Token (optional)
     * @return ShippingLabelList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ShippingLabelList getShippingLabels(
            OffsetDateTime createdAfter,
            OffsetDateTime createdBefore,
            String shipFromPartyId,
            Integer limit,
            String sortOrder,
            String nextToken,
            String restrictedDataToken)
            throws ApiException, LWAException {
        ApiResponse<ShippingLabelList> resp = getShippingLabelsWithHttpInfo(
                createdAfter, createdBefore, shipFromPartyId, limit, sortOrder, nextToken, restrictedDataToken);
        return resp.getData();
    }

    /**
     * getShippingLabels Returns a list of shipping labels created during the time frame that you specify. Use the
     * &#x60;createdAfter&#x60; and &#x60;createdBefore&#x60; parameters to define the time frame. You must use both of
     * these parameters. The date range to search must not be more than seven days. **Usage Plan:** | Rate (requests per
     * second) | Burst | | ---- | ---- | | 10 | 10 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the
     * usage plan rate limits that were applied to the requested operation, when available. The preceding table
     * indicates the default rate and burst values for this operation. Selling partners whose business demands require
     * higher throughput may have higher rate and burst values then those shown here. For more information, refer to
     * [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits).
     *
     * @param createdAfter Shipping labels that became available after this date and time will be included in the
     *     result. Values are in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format.
     *     (required)
     * @param createdBefore Shipping labels that became available before this date and time will be included in the
     *     result. Values are in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format.
     *     (required)
     * @param shipFromPartyId The vendor &#x60;warehouseId&#x60; for order fulfillment. If not specified, the result
     *     contains orders for all warehouses. (optional)
     * @param limit The limit to the number of records returned. (optional)
     * @param sortOrder The sort order creation date. You can choose between ascending (&#x60;ASC&#x60;) or descending
     *     (&#x60;DESC&#x60;) sort order. (optional, default to ASC)
     * @param nextToken Used for pagination when there are more ship labels than the specified result size limit. The
     *     token value is returned in the previous API call. (optional)
     * @return ShippingLabelList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ShippingLabelList getShippingLabels(
            OffsetDateTime createdAfter,
            OffsetDateTime createdBefore,
            String shipFromPartyId,
            Integer limit,
            String sortOrder,
            String nextToken)
            throws ApiException, LWAException {
        ApiResponse<ShippingLabelList> resp = getShippingLabelsWithHttpInfo(
                createdAfter, createdBefore, shipFromPartyId, limit, sortOrder, nextToken, null);
        return resp.getData();
    }

    /**
     * getShippingLabels Returns a list of shipping labels created during the time frame that you specify. Use the
     * &#x60;createdAfter&#x60; and &#x60;createdBefore&#x60; parameters to define the time frame. You must use both of
     * these parameters. The date range to search must not be more than seven days. **Usage Plan:** | Rate (requests per
     * second) | Burst | | ---- | ---- | | 10 | 10 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the
     * usage plan rate limits that were applied to the requested operation, when available. The preceding table
     * indicates the default rate and burst values for this operation. Selling partners whose business demands require
     * higher throughput may have higher rate and burst values then those shown here. For more information, refer to
     * [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits).
     *
     * @param createdAfter Shipping labels that became available after this date and time will be included in the
     *     result. Values are in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format.
     *     (required)
     * @param createdBefore Shipping labels that became available before this date and time will be included in the
     *     result. Values are in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format.
     *     (required)
     * @param shipFromPartyId The vendor &#x60;warehouseId&#x60; for order fulfillment. If not specified, the result
     *     contains orders for all warehouses. (optional)
     * @param limit The limit to the number of records returned. (optional)
     * @param sortOrder The sort order creation date. You can choose between ascending (&#x60;ASC&#x60;) or descending
     *     (&#x60;DESC&#x60;) sort order. (optional, default to ASC)
     * @param nextToken Used for pagination when there are more ship labels than the specified result size limit. The
     *     token value is returned in the previous API call. (optional)
     * @param restrictedDataToken Restricted Data Token (optional)
     * @return ApiResponse&lt;ShippingLabelList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<ShippingLabelList> getShippingLabelsWithHttpInfo(
            OffsetDateTime createdAfter,
            OffsetDateTime createdBefore,
            String shipFromPartyId,
            Integer limit,
            String sortOrder,
            String nextToken,
            String restrictedDataToken)
            throws ApiException, LWAException {
        okhttp3.Call call = getShippingLabelsValidateBeforeCall(
                createdAfter, createdBefore, shipFromPartyId, limit, sortOrder, nextToken, null);

        if (restrictedDataToken != null) {
            okhttp3.Request request = call.request();
            request = RestrictedDataTokenSigner.sign(
                    request, restrictedDataToken, "VendorShippingLabelsApi-getShippingLabels");
            call = apiClient.getHttpClient().newCall(request);
        }

        if (disableRateLimiting || getShippingLabelsBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<ShippingLabelList>() {}.getType();
            return apiClient.execute(call, localVarReturnType);
        } else throw new ApiException.RateLimitExceeded("getShippingLabels operation exceeds rate limit");
    }

    /**
     * getShippingLabels Returns a list of shipping labels created during the time frame that you specify. Use the
     * &#x60;createdAfter&#x60; and &#x60;createdBefore&#x60; parameters to define the time frame. You must use both of
     * these parameters. The date range to search must not be more than seven days. **Usage Plan:** | Rate (requests per
     * second) | Burst | | ---- | ---- | | 10 | 10 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the
     * usage plan rate limits that were applied to the requested operation, when available. The preceding table
     * indicates the default rate and burst values for this operation. Selling partners whose business demands require
     * higher throughput may have higher rate and burst values then those shown here. For more information, refer to
     * [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits).
     *
     * @param createdAfter Shipping labels that became available after this date and time will be included in the
     *     result. Values are in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format.
     *     (required)
     * @param createdBefore Shipping labels that became available before this date and time will be included in the
     *     result. Values are in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format.
     *     (required)
     * @param shipFromPartyId The vendor &#x60;warehouseId&#x60; for order fulfillment. If not specified, the result
     *     contains orders for all warehouses. (optional)
     * @param limit The limit to the number of records returned. (optional)
     * @param sortOrder The sort order creation date. You can choose between ascending (&#x60;ASC&#x60;) or descending
     *     (&#x60;DESC&#x60;) sort order. (optional, default to ASC)
     * @param nextToken Used for pagination when there are more ship labels than the specified result size limit. The
     *     token value is returned in the previous API call. (optional)
     * @return ApiResponse&lt;ShippingLabelList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<ShippingLabelList> getShippingLabelsWithHttpInfo(
            OffsetDateTime createdAfter,
            OffsetDateTime createdBefore,
            String shipFromPartyId,
            Integer limit,
            String sortOrder,
            String nextToken)
            throws ApiException, LWAException {
        return getShippingLabelsWithHttpInfo(
                createdAfter, createdBefore, shipFromPartyId, limit, sortOrder, nextToken, null);
    }

    /**
     * getShippingLabels (asynchronously) Returns a list of shipping labels created during the time frame that you
     * specify. Use the &#x60;createdAfter&#x60; and &#x60;createdBefore&#x60; parameters to define the time frame. You
     * must use both of these parameters. The date range to search must not be more than seven days. **Usage Plan:** |
     * Rate (requests per second) | Burst | | ---- | ---- | | 10 | 10 | The &#x60;x-amzn-RateLimit-Limit&#x60; response
     * header returns the usage plan rate limits that were applied to the requested operation, when available. The
     * preceding table indicates the default rate and burst values for this operation. Selling partners whose business
     * demands require higher throughput may have higher rate and burst values then those shown here. For more
     * information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits).
     *
     * @param createdAfter Shipping labels that became available after this date and time will be included in the
     *     result. Values are in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format.
     *     (required)
     * @param createdBefore Shipping labels that became available before this date and time will be included in the
     *     result. Values are in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format.
     *     (required)
     * @param shipFromPartyId The vendor &#x60;warehouseId&#x60; for order fulfillment. If not specified, the result
     *     contains orders for all warehouses. (optional)
     * @param limit The limit to the number of records returned. (optional)
     * @param sortOrder The sort order creation date. You can choose between ascending (&#x60;ASC&#x60;) or descending
     *     (&#x60;DESC&#x60;) sort order. (optional, default to ASC)
     * @param nextToken Used for pagination when there are more ship labels than the specified result size limit. The
     *     token value is returned in the previous API call. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call getShippingLabelsAsync(
            OffsetDateTime createdAfter,
            OffsetDateTime createdBefore,
            String shipFromPartyId,
            Integer limit,
            String sortOrder,
            String nextToken,
            final ApiCallback<ShippingLabelList> callback)
            throws ApiException, LWAException {
        return getShippingLabelsAsync(
                createdAfter, createdBefore, shipFromPartyId, limit, sortOrder, nextToken, callback, null);
    }
    /**
     * getShippingLabels (asynchronously) Returns a list of shipping labels created during the time frame that you
     * specify. Use the &#x60;createdAfter&#x60; and &#x60;createdBefore&#x60; parameters to define the time frame. You
     * must use both of these parameters. The date range to search must not be more than seven days. **Usage Plan:** |
     * Rate (requests per second) | Burst | | ---- | ---- | | 10 | 10 | The &#x60;x-amzn-RateLimit-Limit&#x60; response
     * header returns the usage plan rate limits that were applied to the requested operation, when available. The
     * preceding table indicates the default rate and burst values for this operation. Selling partners whose business
     * demands require higher throughput may have higher rate and burst values then those shown here. For more
     * information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits).
     *
     * @param createdAfter Shipping labels that became available after this date and time will be included in the
     *     result. Values are in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format.
     *     (required)
     * @param createdBefore Shipping labels that became available before this date and time will be included in the
     *     result. Values are in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format.
     *     (required)
     * @param shipFromPartyId The vendor &#x60;warehouseId&#x60; for order fulfillment. If not specified, the result
     *     contains orders for all warehouses. (optional)
     * @param limit The limit to the number of records returned. (optional)
     * @param sortOrder The sort order creation date. You can choose between ascending (&#x60;ASC&#x60;) or descending
     *     (&#x60;DESC&#x60;) sort order. (optional, default to ASC)
     * @param nextToken Used for pagination when there are more ship labels than the specified result size limit. The
     *     token value is returned in the previous API call. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @param restrictedDataToken Restricted Data Token (optional)
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call getShippingLabelsAsync(
            OffsetDateTime createdAfter,
            OffsetDateTime createdBefore,
            String shipFromPartyId,
            Integer limit,
            String sortOrder,
            String nextToken,
            final ApiCallback<ShippingLabelList> callback,
            String restrictedDataToken)
            throws ApiException, LWAException {

        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = getShippingLabelsValidateBeforeCall(
                createdAfter, createdBefore, shipFromPartyId, limit, sortOrder, nextToken, progressRequestListener);

        if (restrictedDataToken != null) {
            okhttp3.Request request = call.request();
            request = RestrictedDataTokenSigner.sign(
                    request, restrictedDataToken, "VendorShippingLabelsApi-getShippingLabels");
            call = apiClient.getHttpClient().newCall(request);
        }

        if (disableRateLimiting || getShippingLabelsBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<ShippingLabelList>() {}.getType();
            apiClient.executeAsync(call, localVarReturnType, callback);
            return call;
        } else throw new ApiException.RateLimitExceeded("getShippingLabels operation exceeds rate limit");
    }
    /**
     * Build call for submitShippingLabelRequest
     *
     * @param body The request body that contains the shipping labels data. (required)
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    private okhttp3.Call submitShippingLabelRequestCall(
            SubmitShippingLabelsRequest body, final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/vendor/directFulfillment/shipping/2021-12-28/shippingLabels";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        return apiClient.buildCall(
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                progressRequestListener);
    }

    private okhttp3.Call submitShippingLabelRequestValidateBeforeCall(
            SubmitShippingLabelsRequest body, final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException(
                    "Missing the required parameter 'body' when calling submitShippingLabelRequest(Async)");
        }

        return submitShippingLabelRequestCall(body, progressRequestListener);
    }

    /**
     * submitShippingLabelRequest Creates a shipping label for a purchase order and returns a &#x60;transactionId&#x60;
     * for reference. **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 10 | The
     * &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the
     * requested operation, when available. The preceding table indicates the default rate and burst values for this
     * operation. Selling partners whose business demands require higher throughput may have higher rate and burst
     * values then those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits).
     *
     * @param body The request body that contains the shipping labels data. (required)
     * @param restrictedDataToken Restricted Data Token (optional)
     * @return TransactionReference
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public TransactionReference submitShippingLabelRequest(SubmitShippingLabelsRequest body, String restrictedDataToken)
            throws ApiException, LWAException {
        ApiResponse<TransactionReference> resp = submitShippingLabelRequestWithHttpInfo(body, restrictedDataToken);
        return resp.getData();
    }

    /**
     * submitShippingLabelRequest Creates a shipping label for a purchase order and returns a &#x60;transactionId&#x60;
     * for reference. **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 10 | The
     * &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the
     * requested operation, when available. The preceding table indicates the default rate and burst values for this
     * operation. Selling partners whose business demands require higher throughput may have higher rate and burst
     * values then those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits).
     *
     * @param body The request body that contains the shipping labels data. (required)
     * @return TransactionReference
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public TransactionReference submitShippingLabelRequest(SubmitShippingLabelsRequest body)
            throws ApiException, LWAException {
        ApiResponse<TransactionReference> resp = submitShippingLabelRequestWithHttpInfo(body, null);
        return resp.getData();
    }

    /**
     * submitShippingLabelRequest Creates a shipping label for a purchase order and returns a &#x60;transactionId&#x60;
     * for reference. **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 10 | The
     * &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the
     * requested operation, when available. The preceding table indicates the default rate and burst values for this
     * operation. Selling partners whose business demands require higher throughput may have higher rate and burst
     * values then those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits).
     *
     * @param body The request body that contains the shipping labels data. (required)
     * @param restrictedDataToken Restricted Data Token (optional)
     * @return ApiResponse&lt;TransactionReference&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<TransactionReference> submitShippingLabelRequestWithHttpInfo(
            SubmitShippingLabelsRequest body, String restrictedDataToken) throws ApiException, LWAException {
        okhttp3.Call call = submitShippingLabelRequestValidateBeforeCall(body, null);

        if (restrictedDataToken != null) {
            okhttp3.Request request = call.request();
            request = RestrictedDataTokenSigner.sign(
                    request, restrictedDataToken, "VendorShippingLabelsApi-submitShippingLabelRequest");
            call = apiClient.getHttpClient().newCall(request);
        }

        if (disableRateLimiting || submitShippingLabelRequestBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<TransactionReference>() {}.getType();
            return apiClient.execute(call, localVarReturnType);
        } else throw new ApiException.RateLimitExceeded("submitShippingLabelRequest operation exceeds rate limit");
    }

    /**
     * submitShippingLabelRequest Creates a shipping label for a purchase order and returns a &#x60;transactionId&#x60;
     * for reference. **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 10 | The
     * &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the
     * requested operation, when available. The preceding table indicates the default rate and burst values for this
     * operation. Selling partners whose business demands require higher throughput may have higher rate and burst
     * values then those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits).
     *
     * @param body The request body that contains the shipping labels data. (required)
     * @return ApiResponse&lt;TransactionReference&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<TransactionReference> submitShippingLabelRequestWithHttpInfo(SubmitShippingLabelsRequest body)
            throws ApiException, LWAException {
        return submitShippingLabelRequestWithHttpInfo(body, null);
    }

    /**
     * submitShippingLabelRequest (asynchronously) Creates a shipping label for a purchase order and returns a
     * &#x60;transactionId&#x60; for reference. **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | |
     * 10 | 10 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were
     * applied to the requested operation, when available. The preceding table indicates the default rate and burst
     * values for this operation. Selling partners whose business demands require higher throughput may have higher rate
     * and burst values then those shown here. For more information, refer to [Usage Plans and Rate Limits in the
     * Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits).
     *
     * @param body The request body that contains the shipping labels data. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call submitShippingLabelRequestAsync(
            SubmitShippingLabelsRequest body, final ApiCallback<TransactionReference> callback)
            throws ApiException, LWAException {
        return submitShippingLabelRequestAsync(body, callback, null);
    }
    /**
     * submitShippingLabelRequest (asynchronously) Creates a shipping label for a purchase order and returns a
     * &#x60;transactionId&#x60; for reference. **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | |
     * 10 | 10 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were
     * applied to the requested operation, when available. The preceding table indicates the default rate and burst
     * values for this operation. Selling partners whose business demands require higher throughput may have higher rate
     * and burst values then those shown here. For more information, refer to [Usage Plans and Rate Limits in the
     * Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits).
     *
     * @param body The request body that contains the shipping labels data. (required)
     * @param callback The callback to be executed when the API call finishes
     * @param restrictedDataToken Restricted Data Token (optional)
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call submitShippingLabelRequestAsync(
            SubmitShippingLabelsRequest body,
            final ApiCallback<TransactionReference> callback,
            String restrictedDataToken)
            throws ApiException, LWAException {

        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = submitShippingLabelRequestValidateBeforeCall(body, progressRequestListener);

        if (restrictedDataToken != null) {
            okhttp3.Request request = call.request();
            request = RestrictedDataTokenSigner.sign(
                    request, restrictedDataToken, "VendorShippingLabelsApi-submitShippingLabelRequest");
            call = apiClient.getHttpClient().newCall(request);
        }

        if (disableRateLimiting || submitShippingLabelRequestBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<TransactionReference>() {}.getType();
            apiClient.executeAsync(call, localVarReturnType, callback);
            return call;
        } else throw new ApiException.RateLimitExceeded("submitShippingLabelRequest operation exceeds rate limit");
    }

    public static class Builder {
        private LWAAuthorizationCredentials lwaAuthorizationCredentials;
        private String endpoint;
        private LWAAccessTokenCache lwaAccessTokenCache;
        private Boolean disableAccessTokenCache = false;
        private Boolean disableRateLimiting = false;

        public Builder lwaAuthorizationCredentials(LWAAuthorizationCredentials lwaAuthorizationCredentials) {
            this.lwaAuthorizationCredentials = lwaAuthorizationCredentials;
            return this;
        }

        public Builder endpoint(String endpoint) {
            this.endpoint = endpoint;
            return this;
        }

        public Builder lwaAccessTokenCache(LWAAccessTokenCache lwaAccessTokenCache) {
            this.lwaAccessTokenCache = lwaAccessTokenCache;
            return this;
        }

        public Builder disableAccessTokenCache() {
            this.disableAccessTokenCache = true;
            return this;
        }

        public Builder disableRateLimiting() {
            this.disableRateLimiting = true;
            return this;
        }

        public VendorShippingLabelsApi build() {
            if (lwaAuthorizationCredentials == null) {
                throw new RuntimeException("LWAAuthorizationCredentials not set");
            }

            if (StringUtil.isEmpty(endpoint)) {
                throw new RuntimeException("Endpoint not set");
            }

            LWAAuthorizationSigner lwaAuthorizationSigner = null;
            if (disableAccessTokenCache) {
                lwaAuthorizationSigner = new LWAAuthorizationSigner(lwaAuthorizationCredentials);
            } else {
                if (lwaAccessTokenCache == null) {
                    lwaAccessTokenCache = new LWAAccessTokenCacheImpl();
                }
                lwaAuthorizationSigner = new LWAAuthorizationSigner(lwaAuthorizationCredentials, lwaAccessTokenCache);
            }

            return new VendorShippingLabelsApi(
                    new ApiClient()
                            .setLWAAuthorizationSigner(lwaAuthorizationSigner)
                            .setBasePath(endpoint),
                    disableRateLimiting);
        }
    }
}
