/*
 * Selling Partner APIs for Fulfillment Outbound
 * The Selling Partner API for Fulfillment Outbound lets you create applications that help a seller fulfill Multi-Channel Fulfillment orders using their inventory in Amazon's fulfillment network. You can get information on both potential and existing fulfillment orders.
 *
 * OpenAPI spec version: 2020-07-01
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package software.amazon.spapi.api.fulfillment.outbound.v2020_07_01;

import com.amazon.SellingPartnerAPIAA.LWAAccessTokenCache;
import com.amazon.SellingPartnerAPIAA.LWAAccessTokenCacheImpl;
import com.amazon.SellingPartnerAPIAA.LWAAuthorizationCredentials;
import com.amazon.SellingPartnerAPIAA.LWAAuthorizationSigner;
import com.amazon.SellingPartnerAPIAA.LWAException;
import com.amazon.SellingPartnerAPIAA.RestrictedDataTokenSigner;
import com.google.gson.reflect.TypeToken;
import io.github.bucket4j.Bucket;
import java.lang.reflect.Type;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import software.amazon.spapi.ApiCallback;
import software.amazon.spapi.ApiClient;
import software.amazon.spapi.ApiException;
import software.amazon.spapi.ApiResponse;
import software.amazon.spapi.Configuration;
import software.amazon.spapi.Pair;
import software.amazon.spapi.ProgressRequestBody;
import software.amazon.spapi.StringUtil;
import software.amazon.spapi.models.fulfillment.outbound.v2020_07_01.CancelFulfillmentOrderResponse;
import software.amazon.spapi.models.fulfillment.outbound.v2020_07_01.CreateFulfillmentOrderRequest;
import software.amazon.spapi.models.fulfillment.outbound.v2020_07_01.CreateFulfillmentOrderResponse;
import software.amazon.spapi.models.fulfillment.outbound.v2020_07_01.CreateFulfillmentReturnRequest;
import software.amazon.spapi.models.fulfillment.outbound.v2020_07_01.CreateFulfillmentReturnResponse;
import software.amazon.spapi.models.fulfillment.outbound.v2020_07_01.GetDeliveryOffersRequest;
import software.amazon.spapi.models.fulfillment.outbound.v2020_07_01.GetDeliveryOffersResponse;
import software.amazon.spapi.models.fulfillment.outbound.v2020_07_01.GetFeatureInventoryResponse;
import software.amazon.spapi.models.fulfillment.outbound.v2020_07_01.GetFeatureSkuResponse;
import software.amazon.spapi.models.fulfillment.outbound.v2020_07_01.GetFeaturesResponse;
import software.amazon.spapi.models.fulfillment.outbound.v2020_07_01.GetFulfillmentOrderResponse;
import software.amazon.spapi.models.fulfillment.outbound.v2020_07_01.GetFulfillmentPreviewRequest;
import software.amazon.spapi.models.fulfillment.outbound.v2020_07_01.GetFulfillmentPreviewResponse;
import software.amazon.spapi.models.fulfillment.outbound.v2020_07_01.GetPackageTrackingDetailsResponse;
import software.amazon.spapi.models.fulfillment.outbound.v2020_07_01.ListAllFulfillmentOrdersResponse;
import software.amazon.spapi.models.fulfillment.outbound.v2020_07_01.ListReturnReasonCodesResponse;
import software.amazon.spapi.models.fulfillment.outbound.v2020_07_01.SubmitFulfillmentOrderStatusUpdateRequest;
import software.amazon.spapi.models.fulfillment.outbound.v2020_07_01.SubmitFulfillmentOrderStatusUpdateResponse;
import software.amazon.spapi.models.fulfillment.outbound.v2020_07_01.UpdateFulfillmentOrderRequest;
import software.amazon.spapi.models.fulfillment.outbound.v2020_07_01.UpdateFulfillmentOrderResponse;

public class FbaOutboundApi {
    private ApiClient apiClient;
    private Boolean disableRateLimiting;

    public FbaOutboundApi(ApiClient apiClient, Boolean disableRateLimiting) {
        this.apiClient = apiClient;
        this.disableRateLimiting = disableRateLimiting;
    }

    private final Configuration config = Configuration.get();

    public final Bucket cancelFulfillmentOrderBucket = Bucket.builder()
            .addLimit(config.getLimit("FbaOutboundApi-cancelFulfillmentOrder"))
            .build();

    public final Bucket createFulfillmentOrderBucket = Bucket.builder()
            .addLimit(config.getLimit("FbaOutboundApi-createFulfillmentOrder"))
            .build();

    public final Bucket createFulfillmentReturnBucket = Bucket.builder()
            .addLimit(config.getLimit("FbaOutboundApi-createFulfillmentReturn"))
            .build();

    public final Bucket deliveryOffersBucket = Bucket.builder()
            .addLimit(config.getLimit("FbaOutboundApi-deliveryOffers"))
            .build();

    public final Bucket getFeatureInventoryBucket = Bucket.builder()
            .addLimit(config.getLimit("FbaOutboundApi-getFeatureInventory"))
            .build();

    public final Bucket getFeatureSKUBucket = Bucket.builder()
            .addLimit(config.getLimit("FbaOutboundApi-getFeatureSKU"))
            .build();

    public final Bucket getFeaturesBucket = Bucket.builder()
            .addLimit(config.getLimit("FbaOutboundApi-getFeatures"))
            .build();

    public final Bucket getFulfillmentOrderBucket = Bucket.builder()
            .addLimit(config.getLimit("FbaOutboundApi-getFulfillmentOrder"))
            .build();

    public final Bucket getFulfillmentPreviewBucket = Bucket.builder()
            .addLimit(config.getLimit("FbaOutboundApi-getFulfillmentPreview"))
            .build();

    public final Bucket getPackageTrackingDetailsBucket = Bucket.builder()
            .addLimit(config.getLimit("FbaOutboundApi-getPackageTrackingDetails"))
            .build();

    public final Bucket listAllFulfillmentOrdersBucket = Bucket.builder()
            .addLimit(config.getLimit("FbaOutboundApi-listAllFulfillmentOrders"))
            .build();

    public final Bucket listReturnReasonCodesBucket = Bucket.builder()
            .addLimit(config.getLimit("FbaOutboundApi-listReturnReasonCodes"))
            .build();

    public final Bucket submitFulfillmentOrderStatusUpdateBucket = Bucket.builder()
            .addLimit(config.getLimit("FbaOutboundApi-submitFulfillmentOrderStatusUpdate"))
            .build();

    public final Bucket updateFulfillmentOrderBucket = Bucket.builder()
            .addLimit(config.getLimit("FbaOutboundApi-updateFulfillmentOrder"))
            .build();

    /**
     * Build call for cancelFulfillmentOrder
     *
     * @param sellerFulfillmentOrderId The identifier assigned to the item by the seller when the fulfillment order was
     *     created. (required)
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    private okhttp3.Call cancelFulfillmentOrderCall(
            String sellerFulfillmentOrderId, final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/fba/outbound/2020-07-01/fulfillmentOrders/{sellerFulfillmentOrderId}/cancel"
                .replaceAll(
                        "\\{" + "sellerFulfillmentOrderId" + "\\}",
                        apiClient.escapeString(sellerFulfillmentOrderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {};

        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        return apiClient.buildCall(
                localVarPath,
                "PUT",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                progressRequestListener);
    }

    private okhttp3.Call cancelFulfillmentOrderValidateBeforeCall(
            String sellerFulfillmentOrderId, final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        // verify the required parameter 'sellerFulfillmentOrderId' is set
        if (sellerFulfillmentOrderId == null) {
            throw new ApiException(
                    "Missing the required parameter 'sellerFulfillmentOrderId' when calling cancelFulfillmentOrder(Async)");
        }

        return cancelFulfillmentOrderCall(sellerFulfillmentOrderId, progressRequestListener);
    }

    /**
     * Requests that Amazon stop attempting to fulfill the fulfillment order indicated by the specified order
     * identifier. **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 | The
     * &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the
     * requested operation, when available. The table above indicates the default rate and burst values for this
     * operation. Selling partners whose business demands require higher throughput may have higher rate and burst
     * values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param sellerFulfillmentOrderId The identifier assigned to the item by the seller when the fulfillment order was
     *     created. (required)
     * @param restrictedDataToken Restricted Data Token (optional)
     * @return CancelFulfillmentOrderResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public CancelFulfillmentOrderResponse cancelFulfillmentOrder(
            String sellerFulfillmentOrderId, String restrictedDataToken) throws ApiException, LWAException {
        ApiResponse<CancelFulfillmentOrderResponse> resp =
                cancelFulfillmentOrderWithHttpInfo(sellerFulfillmentOrderId, restrictedDataToken);
        return resp.getData();
    }

    /**
     * Requests that Amazon stop attempting to fulfill the fulfillment order indicated by the specified order
     * identifier. **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 | The
     * &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the
     * requested operation, when available. The table above indicates the default rate and burst values for this
     * operation. Selling partners whose business demands require higher throughput may have higher rate and burst
     * values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param sellerFulfillmentOrderId The identifier assigned to the item by the seller when the fulfillment order was
     *     created. (required)
     * @return CancelFulfillmentOrderResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public CancelFulfillmentOrderResponse cancelFulfillmentOrder(String sellerFulfillmentOrderId)
            throws ApiException, LWAException {
        ApiResponse<CancelFulfillmentOrderResponse> resp =
                cancelFulfillmentOrderWithHttpInfo(sellerFulfillmentOrderId, null);
        return resp.getData();
    }

    /**
     * Requests that Amazon stop attempting to fulfill the fulfillment order indicated by the specified order
     * identifier. **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 | The
     * &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the
     * requested operation, when available. The table above indicates the default rate and burst values for this
     * operation. Selling partners whose business demands require higher throughput may have higher rate and burst
     * values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param sellerFulfillmentOrderId The identifier assigned to the item by the seller when the fulfillment order was
     *     created. (required)
     * @param restrictedDataToken Restricted Data Token (optional)
     * @return ApiResponse&lt;CancelFulfillmentOrderResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<CancelFulfillmentOrderResponse> cancelFulfillmentOrderWithHttpInfo(
            String sellerFulfillmentOrderId, String restrictedDataToken) throws ApiException, LWAException {
        okhttp3.Call call = cancelFulfillmentOrderValidateBeforeCall(sellerFulfillmentOrderId, null);

        if (restrictedDataToken != null) {
            okhttp3.Request request = call.request();
            request = RestrictedDataTokenSigner.sign(
                    request, restrictedDataToken, "FbaOutboundApi-cancelFulfillmentOrder");
            call = apiClient.getHttpClient().newCall(request);
        }

        if (disableRateLimiting || cancelFulfillmentOrderBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<CancelFulfillmentOrderResponse>() {}.getType();
            return apiClient.execute(call, localVarReturnType);
        } else throw new ApiException.RateLimitExceeded("cancelFulfillmentOrder operation exceeds rate limit");
    }

    /**
     * Requests that Amazon stop attempting to fulfill the fulfillment order indicated by the specified order
     * identifier. **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 | The
     * &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the
     * requested operation, when available. The table above indicates the default rate and burst values for this
     * operation. Selling partners whose business demands require higher throughput may have higher rate and burst
     * values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param sellerFulfillmentOrderId The identifier assigned to the item by the seller when the fulfillment order was
     *     created. (required)
     * @return ApiResponse&lt;CancelFulfillmentOrderResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<CancelFulfillmentOrderResponse> cancelFulfillmentOrderWithHttpInfo(
            String sellerFulfillmentOrderId) throws ApiException, LWAException {
        return cancelFulfillmentOrderWithHttpInfo(sellerFulfillmentOrderId, null);
    }

    /**
     * (asynchronously) Requests that Amazon stop attempting to fulfill the fulfillment order indicated by the specified
     * order identifier. **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 | The
     * &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the
     * requested operation, when available. The table above indicates the default rate and burst values for this
     * operation. Selling partners whose business demands require higher throughput may have higher rate and burst
     * values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param sellerFulfillmentOrderId The identifier assigned to the item by the seller when the fulfillment order was
     *     created. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call cancelFulfillmentOrderAsync(
            String sellerFulfillmentOrderId, final ApiCallback<CancelFulfillmentOrderResponse> callback)
            throws ApiException, LWAException {
        return cancelFulfillmentOrderAsync(sellerFulfillmentOrderId, callback, null);
    }
    /**
     * (asynchronously) Requests that Amazon stop attempting to fulfill the fulfillment order indicated by the specified
     * order identifier. **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 | The
     * &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the
     * requested operation, when available. The table above indicates the default rate and burst values for this
     * operation. Selling partners whose business demands require higher throughput may have higher rate and burst
     * values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param sellerFulfillmentOrderId The identifier assigned to the item by the seller when the fulfillment order was
     *     created. (required)
     * @param callback The callback to be executed when the API call finishes
     * @param restrictedDataToken Restricted Data Token (optional)
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call cancelFulfillmentOrderAsync(
            String sellerFulfillmentOrderId,
            final ApiCallback<CancelFulfillmentOrderResponse> callback,
            String restrictedDataToken)
            throws ApiException, LWAException {

        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = cancelFulfillmentOrderValidateBeforeCall(sellerFulfillmentOrderId, progressRequestListener);

        if (restrictedDataToken != null) {
            okhttp3.Request request = call.request();
            request = RestrictedDataTokenSigner.sign(
                    request, restrictedDataToken, "FbaOutboundApi-cancelFulfillmentOrder");
            call = apiClient.getHttpClient().newCall(request);
        }

        if (disableRateLimiting || cancelFulfillmentOrderBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<CancelFulfillmentOrderResponse>() {}.getType();
            apiClient.executeAsync(call, localVarReturnType, callback);
            return call;
        } else throw new ApiException.RateLimitExceeded("cancelFulfillmentOrder operation exceeds rate limit");
    }
    /**
     * Build call for createFulfillmentOrder
     *
     * @param body CreateFulfillmentOrderRequest parameter (required)
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    private okhttp3.Call createFulfillmentOrderCall(
            CreateFulfillmentOrderRequest body,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/fba/outbound/2020-07-01/fulfillmentOrders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        return apiClient.buildCall(
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                progressRequestListener);
    }

    private okhttp3.Call createFulfillmentOrderValidateBeforeCall(
            CreateFulfillmentOrderRequest body,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createFulfillmentOrder(Async)");
        }

        return createFulfillmentOrderCall(body, progressRequestListener);
    }

    /**
     * Requests that Amazon ship items from the seller&#x27;s inventory in Amazon&#x27;s fulfillment network to a
     * destination address. **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 | The
     * &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the
     * requested operation, when available. The table above indicates the default rate and burst values for this
     * operation. Selling partners whose business demands require higher throughput may have higher rate and burst
     * values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api)
     *
     * @param body CreateFulfillmentOrderRequest parameter (required)
     * @param restrictedDataToken Restricted Data Token (optional)
     * @return CreateFulfillmentOrderResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public CreateFulfillmentOrderResponse createFulfillmentOrder(
            CreateFulfillmentOrderRequest body, String restrictedDataToken) throws ApiException, LWAException {
        ApiResponse<CreateFulfillmentOrderResponse> resp =
                createFulfillmentOrderWithHttpInfo(body, restrictedDataToken);
        return resp.getData();
    }

    /**
     * Requests that Amazon ship items from the seller&#x27;s inventory in Amazon&#x27;s fulfillment network to a
     * destination address. **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 | The
     * &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the
     * requested operation, when available. The table above indicates the default rate and burst values for this
     * operation. Selling partners whose business demands require higher throughput may have higher rate and burst
     * values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api)
     *
     * @param body CreateFulfillmentOrderRequest parameter (required)
     * @return CreateFulfillmentOrderResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public CreateFulfillmentOrderResponse createFulfillmentOrder(CreateFulfillmentOrderRequest body)
            throws ApiException, LWAException {
        ApiResponse<CreateFulfillmentOrderResponse> resp = createFulfillmentOrderWithHttpInfo(body, null);
        return resp.getData();
    }

    /**
     * Requests that Amazon ship items from the seller&#x27;s inventory in Amazon&#x27;s fulfillment network to a
     * destination address. **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 | The
     * &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the
     * requested operation, when available. The table above indicates the default rate and burst values for this
     * operation. Selling partners whose business demands require higher throughput may have higher rate and burst
     * values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api)
     *
     * @param body CreateFulfillmentOrderRequest parameter (required)
     * @param restrictedDataToken Restricted Data Token (optional)
     * @return ApiResponse&lt;CreateFulfillmentOrderResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<CreateFulfillmentOrderResponse> createFulfillmentOrderWithHttpInfo(
            CreateFulfillmentOrderRequest body, String restrictedDataToken) throws ApiException, LWAException {
        okhttp3.Call call = createFulfillmentOrderValidateBeforeCall(body, null);

        if (restrictedDataToken != null) {
            okhttp3.Request request = call.request();
            request = RestrictedDataTokenSigner.sign(
                    request, restrictedDataToken, "FbaOutboundApi-createFulfillmentOrder");
            call = apiClient.getHttpClient().newCall(request);
        }

        if (disableRateLimiting || createFulfillmentOrderBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<CreateFulfillmentOrderResponse>() {}.getType();
            return apiClient.execute(call, localVarReturnType);
        } else throw new ApiException.RateLimitExceeded("createFulfillmentOrder operation exceeds rate limit");
    }

    /**
     * Requests that Amazon ship items from the seller&#x27;s inventory in Amazon&#x27;s fulfillment network to a
     * destination address. **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 | The
     * &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the
     * requested operation, when available. The table above indicates the default rate and burst values for this
     * operation. Selling partners whose business demands require higher throughput may have higher rate and burst
     * values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api)
     *
     * @param body CreateFulfillmentOrderRequest parameter (required)
     * @return ApiResponse&lt;CreateFulfillmentOrderResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<CreateFulfillmentOrderResponse> createFulfillmentOrderWithHttpInfo(
            CreateFulfillmentOrderRequest body) throws ApiException, LWAException {
        return createFulfillmentOrderWithHttpInfo(body, null);
    }

    /**
     * (asynchronously) Requests that Amazon ship items from the seller&#x27;s inventory in Amazon&#x27;s fulfillment
     * network to a destination address. **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30
     * | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to
     * the requested operation, when available. The table above indicates the default rate and burst values for this
     * operation. Selling partners whose business demands require higher throughput may have higher rate and burst
     * values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api)
     *
     * @param body CreateFulfillmentOrderRequest parameter (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call createFulfillmentOrderAsync(
            CreateFulfillmentOrderRequest body, final ApiCallback<CreateFulfillmentOrderResponse> callback)
            throws ApiException, LWAException {
        return createFulfillmentOrderAsync(body, callback, null);
    }
    /**
     * (asynchronously) Requests that Amazon ship items from the seller&#x27;s inventory in Amazon&#x27;s fulfillment
     * network to a destination address. **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30
     * | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to
     * the requested operation, when available. The table above indicates the default rate and burst values for this
     * operation. Selling partners whose business demands require higher throughput may have higher rate and burst
     * values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api)
     *
     * @param body CreateFulfillmentOrderRequest parameter (required)
     * @param callback The callback to be executed when the API call finishes
     * @param restrictedDataToken Restricted Data Token (optional)
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call createFulfillmentOrderAsync(
            CreateFulfillmentOrderRequest body,
            final ApiCallback<CreateFulfillmentOrderResponse> callback,
            String restrictedDataToken)
            throws ApiException, LWAException {

        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = createFulfillmentOrderValidateBeforeCall(body, progressRequestListener);

        if (restrictedDataToken != null) {
            okhttp3.Request request = call.request();
            request = RestrictedDataTokenSigner.sign(
                    request, restrictedDataToken, "FbaOutboundApi-createFulfillmentOrder");
            call = apiClient.getHttpClient().newCall(request);
        }

        if (disableRateLimiting || createFulfillmentOrderBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<CreateFulfillmentOrderResponse>() {}.getType();
            apiClient.executeAsync(call, localVarReturnType, callback);
            return call;
        } else throw new ApiException.RateLimitExceeded("createFulfillmentOrder operation exceeds rate limit");
    }
    /**
     * Build call for createFulfillmentReturn
     *
     * @param body CreateFulfillmentReturnRequest parameter (required)
     * @param sellerFulfillmentOrderId An identifier assigned by the seller to the fulfillment order at the time it was
     *     created. The seller uses their own records to find the correct &#x60;SellerFulfillmentOrderId&#x60; value
     *     based on the buyer&#x27;s request to return items. (required)
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    private okhttp3.Call createFulfillmentReturnCall(
            CreateFulfillmentReturnRequest body,
            String sellerFulfillmentOrderId,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/fba/outbound/2020-07-01/fulfillmentOrders/{sellerFulfillmentOrderId}/return"
                .replaceAll(
                        "\\{" + "sellerFulfillmentOrderId" + "\\}",
                        apiClient.escapeString(sellerFulfillmentOrderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json", "payload"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        return apiClient.buildCall(
                localVarPath,
                "PUT",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                progressRequestListener);
    }

    private okhttp3.Call createFulfillmentReturnValidateBeforeCall(
            CreateFulfillmentReturnRequest body,
            String sellerFulfillmentOrderId,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createFulfillmentReturn(Async)");
        }
        // verify the required parameter 'sellerFulfillmentOrderId' is set
        if (sellerFulfillmentOrderId == null) {
            throw new ApiException(
                    "Missing the required parameter 'sellerFulfillmentOrderId' when calling createFulfillmentReturn(Async)");
        }

        return createFulfillmentReturnCall(body, sellerFulfillmentOrderId, progressRequestListener);
    }

    /**
     * Creates a fulfillment return. **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |
     * The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to
     * the requested operation, when available. The table above indicates the default rate and burst values for this
     * operation. Selling partners whose business demands require higher throughput may have higher rate and burst
     * values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param body CreateFulfillmentReturnRequest parameter (required)
     * @param sellerFulfillmentOrderId An identifier assigned by the seller to the fulfillment order at the time it was
     *     created. The seller uses their own records to find the correct &#x60;SellerFulfillmentOrderId&#x60; value
     *     based on the buyer&#x27;s request to return items. (required)
     * @param restrictedDataToken Restricted Data Token (optional)
     * @return CreateFulfillmentReturnResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public CreateFulfillmentReturnResponse createFulfillmentReturn(
            CreateFulfillmentReturnRequest body, String sellerFulfillmentOrderId, String restrictedDataToken)
            throws ApiException, LWAException {
        ApiResponse<CreateFulfillmentReturnResponse> resp =
                createFulfillmentReturnWithHttpInfo(body, sellerFulfillmentOrderId, restrictedDataToken);
        return resp.getData();
    }

    /**
     * Creates a fulfillment return. **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |
     * The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to
     * the requested operation, when available. The table above indicates the default rate and burst values for this
     * operation. Selling partners whose business demands require higher throughput may have higher rate and burst
     * values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param body CreateFulfillmentReturnRequest parameter (required)
     * @param sellerFulfillmentOrderId An identifier assigned by the seller to the fulfillment order at the time it was
     *     created. The seller uses their own records to find the correct &#x60;SellerFulfillmentOrderId&#x60; value
     *     based on the buyer&#x27;s request to return items. (required)
     * @return CreateFulfillmentReturnResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public CreateFulfillmentReturnResponse createFulfillmentReturn(
            CreateFulfillmentReturnRequest body, String sellerFulfillmentOrderId) throws ApiException, LWAException {
        ApiResponse<CreateFulfillmentReturnResponse> resp =
                createFulfillmentReturnWithHttpInfo(body, sellerFulfillmentOrderId, null);
        return resp.getData();
    }

    /**
     * Creates a fulfillment return. **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |
     * The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to
     * the requested operation, when available. The table above indicates the default rate and burst values for this
     * operation. Selling partners whose business demands require higher throughput may have higher rate and burst
     * values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param body CreateFulfillmentReturnRequest parameter (required)
     * @param sellerFulfillmentOrderId An identifier assigned by the seller to the fulfillment order at the time it was
     *     created. The seller uses their own records to find the correct &#x60;SellerFulfillmentOrderId&#x60; value
     *     based on the buyer&#x27;s request to return items. (required)
     * @param restrictedDataToken Restricted Data Token (optional)
     * @return ApiResponse&lt;CreateFulfillmentReturnResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<CreateFulfillmentReturnResponse> createFulfillmentReturnWithHttpInfo(
            CreateFulfillmentReturnRequest body, String sellerFulfillmentOrderId, String restrictedDataToken)
            throws ApiException, LWAException {
        okhttp3.Call call = createFulfillmentReturnValidateBeforeCall(body, sellerFulfillmentOrderId, null);

        if (restrictedDataToken != null) {
            okhttp3.Request request = call.request();
            request = RestrictedDataTokenSigner.sign(
                    request, restrictedDataToken, "FbaOutboundApi-createFulfillmentReturn");
            call = apiClient.getHttpClient().newCall(request);
        }

        if (disableRateLimiting || createFulfillmentReturnBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<CreateFulfillmentReturnResponse>() {}.getType();
            return apiClient.execute(call, localVarReturnType);
        } else throw new ApiException.RateLimitExceeded("createFulfillmentReturn operation exceeds rate limit");
    }

    /**
     * Creates a fulfillment return. **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |
     * The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to
     * the requested operation, when available. The table above indicates the default rate and burst values for this
     * operation. Selling partners whose business demands require higher throughput may have higher rate and burst
     * values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param body CreateFulfillmentReturnRequest parameter (required)
     * @param sellerFulfillmentOrderId An identifier assigned by the seller to the fulfillment order at the time it was
     *     created. The seller uses their own records to find the correct &#x60;SellerFulfillmentOrderId&#x60; value
     *     based on the buyer&#x27;s request to return items. (required)
     * @return ApiResponse&lt;CreateFulfillmentReturnResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<CreateFulfillmentReturnResponse> createFulfillmentReturnWithHttpInfo(
            CreateFulfillmentReturnRequest body, String sellerFulfillmentOrderId) throws ApiException, LWAException {
        return createFulfillmentReturnWithHttpInfo(body, sellerFulfillmentOrderId, null);
    }

    /**
     * (asynchronously) Creates a fulfillment return. **Usage Plan:** | Rate (requests per second) | Burst | | ---- |
     * ---- | | 2 | 30 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that
     * were applied to the requested operation, when available. The table above indicates the default rate and burst
     * values for this operation. Selling partners whose business demands require higher throughput may have higher rate
     * and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the
     * Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param body CreateFulfillmentReturnRequest parameter (required)
     * @param sellerFulfillmentOrderId An identifier assigned by the seller to the fulfillment order at the time it was
     *     created. The seller uses their own records to find the correct &#x60;SellerFulfillmentOrderId&#x60; value
     *     based on the buyer&#x27;s request to return items. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call createFulfillmentReturnAsync(
            CreateFulfillmentReturnRequest body,
            String sellerFulfillmentOrderId,
            final ApiCallback<CreateFulfillmentReturnResponse> callback)
            throws ApiException, LWAException {
        return createFulfillmentReturnAsync(body, sellerFulfillmentOrderId, callback, null);
    }
    /**
     * (asynchronously) Creates a fulfillment return. **Usage Plan:** | Rate (requests per second) | Burst | | ---- |
     * ---- | | 2 | 30 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that
     * were applied to the requested operation, when available. The table above indicates the default rate and burst
     * values for this operation. Selling partners whose business demands require higher throughput may have higher rate
     * and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the
     * Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param body CreateFulfillmentReturnRequest parameter (required)
     * @param sellerFulfillmentOrderId An identifier assigned by the seller to the fulfillment order at the time it was
     *     created. The seller uses their own records to find the correct &#x60;SellerFulfillmentOrderId&#x60; value
     *     based on the buyer&#x27;s request to return items. (required)
     * @param callback The callback to be executed when the API call finishes
     * @param restrictedDataToken Restricted Data Token (optional)
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call createFulfillmentReturnAsync(
            CreateFulfillmentReturnRequest body,
            String sellerFulfillmentOrderId,
            final ApiCallback<CreateFulfillmentReturnResponse> callback,
            String restrictedDataToken)
            throws ApiException, LWAException {

        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call =
                createFulfillmentReturnValidateBeforeCall(body, sellerFulfillmentOrderId, progressRequestListener);

        if (restrictedDataToken != null) {
            okhttp3.Request request = call.request();
            request = RestrictedDataTokenSigner.sign(
                    request, restrictedDataToken, "FbaOutboundApi-createFulfillmentReturn");
            call = apiClient.getHttpClient().newCall(request);
        }

        if (disableRateLimiting || createFulfillmentReturnBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<CreateFulfillmentReturnResponse>() {}.getType();
            apiClient.executeAsync(call, localVarReturnType, callback);
            return call;
        } else throw new ApiException.RateLimitExceeded("createFulfillmentReturn operation exceeds rate limit");
    }
    /**
     * Build call for deliveryOffers
     *
     * @param body GetDeliveryOffersRequest parameter (required)
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    private okhttp3.Call deliveryOffersCall(
            GetDeliveryOffersRequest body, final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/fba/outbound/2020-07-01/deliveryOffers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json", "payload"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        return apiClient.buildCall(
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                progressRequestListener);
    }

    private okhttp3.Call deliveryOffersValidateBeforeCall(
            GetDeliveryOffersRequest body, final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling deliveryOffers(Async)");
        }

        return deliveryOffersCall(body, progressRequestListener);
    }

    /**
     * Returns delivery options that include an estimated delivery date and offer expiration, based on criteria that you
     * specify. **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 30 | The
     * &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the
     * requested operation, when available. The table above indicates the default rate and burst values for this
     * operation. Selling partners whose business demands require higher throughput may have higher rate and burst
     * values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param body GetDeliveryOffersRequest parameter (required)
     * @param restrictedDataToken Restricted Data Token (optional)
     * @return GetDeliveryOffersResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public GetDeliveryOffersResponse deliveryOffers(GetDeliveryOffersRequest body, String restrictedDataToken)
            throws ApiException, LWAException {
        ApiResponse<GetDeliveryOffersResponse> resp = deliveryOffersWithHttpInfo(body, restrictedDataToken);
        return resp.getData();
    }

    /**
     * Returns delivery options that include an estimated delivery date and offer expiration, based on criteria that you
     * specify. **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 30 | The
     * &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the
     * requested operation, when available. The table above indicates the default rate and burst values for this
     * operation. Selling partners whose business demands require higher throughput may have higher rate and burst
     * values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param body GetDeliveryOffersRequest parameter (required)
     * @return GetDeliveryOffersResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public GetDeliveryOffersResponse deliveryOffers(GetDeliveryOffersRequest body) throws ApiException, LWAException {
        ApiResponse<GetDeliveryOffersResponse> resp = deliveryOffersWithHttpInfo(body, null);
        return resp.getData();
    }

    /**
     * Returns delivery options that include an estimated delivery date and offer expiration, based on criteria that you
     * specify. **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 30 | The
     * &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the
     * requested operation, when available. The table above indicates the default rate and burst values for this
     * operation. Selling partners whose business demands require higher throughput may have higher rate and burst
     * values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param body GetDeliveryOffersRequest parameter (required)
     * @param restrictedDataToken Restricted Data Token (optional)
     * @return ApiResponse&lt;GetDeliveryOffersResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<GetDeliveryOffersResponse> deliveryOffersWithHttpInfo(
            GetDeliveryOffersRequest body, String restrictedDataToken) throws ApiException, LWAException {
        okhttp3.Call call = deliveryOffersValidateBeforeCall(body, null);

        if (restrictedDataToken != null) {
            okhttp3.Request request = call.request();
            request = RestrictedDataTokenSigner.sign(request, restrictedDataToken, "FbaOutboundApi-deliveryOffers");
            call = apiClient.getHttpClient().newCall(request);
        }

        if (disableRateLimiting || deliveryOffersBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<GetDeliveryOffersResponse>() {}.getType();
            return apiClient.execute(call, localVarReturnType);
        } else throw new ApiException.RateLimitExceeded("deliveryOffers operation exceeds rate limit");
    }

    /**
     * Returns delivery options that include an estimated delivery date and offer expiration, based on criteria that you
     * specify. **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 30 | The
     * &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the
     * requested operation, when available. The table above indicates the default rate and burst values for this
     * operation. Selling partners whose business demands require higher throughput may have higher rate and burst
     * values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param body GetDeliveryOffersRequest parameter (required)
     * @return ApiResponse&lt;GetDeliveryOffersResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<GetDeliveryOffersResponse> deliveryOffersWithHttpInfo(GetDeliveryOffersRequest body)
            throws ApiException, LWAException {
        return deliveryOffersWithHttpInfo(body, null);
    }

    /**
     * (asynchronously) Returns delivery options that include an estimated delivery date and offer expiration, based on
     * criteria that you specify. **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 30 | The
     * &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the
     * requested operation, when available. The table above indicates the default rate and burst values for this
     * operation. Selling partners whose business demands require higher throughput may have higher rate and burst
     * values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param body GetDeliveryOffersRequest parameter (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call deliveryOffersAsync(
            GetDeliveryOffersRequest body, final ApiCallback<GetDeliveryOffersResponse> callback)
            throws ApiException, LWAException {
        return deliveryOffersAsync(body, callback, null);
    }
    /**
     * (asynchronously) Returns delivery options that include an estimated delivery date and offer expiration, based on
     * criteria that you specify. **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 30 | The
     * &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the
     * requested operation, when available. The table above indicates the default rate and burst values for this
     * operation. Selling partners whose business demands require higher throughput may have higher rate and burst
     * values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param body GetDeliveryOffersRequest parameter (required)
     * @param callback The callback to be executed when the API call finishes
     * @param restrictedDataToken Restricted Data Token (optional)
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call deliveryOffersAsync(
            GetDeliveryOffersRequest body,
            final ApiCallback<GetDeliveryOffersResponse> callback,
            String restrictedDataToken)
            throws ApiException, LWAException {

        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = deliveryOffersValidateBeforeCall(body, progressRequestListener);

        if (restrictedDataToken != null) {
            okhttp3.Request request = call.request();
            request = RestrictedDataTokenSigner.sign(request, restrictedDataToken, "FbaOutboundApi-deliveryOffers");
            call = apiClient.getHttpClient().newCall(request);
        }

        if (disableRateLimiting || deliveryOffersBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<GetDeliveryOffersResponse>() {}.getType();
            apiClient.executeAsync(call, localVarReturnType, callback);
            return call;
        } else throw new ApiException.RateLimitExceeded("deliveryOffers operation exceeds rate limit");
    }
    /**
     * Build call for getFeatureInventory
     *
     * @param marketplaceId The marketplace for which to return a list of the inventory that is eligible for the
     *     specified feature. (required)
     * @param featureName The name of the feature for which to return a list of eligible inventory. (required)
     * @param nextToken A string token returned in the response to your previous request that is used to return the next
     *     response page. A value of null will return the first page. (optional)
     * @param queryStartDate A date that you can use to select inventory that has been updated since a specified date.
     *     An update is defined as any change in feature-enabled inventory availability. The date must be in the format
     *     yyyy-MM-ddTHH:mm:ss.sssZ (optional)
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    private okhttp3.Call getFeatureInventoryCall(
            String marketplaceId,
            String featureName,
            String nextToken,
            OffsetDateTime queryStartDate,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/fba/outbound/2020-07-01/features/inventory/{featureName}"
                .replaceAll("\\{" + "featureName" + "\\}", apiClient.escapeString(featureName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (marketplaceId != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("marketplaceId", marketplaceId));
        if (nextToken != null) localVarQueryParams.addAll(apiClient.parameterToPair("nextToken", nextToken));
        if (queryStartDate != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("queryStartDate", queryStartDate));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json", "payload"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {};

        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        return apiClient.buildCall(
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                progressRequestListener);
    }

    private okhttp3.Call getFeatureInventoryValidateBeforeCall(
            String marketplaceId,
            String featureName,
            String nextToken,
            OffsetDateTime queryStartDate,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        // verify the required parameter 'marketplaceId' is set
        if (marketplaceId == null) {
            throw new ApiException(
                    "Missing the required parameter 'marketplaceId' when calling getFeatureInventory(Async)");
        }
        // verify the required parameter 'featureName' is set
        if (featureName == null) {
            throw new ApiException(
                    "Missing the required parameter 'featureName' when calling getFeatureInventory(Async)");
        }

        return getFeatureInventoryCall(marketplaceId, featureName, nextToken, queryStartDate, progressRequestListener);
    }

    /**
     * Returns a list of inventory items that are eligible for the fulfillment feature you specify. **Usage Plan:** |
     * Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 | The &#x60;x-amzn-RateLimit-Limit&#x60; response
     * header returns the usage plan rate limits that were applied to the requested operation, when available. The table
     * above indicates the default rate and burst values for this operation. Selling partners whose business demands
     * require higher throughput may have higher rate and burst values than those shown here. For more information,
     * refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api)..
     *
     * @param marketplaceId The marketplace for which to return a list of the inventory that is eligible for the
     *     specified feature. (required)
     * @param featureName The name of the feature for which to return a list of eligible inventory. (required)
     * @param nextToken A string token returned in the response to your previous request that is used to return the next
     *     response page. A value of null will return the first page. (optional)
     * @param queryStartDate A date that you can use to select inventory that has been updated since a specified date.
     *     An update is defined as any change in feature-enabled inventory availability. The date must be in the format
     *     yyyy-MM-ddTHH:mm:ss.sssZ (optional)
     * @param restrictedDataToken Restricted Data Token (optional)
     * @return GetFeatureInventoryResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public GetFeatureInventoryResponse getFeatureInventory(
            String marketplaceId,
            String featureName,
            String nextToken,
            OffsetDateTime queryStartDate,
            String restrictedDataToken)
            throws ApiException, LWAException {
        ApiResponse<GetFeatureInventoryResponse> resp = getFeatureInventoryWithHttpInfo(
                marketplaceId, featureName, nextToken, queryStartDate, restrictedDataToken);
        return resp.getData();
    }

    /**
     * Returns a list of inventory items that are eligible for the fulfillment feature you specify. **Usage Plan:** |
     * Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 | The &#x60;x-amzn-RateLimit-Limit&#x60; response
     * header returns the usage plan rate limits that were applied to the requested operation, when available. The table
     * above indicates the default rate and burst values for this operation. Selling partners whose business demands
     * require higher throughput may have higher rate and burst values than those shown here. For more information,
     * refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api)..
     *
     * @param marketplaceId The marketplace for which to return a list of the inventory that is eligible for the
     *     specified feature. (required)
     * @param featureName The name of the feature for which to return a list of eligible inventory. (required)
     * @param nextToken A string token returned in the response to your previous request that is used to return the next
     *     response page. A value of null will return the first page. (optional)
     * @param queryStartDate A date that you can use to select inventory that has been updated since a specified date.
     *     An update is defined as any change in feature-enabled inventory availability. The date must be in the format
     *     yyyy-MM-ddTHH:mm:ss.sssZ (optional)
     * @return GetFeatureInventoryResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public GetFeatureInventoryResponse getFeatureInventory(
            String marketplaceId, String featureName, String nextToken, OffsetDateTime queryStartDate)
            throws ApiException, LWAException {
        ApiResponse<GetFeatureInventoryResponse> resp =
                getFeatureInventoryWithHttpInfo(marketplaceId, featureName, nextToken, queryStartDate, null);
        return resp.getData();
    }

    /**
     * Returns a list of inventory items that are eligible for the fulfillment feature you specify. **Usage Plan:** |
     * Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 | The &#x60;x-amzn-RateLimit-Limit&#x60; response
     * header returns the usage plan rate limits that were applied to the requested operation, when available. The table
     * above indicates the default rate and burst values for this operation. Selling partners whose business demands
     * require higher throughput may have higher rate and burst values than those shown here. For more information,
     * refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api)..
     *
     * @param marketplaceId The marketplace for which to return a list of the inventory that is eligible for the
     *     specified feature. (required)
     * @param featureName The name of the feature for which to return a list of eligible inventory. (required)
     * @param nextToken A string token returned in the response to your previous request that is used to return the next
     *     response page. A value of null will return the first page. (optional)
     * @param queryStartDate A date that you can use to select inventory that has been updated since a specified date.
     *     An update is defined as any change in feature-enabled inventory availability. The date must be in the format
     *     yyyy-MM-ddTHH:mm:ss.sssZ (optional)
     * @param restrictedDataToken Restricted Data Token (optional)
     * @return ApiResponse&lt;GetFeatureInventoryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<GetFeatureInventoryResponse> getFeatureInventoryWithHttpInfo(
            String marketplaceId,
            String featureName,
            String nextToken,
            OffsetDateTime queryStartDate,
            String restrictedDataToken)
            throws ApiException, LWAException {
        okhttp3.Call call =
                getFeatureInventoryValidateBeforeCall(marketplaceId, featureName, nextToken, queryStartDate, null);

        if (restrictedDataToken != null) {
            okhttp3.Request request = call.request();
            request =
                    RestrictedDataTokenSigner.sign(request, restrictedDataToken, "FbaOutboundApi-getFeatureInventory");
            call = apiClient.getHttpClient().newCall(request);
        }

        if (disableRateLimiting || getFeatureInventoryBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<GetFeatureInventoryResponse>() {}.getType();
            return apiClient.execute(call, localVarReturnType);
        } else throw new ApiException.RateLimitExceeded("getFeatureInventory operation exceeds rate limit");
    }

    /**
     * Returns a list of inventory items that are eligible for the fulfillment feature you specify. **Usage Plan:** |
     * Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 | The &#x60;x-amzn-RateLimit-Limit&#x60; response
     * header returns the usage plan rate limits that were applied to the requested operation, when available. The table
     * above indicates the default rate and burst values for this operation. Selling partners whose business demands
     * require higher throughput may have higher rate and burst values than those shown here. For more information,
     * refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api)..
     *
     * @param marketplaceId The marketplace for which to return a list of the inventory that is eligible for the
     *     specified feature. (required)
     * @param featureName The name of the feature for which to return a list of eligible inventory. (required)
     * @param nextToken A string token returned in the response to your previous request that is used to return the next
     *     response page. A value of null will return the first page. (optional)
     * @param queryStartDate A date that you can use to select inventory that has been updated since a specified date.
     *     An update is defined as any change in feature-enabled inventory availability. The date must be in the format
     *     yyyy-MM-ddTHH:mm:ss.sssZ (optional)
     * @return ApiResponse&lt;GetFeatureInventoryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<GetFeatureInventoryResponse> getFeatureInventoryWithHttpInfo(
            String marketplaceId, String featureName, String nextToken, OffsetDateTime queryStartDate)
            throws ApiException, LWAException {
        return getFeatureInventoryWithHttpInfo(marketplaceId, featureName, nextToken, queryStartDate, null);
    }

    /**
     * (asynchronously) Returns a list of inventory items that are eligible for the fulfillment feature you specify.
     * **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 | The
     * &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the
     * requested operation, when available. The table above indicates the default rate and burst values for this
     * operation. Selling partners whose business demands require higher throughput may have higher rate and burst
     * values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api)..
     *
     * @param marketplaceId The marketplace for which to return a list of the inventory that is eligible for the
     *     specified feature. (required)
     * @param featureName The name of the feature for which to return a list of eligible inventory. (required)
     * @param nextToken A string token returned in the response to your previous request that is used to return the next
     *     response page. A value of null will return the first page. (optional)
     * @param queryStartDate A date that you can use to select inventory that has been updated since a specified date.
     *     An update is defined as any change in feature-enabled inventory availability. The date must be in the format
     *     yyyy-MM-ddTHH:mm:ss.sssZ (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call getFeatureInventoryAsync(
            String marketplaceId,
            String featureName,
            String nextToken,
            OffsetDateTime queryStartDate,
            final ApiCallback<GetFeatureInventoryResponse> callback)
            throws ApiException, LWAException {
        return getFeatureInventoryAsync(marketplaceId, featureName, nextToken, queryStartDate, callback, null);
    }
    /**
     * (asynchronously) Returns a list of inventory items that are eligible for the fulfillment feature you specify.
     * **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 | The
     * &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the
     * requested operation, when available. The table above indicates the default rate and burst values for this
     * operation. Selling partners whose business demands require higher throughput may have higher rate and burst
     * values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api)..
     *
     * @param marketplaceId The marketplace for which to return a list of the inventory that is eligible for the
     *     specified feature. (required)
     * @param featureName The name of the feature for which to return a list of eligible inventory. (required)
     * @param nextToken A string token returned in the response to your previous request that is used to return the next
     *     response page. A value of null will return the first page. (optional)
     * @param queryStartDate A date that you can use to select inventory that has been updated since a specified date.
     *     An update is defined as any change in feature-enabled inventory availability. The date must be in the format
     *     yyyy-MM-ddTHH:mm:ss.sssZ (optional)
     * @param callback The callback to be executed when the API call finishes
     * @param restrictedDataToken Restricted Data Token (optional)
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call getFeatureInventoryAsync(
            String marketplaceId,
            String featureName,
            String nextToken,
            OffsetDateTime queryStartDate,
            final ApiCallback<GetFeatureInventoryResponse> callback,
            String restrictedDataToken)
            throws ApiException, LWAException {

        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = getFeatureInventoryValidateBeforeCall(
                marketplaceId, featureName, nextToken, queryStartDate, progressRequestListener);

        if (restrictedDataToken != null) {
            okhttp3.Request request = call.request();
            request =
                    RestrictedDataTokenSigner.sign(request, restrictedDataToken, "FbaOutboundApi-getFeatureInventory");
            call = apiClient.getHttpClient().newCall(request);
        }

        if (disableRateLimiting || getFeatureInventoryBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<GetFeatureInventoryResponse>() {}.getType();
            apiClient.executeAsync(call, localVarReturnType, callback);
            return call;
        } else throw new ApiException.RateLimitExceeded("getFeatureInventory operation exceeds rate limit");
    }
    /**
     * Build call for getFeatureSKU
     *
     * @param marketplaceId The marketplace for which to return the count. (required)
     * @param featureName The name of the feature. (required)
     * @param sellerSku Used to identify an item in the given marketplace. &#x60;SellerSKU&#x60; is qualified by the
     *     seller&#x27;s &#x60;SellerId&#x60;, which is included with every operation that you submit. (required)
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    private okhttp3.Call getFeatureSKUCall(
            String marketplaceId,
            String featureName,
            String sellerSku,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/fba/outbound/2020-07-01/features/inventory/{featureName}/{sellerSku}"
                .replaceAll("\\{" + "featureName" + "\\}", apiClient.escapeString(featureName.toString()))
                .replaceAll("\\{" + "sellerSku" + "\\}", apiClient.escapeString(sellerSku.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (marketplaceId != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("marketplaceId", marketplaceId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json", "payload"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {};

        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        return apiClient.buildCall(
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                progressRequestListener);
    }

    private okhttp3.Call getFeatureSKUValidateBeforeCall(
            String marketplaceId,
            String featureName,
            String sellerSku,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        // verify the required parameter 'marketplaceId' is set
        if (marketplaceId == null) {
            throw new ApiException("Missing the required parameter 'marketplaceId' when calling getFeatureSKU(Async)");
        }
        // verify the required parameter 'featureName' is set
        if (featureName == null) {
            throw new ApiException("Missing the required parameter 'featureName' when calling getFeatureSKU(Async)");
        }
        // verify the required parameter 'sellerSku' is set
        if (sellerSku == null) {
            throw new ApiException("Missing the required parameter 'sellerSku' when calling getFeatureSKU(Async)");
        }

        return getFeatureSKUCall(marketplaceId, featureName, sellerSku, progressRequestListener);
    }

    /**
     * Returns the number of items with the sellerSKU you specify that can have orders fulfilled using the specified
     * feature. Note that if the sellerSKU isn&#x27;t eligible, the response will contain an empty skuInfo object. The
     * parameters for this operation may contain special characters that require URL encoding. To avoid errors with SKUs
     * when encoding URLs, refer to [URL Encoding](https://developer-docs.amazon.com/sp-api/docs/url-encoding). **Usage
     * Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 | The &#x60;x-amzn-RateLimit-Limit&#x60;
     * response header returns the usage plan rate limits that were applied to the requested operation, when available.
     * The table above indicates the default rate and burst values for this operation. Selling partners whose business
     * demands require higher throughput may have higher rate and burst values than those shown here. For more
     * information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param marketplaceId The marketplace for which to return the count. (required)
     * @param featureName The name of the feature. (required)
     * @param sellerSku Used to identify an item in the given marketplace. &#x60;SellerSKU&#x60; is qualified by the
     *     seller&#x27;s &#x60;SellerId&#x60;, which is included with every operation that you submit. (required)
     * @param restrictedDataToken Restricted Data Token (optional)
     * @return GetFeatureSkuResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public GetFeatureSkuResponse getFeatureSKU(
            String marketplaceId, String featureName, String sellerSku, String restrictedDataToken)
            throws ApiException, LWAException {
        ApiResponse<GetFeatureSkuResponse> resp =
                getFeatureSKUWithHttpInfo(marketplaceId, featureName, sellerSku, restrictedDataToken);
        return resp.getData();
    }

    /**
     * Returns the number of items with the sellerSKU you specify that can have orders fulfilled using the specified
     * feature. Note that if the sellerSKU isn&#x27;t eligible, the response will contain an empty skuInfo object. The
     * parameters for this operation may contain special characters that require URL encoding. To avoid errors with SKUs
     * when encoding URLs, refer to [URL Encoding](https://developer-docs.amazon.com/sp-api/docs/url-encoding). **Usage
     * Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 | The &#x60;x-amzn-RateLimit-Limit&#x60;
     * response header returns the usage plan rate limits that were applied to the requested operation, when available.
     * The table above indicates the default rate and burst values for this operation. Selling partners whose business
     * demands require higher throughput may have higher rate and burst values than those shown here. For more
     * information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param marketplaceId The marketplace for which to return the count. (required)
     * @param featureName The name of the feature. (required)
     * @param sellerSku Used to identify an item in the given marketplace. &#x60;SellerSKU&#x60; is qualified by the
     *     seller&#x27;s &#x60;SellerId&#x60;, which is included with every operation that you submit. (required)
     * @return GetFeatureSkuResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public GetFeatureSkuResponse getFeatureSKU(String marketplaceId, String featureName, String sellerSku)
            throws ApiException, LWAException {
        ApiResponse<GetFeatureSkuResponse> resp =
                getFeatureSKUWithHttpInfo(marketplaceId, featureName, sellerSku, null);
        return resp.getData();
    }

    /**
     * Returns the number of items with the sellerSKU you specify that can have orders fulfilled using the specified
     * feature. Note that if the sellerSKU isn&#x27;t eligible, the response will contain an empty skuInfo object. The
     * parameters for this operation may contain special characters that require URL encoding. To avoid errors with SKUs
     * when encoding URLs, refer to [URL Encoding](https://developer-docs.amazon.com/sp-api/docs/url-encoding). **Usage
     * Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 | The &#x60;x-amzn-RateLimit-Limit&#x60;
     * response header returns the usage plan rate limits that were applied to the requested operation, when available.
     * The table above indicates the default rate and burst values for this operation. Selling partners whose business
     * demands require higher throughput may have higher rate and burst values than those shown here. For more
     * information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param marketplaceId The marketplace for which to return the count. (required)
     * @param featureName The name of the feature. (required)
     * @param sellerSku Used to identify an item in the given marketplace. &#x60;SellerSKU&#x60; is qualified by the
     *     seller&#x27;s &#x60;SellerId&#x60;, which is included with every operation that you submit. (required)
     * @param restrictedDataToken Restricted Data Token (optional)
     * @return ApiResponse&lt;GetFeatureSkuResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<GetFeatureSkuResponse> getFeatureSKUWithHttpInfo(
            String marketplaceId, String featureName, String sellerSku, String restrictedDataToken)
            throws ApiException, LWAException {
        okhttp3.Call call = getFeatureSKUValidateBeforeCall(marketplaceId, featureName, sellerSku, null);

        if (restrictedDataToken != null) {
            okhttp3.Request request = call.request();
            request = RestrictedDataTokenSigner.sign(request, restrictedDataToken, "FbaOutboundApi-getFeatureSKU");
            call = apiClient.getHttpClient().newCall(request);
        }

        if (disableRateLimiting || getFeatureSKUBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<GetFeatureSkuResponse>() {}.getType();
            return apiClient.execute(call, localVarReturnType);
        } else throw new ApiException.RateLimitExceeded("getFeatureSKU operation exceeds rate limit");
    }

    /**
     * Returns the number of items with the sellerSKU you specify that can have orders fulfilled using the specified
     * feature. Note that if the sellerSKU isn&#x27;t eligible, the response will contain an empty skuInfo object. The
     * parameters for this operation may contain special characters that require URL encoding. To avoid errors with SKUs
     * when encoding URLs, refer to [URL Encoding](https://developer-docs.amazon.com/sp-api/docs/url-encoding). **Usage
     * Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 | The &#x60;x-amzn-RateLimit-Limit&#x60;
     * response header returns the usage plan rate limits that were applied to the requested operation, when available.
     * The table above indicates the default rate and burst values for this operation. Selling partners whose business
     * demands require higher throughput may have higher rate and burst values than those shown here. For more
     * information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param marketplaceId The marketplace for which to return the count. (required)
     * @param featureName The name of the feature. (required)
     * @param sellerSku Used to identify an item in the given marketplace. &#x60;SellerSKU&#x60; is qualified by the
     *     seller&#x27;s &#x60;SellerId&#x60;, which is included with every operation that you submit. (required)
     * @return ApiResponse&lt;GetFeatureSkuResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<GetFeatureSkuResponse> getFeatureSKUWithHttpInfo(
            String marketplaceId, String featureName, String sellerSku) throws ApiException, LWAException {
        return getFeatureSKUWithHttpInfo(marketplaceId, featureName, sellerSku, null);
    }

    /**
     * (asynchronously) Returns the number of items with the sellerSKU you specify that can have orders fulfilled using
     * the specified feature. Note that if the sellerSKU isn&#x27;t eligible, the response will contain an empty skuInfo
     * object. The parameters for this operation may contain special characters that require URL encoding. To avoid
     * errors with SKUs when encoding URLs, refer to [URL
     * Encoding](https://developer-docs.amazon.com/sp-api/docs/url-encoding). **Usage Plan:** | Rate (requests per
     * second) | Burst | | ---- | ---- | | 2 | 30 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the
     * usage plan rate limits that were applied to the requested operation, when available. The table above indicates
     * the default rate and burst values for this operation. Selling partners whose business demands require higher
     * throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage
     * Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param marketplaceId The marketplace for which to return the count. (required)
     * @param featureName The name of the feature. (required)
     * @param sellerSku Used to identify an item in the given marketplace. &#x60;SellerSKU&#x60; is qualified by the
     *     seller&#x27;s &#x60;SellerId&#x60;, which is included with every operation that you submit. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call getFeatureSKUAsync(
            String marketplaceId,
            String featureName,
            String sellerSku,
            final ApiCallback<GetFeatureSkuResponse> callback)
            throws ApiException, LWAException {
        return getFeatureSKUAsync(marketplaceId, featureName, sellerSku, callback, null);
    }
    /**
     * (asynchronously) Returns the number of items with the sellerSKU you specify that can have orders fulfilled using
     * the specified feature. Note that if the sellerSKU isn&#x27;t eligible, the response will contain an empty skuInfo
     * object. The parameters for this operation may contain special characters that require URL encoding. To avoid
     * errors with SKUs when encoding URLs, refer to [URL
     * Encoding](https://developer-docs.amazon.com/sp-api/docs/url-encoding). **Usage Plan:** | Rate (requests per
     * second) | Burst | | ---- | ---- | | 2 | 30 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the
     * usage plan rate limits that were applied to the requested operation, when available. The table above indicates
     * the default rate and burst values for this operation. Selling partners whose business demands require higher
     * throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage
     * Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param marketplaceId The marketplace for which to return the count. (required)
     * @param featureName The name of the feature. (required)
     * @param sellerSku Used to identify an item in the given marketplace. &#x60;SellerSKU&#x60; is qualified by the
     *     seller&#x27;s &#x60;SellerId&#x60;, which is included with every operation that you submit. (required)
     * @param callback The callback to be executed when the API call finishes
     * @param restrictedDataToken Restricted Data Token (optional)
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call getFeatureSKUAsync(
            String marketplaceId,
            String featureName,
            String sellerSku,
            final ApiCallback<GetFeatureSkuResponse> callback,
            String restrictedDataToken)
            throws ApiException, LWAException {

        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call =
                getFeatureSKUValidateBeforeCall(marketplaceId, featureName, sellerSku, progressRequestListener);

        if (restrictedDataToken != null) {
            okhttp3.Request request = call.request();
            request = RestrictedDataTokenSigner.sign(request, restrictedDataToken, "FbaOutboundApi-getFeatureSKU");
            call = apiClient.getHttpClient().newCall(request);
        }

        if (disableRateLimiting || getFeatureSKUBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<GetFeatureSkuResponse>() {}.getType();
            apiClient.executeAsync(call, localVarReturnType, callback);
            return call;
        } else throw new ApiException.RateLimitExceeded("getFeatureSKU operation exceeds rate limit");
    }
    /**
     * Build call for getFeatures
     *
     * @param marketplaceId The marketplace for which to return the list of features. (required)
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    private okhttp3.Call getFeaturesCall(
            String marketplaceId, final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/fba/outbound/2020-07-01/features";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (marketplaceId != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("marketplaceId", marketplaceId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json", "payload"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {};

        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        return apiClient.buildCall(
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                progressRequestListener);
    }

    private okhttp3.Call getFeaturesValidateBeforeCall(
            String marketplaceId, final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        // verify the required parameter 'marketplaceId' is set
        if (marketplaceId == null) {
            throw new ApiException("Missing the required parameter 'marketplaceId' when calling getFeatures(Async)");
        }

        return getFeaturesCall(marketplaceId, progressRequestListener);
    }

    /**
     * Returns a list of features available for Multi-Channel Fulfillment orders in the marketplace you specify, and
     * whether the seller for which you made the call is enrolled for each feature. **Usage Plan:** | Rate (requests per
     * second) | Burst | | ---- | ---- | | 2 | 30 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the
     * usage plan rate limits that were applied to the requested operation, when available. The table above indicates
     * the default rate and burst values for this operation. Selling partners whose business demands require higher
     * throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage
     * Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param marketplaceId The marketplace for which to return the list of features. (required)
     * @param restrictedDataToken Restricted Data Token (optional)
     * @return GetFeaturesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public GetFeaturesResponse getFeatures(String marketplaceId, String restrictedDataToken)
            throws ApiException, LWAException {
        ApiResponse<GetFeaturesResponse> resp = getFeaturesWithHttpInfo(marketplaceId, restrictedDataToken);
        return resp.getData();
    }

    /**
     * Returns a list of features available for Multi-Channel Fulfillment orders in the marketplace you specify, and
     * whether the seller for which you made the call is enrolled for each feature. **Usage Plan:** | Rate (requests per
     * second) | Burst | | ---- | ---- | | 2 | 30 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the
     * usage plan rate limits that were applied to the requested operation, when available. The table above indicates
     * the default rate and burst values for this operation. Selling partners whose business demands require higher
     * throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage
     * Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param marketplaceId The marketplace for which to return the list of features. (required)
     * @return GetFeaturesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public GetFeaturesResponse getFeatures(String marketplaceId) throws ApiException, LWAException {
        ApiResponse<GetFeaturesResponse> resp = getFeaturesWithHttpInfo(marketplaceId, null);
        return resp.getData();
    }

    /**
     * Returns a list of features available for Multi-Channel Fulfillment orders in the marketplace you specify, and
     * whether the seller for which you made the call is enrolled for each feature. **Usage Plan:** | Rate (requests per
     * second) | Burst | | ---- | ---- | | 2 | 30 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the
     * usage plan rate limits that were applied to the requested operation, when available. The table above indicates
     * the default rate and burst values for this operation. Selling partners whose business demands require higher
     * throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage
     * Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param marketplaceId The marketplace for which to return the list of features. (required)
     * @param restrictedDataToken Restricted Data Token (optional)
     * @return ApiResponse&lt;GetFeaturesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<GetFeaturesResponse> getFeaturesWithHttpInfo(String marketplaceId, String restrictedDataToken)
            throws ApiException, LWAException {
        okhttp3.Call call = getFeaturesValidateBeforeCall(marketplaceId, null);

        if (restrictedDataToken != null) {
            okhttp3.Request request = call.request();
            request = RestrictedDataTokenSigner.sign(request, restrictedDataToken, "FbaOutboundApi-getFeatures");
            call = apiClient.getHttpClient().newCall(request);
        }

        if (disableRateLimiting || getFeaturesBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<GetFeaturesResponse>() {}.getType();
            return apiClient.execute(call, localVarReturnType);
        } else throw new ApiException.RateLimitExceeded("getFeatures operation exceeds rate limit");
    }

    /**
     * Returns a list of features available for Multi-Channel Fulfillment orders in the marketplace you specify, and
     * whether the seller for which you made the call is enrolled for each feature. **Usage Plan:** | Rate (requests per
     * second) | Burst | | ---- | ---- | | 2 | 30 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the
     * usage plan rate limits that were applied to the requested operation, when available. The table above indicates
     * the default rate and burst values for this operation. Selling partners whose business demands require higher
     * throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage
     * Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param marketplaceId The marketplace for which to return the list of features. (required)
     * @return ApiResponse&lt;GetFeaturesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<GetFeaturesResponse> getFeaturesWithHttpInfo(String marketplaceId)
            throws ApiException, LWAException {
        return getFeaturesWithHttpInfo(marketplaceId, null);
    }

    /**
     * (asynchronously) Returns a list of features available for Multi-Channel Fulfillment orders in the marketplace you
     * specify, and whether the seller for which you made the call is enrolled for each feature. **Usage Plan:** | Rate
     * (requests per second) | Burst | | ---- | ---- | | 2 | 30 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header
     * returns the usage plan rate limits that were applied to the requested operation, when available. The table above
     * indicates the default rate and burst values for this operation. Selling partners whose business demands require
     * higher throughput may have higher rate and burst values than those shown here. For more information, refer to
     * [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param marketplaceId The marketplace for which to return the list of features. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call getFeaturesAsync(String marketplaceId, final ApiCallback<GetFeaturesResponse> callback)
            throws ApiException, LWAException {
        return getFeaturesAsync(marketplaceId, callback, null);
    }
    /**
     * (asynchronously) Returns a list of features available for Multi-Channel Fulfillment orders in the marketplace you
     * specify, and whether the seller for which you made the call is enrolled for each feature. **Usage Plan:** | Rate
     * (requests per second) | Burst | | ---- | ---- | | 2 | 30 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header
     * returns the usage plan rate limits that were applied to the requested operation, when available. The table above
     * indicates the default rate and burst values for this operation. Selling partners whose business demands require
     * higher throughput may have higher rate and burst values than those shown here. For more information, refer to
     * [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param marketplaceId The marketplace for which to return the list of features. (required)
     * @param callback The callback to be executed when the API call finishes
     * @param restrictedDataToken Restricted Data Token (optional)
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call getFeaturesAsync(
            String marketplaceId, final ApiCallback<GetFeaturesResponse> callback, String restrictedDataToken)
            throws ApiException, LWAException {

        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = getFeaturesValidateBeforeCall(marketplaceId, progressRequestListener);

        if (restrictedDataToken != null) {
            okhttp3.Request request = call.request();
            request = RestrictedDataTokenSigner.sign(request, restrictedDataToken, "FbaOutboundApi-getFeatures");
            call = apiClient.getHttpClient().newCall(request);
        }

        if (disableRateLimiting || getFeaturesBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<GetFeaturesResponse>() {}.getType();
            apiClient.executeAsync(call, localVarReturnType, callback);
            return call;
        } else throw new ApiException.RateLimitExceeded("getFeatures operation exceeds rate limit");
    }
    /**
     * Build call for getFulfillmentOrder
     *
     * @param sellerFulfillmentOrderId The identifier assigned to the item by the seller when the fulfillment order was
     *     created. (required)
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    private okhttp3.Call getFulfillmentOrderCall(
            String sellerFulfillmentOrderId, final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/fba/outbound/2020-07-01/fulfillmentOrders/{sellerFulfillmentOrderId}"
                .replaceAll(
                        "\\{" + "sellerFulfillmentOrderId" + "\\}",
                        apiClient.escapeString(sellerFulfillmentOrderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json", "payload"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {};

        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        return apiClient.buildCall(
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                progressRequestListener);
    }

    private okhttp3.Call getFulfillmentOrderValidateBeforeCall(
            String sellerFulfillmentOrderId, final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        // verify the required parameter 'sellerFulfillmentOrderId' is set
        if (sellerFulfillmentOrderId == null) {
            throw new ApiException(
                    "Missing the required parameter 'sellerFulfillmentOrderId' when calling getFulfillmentOrder(Async)");
        }

        return getFulfillmentOrderCall(sellerFulfillmentOrderId, progressRequestListener);
    }

    /**
     * Returns the fulfillment order indicated by the specified order identifier. **Usage Plan:** | Rate (requests per
     * second) | Burst | | ---- | ---- | | 2 | 30 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the
     * usage plan rate limits that were applied to the requested operation, when available. The table above indicates
     * the default rate and burst values for this operation. Selling partners whose business demands require higher
     * throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage
     * Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param sellerFulfillmentOrderId The identifier assigned to the item by the seller when the fulfillment order was
     *     created. (required)
     * @param restrictedDataToken Restricted Data Token (optional)
     * @return GetFulfillmentOrderResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public GetFulfillmentOrderResponse getFulfillmentOrder(String sellerFulfillmentOrderId, String restrictedDataToken)
            throws ApiException, LWAException {
        ApiResponse<GetFulfillmentOrderResponse> resp =
                getFulfillmentOrderWithHttpInfo(sellerFulfillmentOrderId, restrictedDataToken);
        return resp.getData();
    }

    /**
     * Returns the fulfillment order indicated by the specified order identifier. **Usage Plan:** | Rate (requests per
     * second) | Burst | | ---- | ---- | | 2 | 30 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the
     * usage plan rate limits that were applied to the requested operation, when available. The table above indicates
     * the default rate and burst values for this operation. Selling partners whose business demands require higher
     * throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage
     * Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param sellerFulfillmentOrderId The identifier assigned to the item by the seller when the fulfillment order was
     *     created. (required)
     * @return GetFulfillmentOrderResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public GetFulfillmentOrderResponse getFulfillmentOrder(String sellerFulfillmentOrderId)
            throws ApiException, LWAException {
        ApiResponse<GetFulfillmentOrderResponse> resp = getFulfillmentOrderWithHttpInfo(sellerFulfillmentOrderId, null);
        return resp.getData();
    }

    /**
     * Returns the fulfillment order indicated by the specified order identifier. **Usage Plan:** | Rate (requests per
     * second) | Burst | | ---- | ---- | | 2 | 30 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the
     * usage plan rate limits that were applied to the requested operation, when available. The table above indicates
     * the default rate and burst values for this operation. Selling partners whose business demands require higher
     * throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage
     * Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param sellerFulfillmentOrderId The identifier assigned to the item by the seller when the fulfillment order was
     *     created. (required)
     * @param restrictedDataToken Restricted Data Token (optional)
     * @return ApiResponse&lt;GetFulfillmentOrderResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<GetFulfillmentOrderResponse> getFulfillmentOrderWithHttpInfo(
            String sellerFulfillmentOrderId, String restrictedDataToken) throws ApiException, LWAException {
        okhttp3.Call call = getFulfillmentOrderValidateBeforeCall(sellerFulfillmentOrderId, null);

        if (restrictedDataToken != null) {
            okhttp3.Request request = call.request();
            request =
                    RestrictedDataTokenSigner.sign(request, restrictedDataToken, "FbaOutboundApi-getFulfillmentOrder");
            call = apiClient.getHttpClient().newCall(request);
        }

        if (disableRateLimiting || getFulfillmentOrderBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<GetFulfillmentOrderResponse>() {}.getType();
            return apiClient.execute(call, localVarReturnType);
        } else throw new ApiException.RateLimitExceeded("getFulfillmentOrder operation exceeds rate limit");
    }

    /**
     * Returns the fulfillment order indicated by the specified order identifier. **Usage Plan:** | Rate (requests per
     * second) | Burst | | ---- | ---- | | 2 | 30 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the
     * usage plan rate limits that were applied to the requested operation, when available. The table above indicates
     * the default rate and burst values for this operation. Selling partners whose business demands require higher
     * throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage
     * Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param sellerFulfillmentOrderId The identifier assigned to the item by the seller when the fulfillment order was
     *     created. (required)
     * @return ApiResponse&lt;GetFulfillmentOrderResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<GetFulfillmentOrderResponse> getFulfillmentOrderWithHttpInfo(String sellerFulfillmentOrderId)
            throws ApiException, LWAException {
        return getFulfillmentOrderWithHttpInfo(sellerFulfillmentOrderId, null);
    }

    /**
     * (asynchronously) Returns the fulfillment order indicated by the specified order identifier. **Usage Plan:** |
     * Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 | The &#x60;x-amzn-RateLimit-Limit&#x60; response
     * header returns the usage plan rate limits that were applied to the requested operation, when available. The table
     * above indicates the default rate and burst values for this operation. Selling partners whose business demands
     * require higher throughput may have higher rate and burst values than those shown here. For more information,
     * refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param sellerFulfillmentOrderId The identifier assigned to the item by the seller when the fulfillment order was
     *     created. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call getFulfillmentOrderAsync(
            String sellerFulfillmentOrderId, final ApiCallback<GetFulfillmentOrderResponse> callback)
            throws ApiException, LWAException {
        return getFulfillmentOrderAsync(sellerFulfillmentOrderId, callback, null);
    }
    /**
     * (asynchronously) Returns the fulfillment order indicated by the specified order identifier. **Usage Plan:** |
     * Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 | The &#x60;x-amzn-RateLimit-Limit&#x60; response
     * header returns the usage plan rate limits that were applied to the requested operation, when available. The table
     * above indicates the default rate and burst values for this operation. Selling partners whose business demands
     * require higher throughput may have higher rate and burst values than those shown here. For more information,
     * refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param sellerFulfillmentOrderId The identifier assigned to the item by the seller when the fulfillment order was
     *     created. (required)
     * @param callback The callback to be executed when the API call finishes
     * @param restrictedDataToken Restricted Data Token (optional)
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call getFulfillmentOrderAsync(
            String sellerFulfillmentOrderId,
            final ApiCallback<GetFulfillmentOrderResponse> callback,
            String restrictedDataToken)
            throws ApiException, LWAException {

        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = getFulfillmentOrderValidateBeforeCall(sellerFulfillmentOrderId, progressRequestListener);

        if (restrictedDataToken != null) {
            okhttp3.Request request = call.request();
            request =
                    RestrictedDataTokenSigner.sign(request, restrictedDataToken, "FbaOutboundApi-getFulfillmentOrder");
            call = apiClient.getHttpClient().newCall(request);
        }

        if (disableRateLimiting || getFulfillmentOrderBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<GetFulfillmentOrderResponse>() {}.getType();
            apiClient.executeAsync(call, localVarReturnType, callback);
            return call;
        } else throw new ApiException.RateLimitExceeded("getFulfillmentOrder operation exceeds rate limit");
    }
    /**
     * Build call for getFulfillmentPreview
     *
     * @param body GetFulfillmentPreviewRequest parameter (required)
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    private okhttp3.Call getFulfillmentPreviewCall(
            GetFulfillmentPreviewRequest body,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/fba/outbound/2020-07-01/fulfillmentOrders/preview";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json", "payload"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        return apiClient.buildCall(
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                progressRequestListener);
    }

    private okhttp3.Call getFulfillmentPreviewValidateBeforeCall(
            GetFulfillmentPreviewRequest body,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling getFulfillmentPreview(Async)");
        }

        return getFulfillmentPreviewCall(body, progressRequestListener);
    }

    /**
     * Returns a list of fulfillment order previews based on shipping criteria that you specify. **Usage Plan:** | Rate
     * (requests per second) | Burst | | ---- | ---- | | 2 | 30 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header
     * returns the usage plan rate limits that were applied to the requested operation, when available. The table above
     * indicates the default rate and burst values for this operation. Selling partners whose business demands require
     * higher throughput may have higher rate and burst values than those shown here. For more information, refer to
     * [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param body GetFulfillmentPreviewRequest parameter (required)
     * @param restrictedDataToken Restricted Data Token (optional)
     * @return GetFulfillmentPreviewResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public GetFulfillmentPreviewResponse getFulfillmentPreview(
            GetFulfillmentPreviewRequest body, String restrictedDataToken) throws ApiException, LWAException {
        ApiResponse<GetFulfillmentPreviewResponse> resp = getFulfillmentPreviewWithHttpInfo(body, restrictedDataToken);
        return resp.getData();
    }

    /**
     * Returns a list of fulfillment order previews based on shipping criteria that you specify. **Usage Plan:** | Rate
     * (requests per second) | Burst | | ---- | ---- | | 2 | 30 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header
     * returns the usage plan rate limits that were applied to the requested operation, when available. The table above
     * indicates the default rate and burst values for this operation. Selling partners whose business demands require
     * higher throughput may have higher rate and burst values than those shown here. For more information, refer to
     * [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param body GetFulfillmentPreviewRequest parameter (required)
     * @return GetFulfillmentPreviewResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public GetFulfillmentPreviewResponse getFulfillmentPreview(GetFulfillmentPreviewRequest body)
            throws ApiException, LWAException {
        ApiResponse<GetFulfillmentPreviewResponse> resp = getFulfillmentPreviewWithHttpInfo(body, null);
        return resp.getData();
    }

    /**
     * Returns a list of fulfillment order previews based on shipping criteria that you specify. **Usage Plan:** | Rate
     * (requests per second) | Burst | | ---- | ---- | | 2 | 30 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header
     * returns the usage plan rate limits that were applied to the requested operation, when available. The table above
     * indicates the default rate and burst values for this operation. Selling partners whose business demands require
     * higher throughput may have higher rate and burst values than those shown here. For more information, refer to
     * [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param body GetFulfillmentPreviewRequest parameter (required)
     * @param restrictedDataToken Restricted Data Token (optional)
     * @return ApiResponse&lt;GetFulfillmentPreviewResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<GetFulfillmentPreviewResponse> getFulfillmentPreviewWithHttpInfo(
            GetFulfillmentPreviewRequest body, String restrictedDataToken) throws ApiException, LWAException {
        okhttp3.Call call = getFulfillmentPreviewValidateBeforeCall(body, null);

        if (restrictedDataToken != null) {
            okhttp3.Request request = call.request();
            request = RestrictedDataTokenSigner.sign(
                    request, restrictedDataToken, "FbaOutboundApi-getFulfillmentPreview");
            call = apiClient.getHttpClient().newCall(request);
        }

        if (disableRateLimiting || getFulfillmentPreviewBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<GetFulfillmentPreviewResponse>() {}.getType();
            return apiClient.execute(call, localVarReturnType);
        } else throw new ApiException.RateLimitExceeded("getFulfillmentPreview operation exceeds rate limit");
    }

    /**
     * Returns a list of fulfillment order previews based on shipping criteria that you specify. **Usage Plan:** | Rate
     * (requests per second) | Burst | | ---- | ---- | | 2 | 30 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header
     * returns the usage plan rate limits that were applied to the requested operation, when available. The table above
     * indicates the default rate and burst values for this operation. Selling partners whose business demands require
     * higher throughput may have higher rate and burst values than those shown here. For more information, refer to
     * [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param body GetFulfillmentPreviewRequest parameter (required)
     * @return ApiResponse&lt;GetFulfillmentPreviewResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<GetFulfillmentPreviewResponse> getFulfillmentPreviewWithHttpInfo(
            GetFulfillmentPreviewRequest body) throws ApiException, LWAException {
        return getFulfillmentPreviewWithHttpInfo(body, null);
    }

    /**
     * (asynchronously) Returns a list of fulfillment order previews based on shipping criteria that you specify.
     * **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 | The
     * &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the
     * requested operation, when available. The table above indicates the default rate and burst values for this
     * operation. Selling partners whose business demands require higher throughput may have higher rate and burst
     * values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param body GetFulfillmentPreviewRequest parameter (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call getFulfillmentPreviewAsync(
            GetFulfillmentPreviewRequest body, final ApiCallback<GetFulfillmentPreviewResponse> callback)
            throws ApiException, LWAException {
        return getFulfillmentPreviewAsync(body, callback, null);
    }
    /**
     * (asynchronously) Returns a list of fulfillment order previews based on shipping criteria that you specify.
     * **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 | The
     * &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the
     * requested operation, when available. The table above indicates the default rate and burst values for this
     * operation. Selling partners whose business demands require higher throughput may have higher rate and burst
     * values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param body GetFulfillmentPreviewRequest parameter (required)
     * @param callback The callback to be executed when the API call finishes
     * @param restrictedDataToken Restricted Data Token (optional)
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call getFulfillmentPreviewAsync(
            GetFulfillmentPreviewRequest body,
            final ApiCallback<GetFulfillmentPreviewResponse> callback,
            String restrictedDataToken)
            throws ApiException, LWAException {

        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = getFulfillmentPreviewValidateBeforeCall(body, progressRequestListener);

        if (restrictedDataToken != null) {
            okhttp3.Request request = call.request();
            request = RestrictedDataTokenSigner.sign(
                    request, restrictedDataToken, "FbaOutboundApi-getFulfillmentPreview");
            call = apiClient.getHttpClient().newCall(request);
        }

        if (disableRateLimiting || getFulfillmentPreviewBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<GetFulfillmentPreviewResponse>() {}.getType();
            apiClient.executeAsync(call, localVarReturnType, callback);
            return call;
        } else throw new ApiException.RateLimitExceeded("getFulfillmentPreview operation exceeds rate limit");
    }
    /**
     * Build call for getPackageTrackingDetails
     *
     * @param packageNumber The unencrypted package identifier returned by the &#x60;getFulfillmentOrder&#x60;
     *     operation. (required)
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    private okhttp3.Call getPackageTrackingDetailsCall(
            Integer packageNumber, final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/fba/outbound/2020-07-01/tracking";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (packageNumber != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("packageNumber", packageNumber));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json", "payload"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {};

        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        return apiClient.buildCall(
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                progressRequestListener);
    }

    private okhttp3.Call getPackageTrackingDetailsValidateBeforeCall(
            Integer packageNumber, final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        // verify the required parameter 'packageNumber' is set
        if (packageNumber == null) {
            throw new ApiException(
                    "Missing the required parameter 'packageNumber' when calling getPackageTrackingDetails(Async)");
        }

        return getPackageTrackingDetailsCall(packageNumber, progressRequestListener);
    }

    /**
     * Returns delivery tracking information for a package in an outbound shipment for a Multi-Channel Fulfillment
     * order. **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 | The
     * &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the
     * requested operation, when available. The table above indicates the default rate and burst values for this
     * operation. Selling partners whose business demands require higher throughput may have higher rate and burst
     * values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param packageNumber The unencrypted package identifier returned by the &#x60;getFulfillmentOrder&#x60;
     *     operation. (required)
     * @param restrictedDataToken Restricted Data Token (optional)
     * @return GetPackageTrackingDetailsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public GetPackageTrackingDetailsResponse getPackageTrackingDetails(
            Integer packageNumber, String restrictedDataToken) throws ApiException, LWAException {
        ApiResponse<GetPackageTrackingDetailsResponse> resp =
                getPackageTrackingDetailsWithHttpInfo(packageNumber, restrictedDataToken);
        return resp.getData();
    }

    /**
     * Returns delivery tracking information for a package in an outbound shipment for a Multi-Channel Fulfillment
     * order. **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 | The
     * &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the
     * requested operation, when available. The table above indicates the default rate and burst values for this
     * operation. Selling partners whose business demands require higher throughput may have higher rate and burst
     * values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param packageNumber The unencrypted package identifier returned by the &#x60;getFulfillmentOrder&#x60;
     *     operation. (required)
     * @return GetPackageTrackingDetailsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public GetPackageTrackingDetailsResponse getPackageTrackingDetails(Integer packageNumber)
            throws ApiException, LWAException {
        ApiResponse<GetPackageTrackingDetailsResponse> resp =
                getPackageTrackingDetailsWithHttpInfo(packageNumber, null);
        return resp.getData();
    }

    /**
     * Returns delivery tracking information for a package in an outbound shipment for a Multi-Channel Fulfillment
     * order. **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 | The
     * &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the
     * requested operation, when available. The table above indicates the default rate and burst values for this
     * operation. Selling partners whose business demands require higher throughput may have higher rate and burst
     * values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param packageNumber The unencrypted package identifier returned by the &#x60;getFulfillmentOrder&#x60;
     *     operation. (required)
     * @param restrictedDataToken Restricted Data Token (optional)
     * @return ApiResponse&lt;GetPackageTrackingDetailsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<GetPackageTrackingDetailsResponse> getPackageTrackingDetailsWithHttpInfo(
            Integer packageNumber, String restrictedDataToken) throws ApiException, LWAException {
        okhttp3.Call call = getPackageTrackingDetailsValidateBeforeCall(packageNumber, null);

        if (restrictedDataToken != null) {
            okhttp3.Request request = call.request();
            request = RestrictedDataTokenSigner.sign(
                    request, restrictedDataToken, "FbaOutboundApi-getPackageTrackingDetails");
            call = apiClient.getHttpClient().newCall(request);
        }

        if (disableRateLimiting || getPackageTrackingDetailsBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<GetPackageTrackingDetailsResponse>() {}.getType();
            return apiClient.execute(call, localVarReturnType);
        } else throw new ApiException.RateLimitExceeded("getPackageTrackingDetails operation exceeds rate limit");
    }

    /**
     * Returns delivery tracking information for a package in an outbound shipment for a Multi-Channel Fulfillment
     * order. **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 | The
     * &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the
     * requested operation, when available. The table above indicates the default rate and burst values for this
     * operation. Selling partners whose business demands require higher throughput may have higher rate and burst
     * values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param packageNumber The unencrypted package identifier returned by the &#x60;getFulfillmentOrder&#x60;
     *     operation. (required)
     * @return ApiResponse&lt;GetPackageTrackingDetailsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<GetPackageTrackingDetailsResponse> getPackageTrackingDetailsWithHttpInfo(Integer packageNumber)
            throws ApiException, LWAException {
        return getPackageTrackingDetailsWithHttpInfo(packageNumber, null);
    }

    /**
     * (asynchronously) Returns delivery tracking information for a package in an outbound shipment for a Multi-Channel
     * Fulfillment order. **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 | The
     * &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the
     * requested operation, when available. The table above indicates the default rate and burst values for this
     * operation. Selling partners whose business demands require higher throughput may have higher rate and burst
     * values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param packageNumber The unencrypted package identifier returned by the &#x60;getFulfillmentOrder&#x60;
     *     operation. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call getPackageTrackingDetailsAsync(
            Integer packageNumber, final ApiCallback<GetPackageTrackingDetailsResponse> callback)
            throws ApiException, LWAException {
        return getPackageTrackingDetailsAsync(packageNumber, callback, null);
    }
    /**
     * (asynchronously) Returns delivery tracking information for a package in an outbound shipment for a Multi-Channel
     * Fulfillment order. **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 | The
     * &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the
     * requested operation, when available. The table above indicates the default rate and burst values for this
     * operation. Selling partners whose business demands require higher throughput may have higher rate and burst
     * values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param packageNumber The unencrypted package identifier returned by the &#x60;getFulfillmentOrder&#x60;
     *     operation. (required)
     * @param callback The callback to be executed when the API call finishes
     * @param restrictedDataToken Restricted Data Token (optional)
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call getPackageTrackingDetailsAsync(
            Integer packageNumber,
            final ApiCallback<GetPackageTrackingDetailsResponse> callback,
            String restrictedDataToken)
            throws ApiException, LWAException {

        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = getPackageTrackingDetailsValidateBeforeCall(packageNumber, progressRequestListener);

        if (restrictedDataToken != null) {
            okhttp3.Request request = call.request();
            request = RestrictedDataTokenSigner.sign(
                    request, restrictedDataToken, "FbaOutboundApi-getPackageTrackingDetails");
            call = apiClient.getHttpClient().newCall(request);
        }

        if (disableRateLimiting || getPackageTrackingDetailsBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<GetPackageTrackingDetailsResponse>() {}.getType();
            apiClient.executeAsync(call, localVarReturnType, callback);
            return call;
        } else throw new ApiException.RateLimitExceeded("getPackageTrackingDetails operation exceeds rate limit");
    }
    /**
     * Build call for listAllFulfillmentOrders
     *
     * @param queryStartDate A date used to select fulfillment orders that were last updated after (or at) a specified
     *     time. An update is defined as any change in fulfillment order status, including the creation of a new
     *     fulfillment order. (optional)
     * @param nextToken A string token returned in the response to your previous request. (optional)
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    private okhttp3.Call listAllFulfillmentOrdersCall(
            OffsetDateTime queryStartDate,
            String nextToken,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/fba/outbound/2020-07-01/fulfillmentOrders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (queryStartDate != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("queryStartDate", queryStartDate));
        if (nextToken != null) localVarQueryParams.addAll(apiClient.parameterToPair("nextToken", nextToken));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json", "payload"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {};

        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        return apiClient.buildCall(
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                progressRequestListener);
    }

    private okhttp3.Call listAllFulfillmentOrdersValidateBeforeCall(
            OffsetDateTime queryStartDate,
            String nextToken,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {

        return listAllFulfillmentOrdersCall(queryStartDate, nextToken, progressRequestListener);
    }

    /**
     * Returns a list of fulfillment orders fulfilled after (or at) a specified date-time, or indicated by the next
     * token parameter. **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 | The
     * &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the
     * requested operation, when available. The table above indicates the default rate and burst values for this
     * operation. Selling partners whose business demands require higher throughput may have higher rate and burst
     * values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api)
     *
     * @param queryStartDate A date used to select fulfillment orders that were last updated after (or at) a specified
     *     time. An update is defined as any change in fulfillment order status, including the creation of a new
     *     fulfillment order. (optional)
     * @param nextToken A string token returned in the response to your previous request. (optional)
     * @param restrictedDataToken Restricted Data Token (optional)
     * @return ListAllFulfillmentOrdersResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ListAllFulfillmentOrdersResponse listAllFulfillmentOrders(
            OffsetDateTime queryStartDate, String nextToken, String restrictedDataToken)
            throws ApiException, LWAException {
        ApiResponse<ListAllFulfillmentOrdersResponse> resp =
                listAllFulfillmentOrdersWithHttpInfo(queryStartDate, nextToken, restrictedDataToken);
        return resp.getData();
    }

    /**
     * Returns a list of fulfillment orders fulfilled after (or at) a specified date-time, or indicated by the next
     * token parameter. **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 | The
     * &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the
     * requested operation, when available. The table above indicates the default rate and burst values for this
     * operation. Selling partners whose business demands require higher throughput may have higher rate and burst
     * values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api)
     *
     * @param queryStartDate A date used to select fulfillment orders that were last updated after (or at) a specified
     *     time. An update is defined as any change in fulfillment order status, including the creation of a new
     *     fulfillment order. (optional)
     * @param nextToken A string token returned in the response to your previous request. (optional)
     * @return ListAllFulfillmentOrdersResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ListAllFulfillmentOrdersResponse listAllFulfillmentOrders(OffsetDateTime queryStartDate, String nextToken)
            throws ApiException, LWAException {
        ApiResponse<ListAllFulfillmentOrdersResponse> resp =
                listAllFulfillmentOrdersWithHttpInfo(queryStartDate, nextToken, null);
        return resp.getData();
    }

    /**
     * Returns a list of fulfillment orders fulfilled after (or at) a specified date-time, or indicated by the next
     * token parameter. **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 | The
     * &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the
     * requested operation, when available. The table above indicates the default rate and burst values for this
     * operation. Selling partners whose business demands require higher throughput may have higher rate and burst
     * values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api)
     *
     * @param queryStartDate A date used to select fulfillment orders that were last updated after (or at) a specified
     *     time. An update is defined as any change in fulfillment order status, including the creation of a new
     *     fulfillment order. (optional)
     * @param nextToken A string token returned in the response to your previous request. (optional)
     * @param restrictedDataToken Restricted Data Token (optional)
     * @return ApiResponse&lt;ListAllFulfillmentOrdersResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<ListAllFulfillmentOrdersResponse> listAllFulfillmentOrdersWithHttpInfo(
            OffsetDateTime queryStartDate, String nextToken, String restrictedDataToken)
            throws ApiException, LWAException {
        okhttp3.Call call = listAllFulfillmentOrdersValidateBeforeCall(queryStartDate, nextToken, null);

        if (restrictedDataToken != null) {
            okhttp3.Request request = call.request();
            request = RestrictedDataTokenSigner.sign(
                    request, restrictedDataToken, "FbaOutboundApi-listAllFulfillmentOrders");
            call = apiClient.getHttpClient().newCall(request);
        }

        if (disableRateLimiting || listAllFulfillmentOrdersBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<ListAllFulfillmentOrdersResponse>() {}.getType();
            return apiClient.execute(call, localVarReturnType);
        } else throw new ApiException.RateLimitExceeded("listAllFulfillmentOrders operation exceeds rate limit");
    }

    /**
     * Returns a list of fulfillment orders fulfilled after (or at) a specified date-time, or indicated by the next
     * token parameter. **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 | The
     * &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the
     * requested operation, when available. The table above indicates the default rate and burst values for this
     * operation. Selling partners whose business demands require higher throughput may have higher rate and burst
     * values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api)
     *
     * @param queryStartDate A date used to select fulfillment orders that were last updated after (or at) a specified
     *     time. An update is defined as any change in fulfillment order status, including the creation of a new
     *     fulfillment order. (optional)
     * @param nextToken A string token returned in the response to your previous request. (optional)
     * @return ApiResponse&lt;ListAllFulfillmentOrdersResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<ListAllFulfillmentOrdersResponse> listAllFulfillmentOrdersWithHttpInfo(
            OffsetDateTime queryStartDate, String nextToken) throws ApiException, LWAException {
        return listAllFulfillmentOrdersWithHttpInfo(queryStartDate, nextToken, null);
    }

    /**
     * (asynchronously) Returns a list of fulfillment orders fulfilled after (or at) a specified date-time, or indicated
     * by the next token parameter. **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |
     * The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to
     * the requested operation, when available. The table above indicates the default rate and burst values for this
     * operation. Selling partners whose business demands require higher throughput may have higher rate and burst
     * values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api)
     *
     * @param queryStartDate A date used to select fulfillment orders that were last updated after (or at) a specified
     *     time. An update is defined as any change in fulfillment order status, including the creation of a new
     *     fulfillment order. (optional)
     * @param nextToken A string token returned in the response to your previous request. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call listAllFulfillmentOrdersAsync(
            OffsetDateTime queryStartDate,
            String nextToken,
            final ApiCallback<ListAllFulfillmentOrdersResponse> callback)
            throws ApiException, LWAException {
        return listAllFulfillmentOrdersAsync(queryStartDate, nextToken, callback, null);
    }
    /**
     * (asynchronously) Returns a list of fulfillment orders fulfilled after (or at) a specified date-time, or indicated
     * by the next token parameter. **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |
     * The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to
     * the requested operation, when available. The table above indicates the default rate and burst values for this
     * operation. Selling partners whose business demands require higher throughput may have higher rate and burst
     * values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api)
     *
     * @param queryStartDate A date used to select fulfillment orders that were last updated after (or at) a specified
     *     time. An update is defined as any change in fulfillment order status, including the creation of a new
     *     fulfillment order. (optional)
     * @param nextToken A string token returned in the response to your previous request. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @param restrictedDataToken Restricted Data Token (optional)
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call listAllFulfillmentOrdersAsync(
            OffsetDateTime queryStartDate,
            String nextToken,
            final ApiCallback<ListAllFulfillmentOrdersResponse> callback,
            String restrictedDataToken)
            throws ApiException, LWAException {

        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call =
                listAllFulfillmentOrdersValidateBeforeCall(queryStartDate, nextToken, progressRequestListener);

        if (restrictedDataToken != null) {
            okhttp3.Request request = call.request();
            request = RestrictedDataTokenSigner.sign(
                    request, restrictedDataToken, "FbaOutboundApi-listAllFulfillmentOrders");
            call = apiClient.getHttpClient().newCall(request);
        }

        if (disableRateLimiting || listAllFulfillmentOrdersBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<ListAllFulfillmentOrdersResponse>() {}.getType();
            apiClient.executeAsync(call, localVarReturnType, callback);
            return call;
        } else throw new ApiException.RateLimitExceeded("listAllFulfillmentOrders operation exceeds rate limit");
    }
    /**
     * Build call for listReturnReasonCodes
     *
     * @param sellerSku The seller SKU for which return reason codes are required. (required)
     * @param marketplaceId The marketplace for which the seller wants return reason codes. (optional)
     * @param sellerFulfillmentOrderId The identifier assigned to the item by the seller when the fulfillment order was
     *     created. The service uses this value to determine the marketplace for which the seller wants return reason
     *     codes. (optional)
     * @param language The language that the &#x60;TranslatedDescription&#x60; property of the
     *     &#x60;ReasonCodeDetails&#x60; response object should be translated into. (optional)
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    private okhttp3.Call listReturnReasonCodesCall(
            String sellerSku,
            String marketplaceId,
            String sellerFulfillmentOrderId,
            String language,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/fba/outbound/2020-07-01/returnReasonCodes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (sellerSku != null) localVarQueryParams.addAll(apiClient.parameterToPair("sellerSku", sellerSku));
        if (marketplaceId != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("marketplaceId", marketplaceId));
        if (sellerFulfillmentOrderId != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("sellerFulfillmentOrderId", sellerFulfillmentOrderId));
        if (language != null) localVarQueryParams.addAll(apiClient.parameterToPair("language", language));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json", "payload"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {};

        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        return apiClient.buildCall(
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                progressRequestListener);
    }

    private okhttp3.Call listReturnReasonCodesValidateBeforeCall(
            String sellerSku,
            String marketplaceId,
            String sellerFulfillmentOrderId,
            String language,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        // verify the required parameter 'sellerSku' is set
        if (sellerSku == null) {
            throw new ApiException(
                    "Missing the required parameter 'sellerSku' when calling listReturnReasonCodes(Async)");
        }

        return listReturnReasonCodesCall(
                sellerSku, marketplaceId, sellerFulfillmentOrderId, language, progressRequestListener);
    }

    /**
     * Returns a list of return reason codes for a seller SKU in a given marketplace. The parameters for this operation
     * may contain special characters that require URL encoding. To avoid errors with SKUs when encoding URLs, refer to
     * [URL Encoding](https://developer-docs.amazon.com/sp-api/docs/url-encoding). **Usage Plan:** | Rate (requests per
     * second) | Burst | | ---- | ---- | | 2 | 30 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the
     * usage plan rate limits that were applied to the requested operation, when available. The table above indicates
     * the default rate and burst values for this operation. Selling partners whose business demands require higher
     * throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage
     * Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param sellerSku The seller SKU for which return reason codes are required. (required)
     * @param marketplaceId The marketplace for which the seller wants return reason codes. (optional)
     * @param sellerFulfillmentOrderId The identifier assigned to the item by the seller when the fulfillment order was
     *     created. The service uses this value to determine the marketplace for which the seller wants return reason
     *     codes. (optional)
     * @param language The language that the &#x60;TranslatedDescription&#x60; property of the
     *     &#x60;ReasonCodeDetails&#x60; response object should be translated into. (optional)
     * @param restrictedDataToken Restricted Data Token (optional)
     * @return ListReturnReasonCodesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ListReturnReasonCodesResponse listReturnReasonCodes(
            String sellerSku,
            String marketplaceId,
            String sellerFulfillmentOrderId,
            String language,
            String restrictedDataToken)
            throws ApiException, LWAException {
        ApiResponse<ListReturnReasonCodesResponse> resp = listReturnReasonCodesWithHttpInfo(
                sellerSku, marketplaceId, sellerFulfillmentOrderId, language, restrictedDataToken);
        return resp.getData();
    }

    /**
     * Returns a list of return reason codes for a seller SKU in a given marketplace. The parameters for this operation
     * may contain special characters that require URL encoding. To avoid errors with SKUs when encoding URLs, refer to
     * [URL Encoding](https://developer-docs.amazon.com/sp-api/docs/url-encoding). **Usage Plan:** | Rate (requests per
     * second) | Burst | | ---- | ---- | | 2 | 30 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the
     * usage plan rate limits that were applied to the requested operation, when available. The table above indicates
     * the default rate and burst values for this operation. Selling partners whose business demands require higher
     * throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage
     * Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param sellerSku The seller SKU for which return reason codes are required. (required)
     * @param marketplaceId The marketplace for which the seller wants return reason codes. (optional)
     * @param sellerFulfillmentOrderId The identifier assigned to the item by the seller when the fulfillment order was
     *     created. The service uses this value to determine the marketplace for which the seller wants return reason
     *     codes. (optional)
     * @param language The language that the &#x60;TranslatedDescription&#x60; property of the
     *     &#x60;ReasonCodeDetails&#x60; response object should be translated into. (optional)
     * @return ListReturnReasonCodesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ListReturnReasonCodesResponse listReturnReasonCodes(
            String sellerSku, String marketplaceId, String sellerFulfillmentOrderId, String language)
            throws ApiException, LWAException {
        ApiResponse<ListReturnReasonCodesResponse> resp =
                listReturnReasonCodesWithHttpInfo(sellerSku, marketplaceId, sellerFulfillmentOrderId, language, null);
        return resp.getData();
    }

    /**
     * Returns a list of return reason codes for a seller SKU in a given marketplace. The parameters for this operation
     * may contain special characters that require URL encoding. To avoid errors with SKUs when encoding URLs, refer to
     * [URL Encoding](https://developer-docs.amazon.com/sp-api/docs/url-encoding). **Usage Plan:** | Rate (requests per
     * second) | Burst | | ---- | ---- | | 2 | 30 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the
     * usage plan rate limits that were applied to the requested operation, when available. The table above indicates
     * the default rate and burst values for this operation. Selling partners whose business demands require higher
     * throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage
     * Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param sellerSku The seller SKU for which return reason codes are required. (required)
     * @param marketplaceId The marketplace for which the seller wants return reason codes. (optional)
     * @param sellerFulfillmentOrderId The identifier assigned to the item by the seller when the fulfillment order was
     *     created. The service uses this value to determine the marketplace for which the seller wants return reason
     *     codes. (optional)
     * @param language The language that the &#x60;TranslatedDescription&#x60; property of the
     *     &#x60;ReasonCodeDetails&#x60; response object should be translated into. (optional)
     * @param restrictedDataToken Restricted Data Token (optional)
     * @return ApiResponse&lt;ListReturnReasonCodesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<ListReturnReasonCodesResponse> listReturnReasonCodesWithHttpInfo(
            String sellerSku,
            String marketplaceId,
            String sellerFulfillmentOrderId,
            String language,
            String restrictedDataToken)
            throws ApiException, LWAException {
        okhttp3.Call call = listReturnReasonCodesValidateBeforeCall(
                sellerSku, marketplaceId, sellerFulfillmentOrderId, language, null);

        if (restrictedDataToken != null) {
            okhttp3.Request request = call.request();
            request = RestrictedDataTokenSigner.sign(
                    request, restrictedDataToken, "FbaOutboundApi-listReturnReasonCodes");
            call = apiClient.getHttpClient().newCall(request);
        }

        if (disableRateLimiting || listReturnReasonCodesBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<ListReturnReasonCodesResponse>() {}.getType();
            return apiClient.execute(call, localVarReturnType);
        } else throw new ApiException.RateLimitExceeded("listReturnReasonCodes operation exceeds rate limit");
    }

    /**
     * Returns a list of return reason codes for a seller SKU in a given marketplace. The parameters for this operation
     * may contain special characters that require URL encoding. To avoid errors with SKUs when encoding URLs, refer to
     * [URL Encoding](https://developer-docs.amazon.com/sp-api/docs/url-encoding). **Usage Plan:** | Rate (requests per
     * second) | Burst | | ---- | ---- | | 2 | 30 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the
     * usage plan rate limits that were applied to the requested operation, when available. The table above indicates
     * the default rate and burst values for this operation. Selling partners whose business demands require higher
     * throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage
     * Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param sellerSku The seller SKU for which return reason codes are required. (required)
     * @param marketplaceId The marketplace for which the seller wants return reason codes. (optional)
     * @param sellerFulfillmentOrderId The identifier assigned to the item by the seller when the fulfillment order was
     *     created. The service uses this value to determine the marketplace for which the seller wants return reason
     *     codes. (optional)
     * @param language The language that the &#x60;TranslatedDescription&#x60; property of the
     *     &#x60;ReasonCodeDetails&#x60; response object should be translated into. (optional)
     * @return ApiResponse&lt;ListReturnReasonCodesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<ListReturnReasonCodesResponse> listReturnReasonCodesWithHttpInfo(
            String sellerSku, String marketplaceId, String sellerFulfillmentOrderId, String language)
            throws ApiException, LWAException {
        return listReturnReasonCodesWithHttpInfo(sellerSku, marketplaceId, sellerFulfillmentOrderId, language, null);
    }

    /**
     * (asynchronously) Returns a list of return reason codes for a seller SKU in a given marketplace. The parameters
     * for this operation may contain special characters that require URL encoding. To avoid errors with SKUs when
     * encoding URLs, refer to [URL Encoding](https://developer-docs.amazon.com/sp-api/docs/url-encoding). **Usage
     * Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 | The &#x60;x-amzn-RateLimit-Limit&#x60;
     * response header returns the usage plan rate limits that were applied to the requested operation, when available.
     * The table above indicates the default rate and burst values for this operation. Selling partners whose business
     * demands require higher throughput may have higher rate and burst values than those shown here. For more
     * information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param sellerSku The seller SKU for which return reason codes are required. (required)
     * @param marketplaceId The marketplace for which the seller wants return reason codes. (optional)
     * @param sellerFulfillmentOrderId The identifier assigned to the item by the seller when the fulfillment order was
     *     created. The service uses this value to determine the marketplace for which the seller wants return reason
     *     codes. (optional)
     * @param language The language that the &#x60;TranslatedDescription&#x60; property of the
     *     &#x60;ReasonCodeDetails&#x60; response object should be translated into. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call listReturnReasonCodesAsync(
            String sellerSku,
            String marketplaceId,
            String sellerFulfillmentOrderId,
            String language,
            final ApiCallback<ListReturnReasonCodesResponse> callback)
            throws ApiException, LWAException {
        return listReturnReasonCodesAsync(sellerSku, marketplaceId, sellerFulfillmentOrderId, language, callback, null);
    }
    /**
     * (asynchronously) Returns a list of return reason codes for a seller SKU in a given marketplace. The parameters
     * for this operation may contain special characters that require URL encoding. To avoid errors with SKUs when
     * encoding URLs, refer to [URL Encoding](https://developer-docs.amazon.com/sp-api/docs/url-encoding). **Usage
     * Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 | The &#x60;x-amzn-RateLimit-Limit&#x60;
     * response header returns the usage plan rate limits that were applied to the requested operation, when available.
     * The table above indicates the default rate and burst values for this operation. Selling partners whose business
     * demands require higher throughput may have higher rate and burst values than those shown here. For more
     * information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param sellerSku The seller SKU for which return reason codes are required. (required)
     * @param marketplaceId The marketplace for which the seller wants return reason codes. (optional)
     * @param sellerFulfillmentOrderId The identifier assigned to the item by the seller when the fulfillment order was
     *     created. The service uses this value to determine the marketplace for which the seller wants return reason
     *     codes. (optional)
     * @param language The language that the &#x60;TranslatedDescription&#x60; property of the
     *     &#x60;ReasonCodeDetails&#x60; response object should be translated into. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @param restrictedDataToken Restricted Data Token (optional)
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call listReturnReasonCodesAsync(
            String sellerSku,
            String marketplaceId,
            String sellerFulfillmentOrderId,
            String language,
            final ApiCallback<ListReturnReasonCodesResponse> callback,
            String restrictedDataToken)
            throws ApiException, LWAException {

        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = listReturnReasonCodesValidateBeforeCall(
                sellerSku, marketplaceId, sellerFulfillmentOrderId, language, progressRequestListener);

        if (restrictedDataToken != null) {
            okhttp3.Request request = call.request();
            request = RestrictedDataTokenSigner.sign(
                    request, restrictedDataToken, "FbaOutboundApi-listReturnReasonCodes");
            call = apiClient.getHttpClient().newCall(request);
        }

        if (disableRateLimiting || listReturnReasonCodesBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<ListReturnReasonCodesResponse>() {}.getType();
            apiClient.executeAsync(call, localVarReturnType, callback);
            return call;
        } else throw new ApiException.RateLimitExceeded("listReturnReasonCodes operation exceeds rate limit");
    }
    /**
     * Build call for submitFulfillmentOrderStatusUpdate
     *
     * @param body The identifier assigned to the item by the seller when the fulfillment order was created. (required)
     * @param sellerFulfillmentOrderId The identifier assigned to the item by the seller when the fulfillment order was
     *     created. (required)
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    private okhttp3.Call submitFulfillmentOrderStatusUpdateCall(
            SubmitFulfillmentOrderStatusUpdateRequest body,
            String sellerFulfillmentOrderId,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/fba/outbound/2020-07-01/fulfillmentOrders/{sellerFulfillmentOrderId}/status"
                .replaceAll(
                        "\\{" + "sellerFulfillmentOrderId" + "\\}",
                        apiClient.escapeString(sellerFulfillmentOrderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        return apiClient.buildCall(
                localVarPath,
                "PUT",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                progressRequestListener);
    }

    private okhttp3.Call submitFulfillmentOrderStatusUpdateValidateBeforeCall(
            SubmitFulfillmentOrderStatusUpdateRequest body,
            String sellerFulfillmentOrderId,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException(
                    "Missing the required parameter 'body' when calling submitFulfillmentOrderStatusUpdate(Async)");
        }
        // verify the required parameter 'sellerFulfillmentOrderId' is set
        if (sellerFulfillmentOrderId == null) {
            throw new ApiException(
                    "Missing the required parameter 'sellerFulfillmentOrderId' when calling submitFulfillmentOrderStatusUpdate(Async)");
        }

        return submitFulfillmentOrderStatusUpdateCall(body, sellerFulfillmentOrderId, progressRequestListener);
    }

    /**
     * Requests that Amazon update the status of an order in the sandbox testing environment. This is a sandbox-only
     * operation and must be directed to a sandbox endpoint. Refer to [Fulfillment Outbound Dynamic Sandbox
     * Guide](https://developer-docs.amazon.com/sp-api/docs/fulfillment-outbound-dynamic-sandbox-guide) and [Selling
     * Partner API sandbox](https://developer-docs.amazon.com/sp-api/docs/the-selling-partner-api-sandbox) for more
     * information.
     *
     * @param body The identifier assigned to the item by the seller when the fulfillment order was created. (required)
     * @param sellerFulfillmentOrderId The identifier assigned to the item by the seller when the fulfillment order was
     *     created. (required)
     * @param restrictedDataToken Restricted Data Token (optional)
     * @return SubmitFulfillmentOrderStatusUpdateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public SubmitFulfillmentOrderStatusUpdateResponse submitFulfillmentOrderStatusUpdate(
            SubmitFulfillmentOrderStatusUpdateRequest body, String sellerFulfillmentOrderId, String restrictedDataToken)
            throws ApiException, LWAException {
        ApiResponse<SubmitFulfillmentOrderStatusUpdateResponse> resp =
                submitFulfillmentOrderStatusUpdateWithHttpInfo(body, sellerFulfillmentOrderId, restrictedDataToken);
        return resp.getData();
    }

    /**
     * Requests that Amazon update the status of an order in the sandbox testing environment. This is a sandbox-only
     * operation and must be directed to a sandbox endpoint. Refer to [Fulfillment Outbound Dynamic Sandbox
     * Guide](https://developer-docs.amazon.com/sp-api/docs/fulfillment-outbound-dynamic-sandbox-guide) and [Selling
     * Partner API sandbox](https://developer-docs.amazon.com/sp-api/docs/the-selling-partner-api-sandbox) for more
     * information.
     *
     * @param body The identifier assigned to the item by the seller when the fulfillment order was created. (required)
     * @param sellerFulfillmentOrderId The identifier assigned to the item by the seller when the fulfillment order was
     *     created. (required)
     * @return SubmitFulfillmentOrderStatusUpdateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public SubmitFulfillmentOrderStatusUpdateResponse submitFulfillmentOrderStatusUpdate(
            SubmitFulfillmentOrderStatusUpdateRequest body, String sellerFulfillmentOrderId)
            throws ApiException, LWAException {
        ApiResponse<SubmitFulfillmentOrderStatusUpdateResponse> resp =
                submitFulfillmentOrderStatusUpdateWithHttpInfo(body, sellerFulfillmentOrderId, null);
        return resp.getData();
    }

    /**
     * Requests that Amazon update the status of an order in the sandbox testing environment. This is a sandbox-only
     * operation and must be directed to a sandbox endpoint. Refer to [Fulfillment Outbound Dynamic Sandbox
     * Guide](https://developer-docs.amazon.com/sp-api/docs/fulfillment-outbound-dynamic-sandbox-guide) and [Selling
     * Partner API sandbox](https://developer-docs.amazon.com/sp-api/docs/the-selling-partner-api-sandbox) for more
     * information.
     *
     * @param body The identifier assigned to the item by the seller when the fulfillment order was created. (required)
     * @param sellerFulfillmentOrderId The identifier assigned to the item by the seller when the fulfillment order was
     *     created. (required)
     * @param restrictedDataToken Restricted Data Token (optional)
     * @return ApiResponse&lt;SubmitFulfillmentOrderStatusUpdateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<SubmitFulfillmentOrderStatusUpdateResponse> submitFulfillmentOrderStatusUpdateWithHttpInfo(
            SubmitFulfillmentOrderStatusUpdateRequest body, String sellerFulfillmentOrderId, String restrictedDataToken)
            throws ApiException, LWAException {
        okhttp3.Call call = submitFulfillmentOrderStatusUpdateValidateBeforeCall(body, sellerFulfillmentOrderId, null);

        if (restrictedDataToken != null) {
            okhttp3.Request request = call.request();
            request = RestrictedDataTokenSigner.sign(
                    request, restrictedDataToken, "FbaOutboundApi-submitFulfillmentOrderStatusUpdate");
            call = apiClient.getHttpClient().newCall(request);
        }

        if (disableRateLimiting || submitFulfillmentOrderStatusUpdateBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<SubmitFulfillmentOrderStatusUpdateResponse>() {}.getType();
            return apiClient.execute(call, localVarReturnType);
        } else
            throw new ApiException.RateLimitExceeded("submitFulfillmentOrderStatusUpdate operation exceeds rate limit");
    }

    /**
     * Requests that Amazon update the status of an order in the sandbox testing environment. This is a sandbox-only
     * operation and must be directed to a sandbox endpoint. Refer to [Fulfillment Outbound Dynamic Sandbox
     * Guide](https://developer-docs.amazon.com/sp-api/docs/fulfillment-outbound-dynamic-sandbox-guide) and [Selling
     * Partner API sandbox](https://developer-docs.amazon.com/sp-api/docs/the-selling-partner-api-sandbox) for more
     * information.
     *
     * @param body The identifier assigned to the item by the seller when the fulfillment order was created. (required)
     * @param sellerFulfillmentOrderId The identifier assigned to the item by the seller when the fulfillment order was
     *     created. (required)
     * @return ApiResponse&lt;SubmitFulfillmentOrderStatusUpdateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<SubmitFulfillmentOrderStatusUpdateResponse> submitFulfillmentOrderStatusUpdateWithHttpInfo(
            SubmitFulfillmentOrderStatusUpdateRequest body, String sellerFulfillmentOrderId)
            throws ApiException, LWAException {
        return submitFulfillmentOrderStatusUpdateWithHttpInfo(body, sellerFulfillmentOrderId, null);
    }

    /**
     * (asynchronously) Requests that Amazon update the status of an order in the sandbox testing environment. This is a
     * sandbox-only operation and must be directed to a sandbox endpoint. Refer to [Fulfillment Outbound Dynamic Sandbox
     * Guide](https://developer-docs.amazon.com/sp-api/docs/fulfillment-outbound-dynamic-sandbox-guide) and [Selling
     * Partner API sandbox](https://developer-docs.amazon.com/sp-api/docs/the-selling-partner-api-sandbox) for more
     * information.
     *
     * @param body The identifier assigned to the item by the seller when the fulfillment order was created. (required)
     * @param sellerFulfillmentOrderId The identifier assigned to the item by the seller when the fulfillment order was
     *     created. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call submitFulfillmentOrderStatusUpdateAsync(
            SubmitFulfillmentOrderStatusUpdateRequest body,
            String sellerFulfillmentOrderId,
            final ApiCallback<SubmitFulfillmentOrderStatusUpdateResponse> callback)
            throws ApiException, LWAException {
        return submitFulfillmentOrderStatusUpdateAsync(body, sellerFulfillmentOrderId, callback, null);
    }
    /**
     * (asynchronously) Requests that Amazon update the status of an order in the sandbox testing environment. This is a
     * sandbox-only operation and must be directed to a sandbox endpoint. Refer to [Fulfillment Outbound Dynamic Sandbox
     * Guide](https://developer-docs.amazon.com/sp-api/docs/fulfillment-outbound-dynamic-sandbox-guide) and [Selling
     * Partner API sandbox](https://developer-docs.amazon.com/sp-api/docs/the-selling-partner-api-sandbox) for more
     * information.
     *
     * @param body The identifier assigned to the item by the seller when the fulfillment order was created. (required)
     * @param sellerFulfillmentOrderId The identifier assigned to the item by the seller when the fulfillment order was
     *     created. (required)
     * @param callback The callback to be executed when the API call finishes
     * @param restrictedDataToken Restricted Data Token (optional)
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call submitFulfillmentOrderStatusUpdateAsync(
            SubmitFulfillmentOrderStatusUpdateRequest body,
            String sellerFulfillmentOrderId,
            final ApiCallback<SubmitFulfillmentOrderStatusUpdateResponse> callback,
            String restrictedDataToken)
            throws ApiException, LWAException {

        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = submitFulfillmentOrderStatusUpdateValidateBeforeCall(
                body, sellerFulfillmentOrderId, progressRequestListener);

        if (restrictedDataToken != null) {
            okhttp3.Request request = call.request();
            request = RestrictedDataTokenSigner.sign(
                    request, restrictedDataToken, "FbaOutboundApi-submitFulfillmentOrderStatusUpdate");
            call = apiClient.getHttpClient().newCall(request);
        }

        if (disableRateLimiting || submitFulfillmentOrderStatusUpdateBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<SubmitFulfillmentOrderStatusUpdateResponse>() {}.getType();
            apiClient.executeAsync(call, localVarReturnType, callback);
            return call;
        } else
            throw new ApiException.RateLimitExceeded("submitFulfillmentOrderStatusUpdate operation exceeds rate limit");
    }
    /**
     * Build call for updateFulfillmentOrder
     *
     * @param body UpdateFulfillmentOrderRequest parameter (required)
     * @param sellerFulfillmentOrderId The identifier assigned to the item by the seller when the fulfillment order was
     *     created. (required)
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    private okhttp3.Call updateFulfillmentOrderCall(
            UpdateFulfillmentOrderRequest body,
            String sellerFulfillmentOrderId,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/fba/outbound/2020-07-01/fulfillmentOrders/{sellerFulfillmentOrderId}"
                .replaceAll(
                        "\\{" + "sellerFulfillmentOrderId" + "\\}",
                        apiClient.escapeString(sellerFulfillmentOrderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        return apiClient.buildCall(
                localVarPath,
                "PUT",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                progressRequestListener);
    }

    private okhttp3.Call updateFulfillmentOrderValidateBeforeCall(
            UpdateFulfillmentOrderRequest body,
            String sellerFulfillmentOrderId,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateFulfillmentOrder(Async)");
        }
        // verify the required parameter 'sellerFulfillmentOrderId' is set
        if (sellerFulfillmentOrderId == null) {
            throw new ApiException(
                    "Missing the required parameter 'sellerFulfillmentOrderId' when calling updateFulfillmentOrder(Async)");
        }

        return updateFulfillmentOrderCall(body, sellerFulfillmentOrderId, progressRequestListener);
    }

    /**
     * Updates and/or requests shipment for a fulfillment order with an order hold on it. **Usage Plan:** | Rate
     * (requests per second) | Burst | | ---- | ---- | | 2 | 30 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header
     * returns the usage plan rate limits that were applied to the requested operation, when available. The table above
     * indicates the default rate and burst values for this operation. Selling partners whose business demands require
     * higher throughput may have higher rate and burst values than those shown here. For more information, refer to
     * [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param body UpdateFulfillmentOrderRequest parameter (required)
     * @param sellerFulfillmentOrderId The identifier assigned to the item by the seller when the fulfillment order was
     *     created. (required)
     * @param restrictedDataToken Restricted Data Token (optional)
     * @return UpdateFulfillmentOrderResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public UpdateFulfillmentOrderResponse updateFulfillmentOrder(
            UpdateFulfillmentOrderRequest body, String sellerFulfillmentOrderId, String restrictedDataToken)
            throws ApiException, LWAException {
        ApiResponse<UpdateFulfillmentOrderResponse> resp =
                updateFulfillmentOrderWithHttpInfo(body, sellerFulfillmentOrderId, restrictedDataToken);
        return resp.getData();
    }

    /**
     * Updates and/or requests shipment for a fulfillment order with an order hold on it. **Usage Plan:** | Rate
     * (requests per second) | Burst | | ---- | ---- | | 2 | 30 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header
     * returns the usage plan rate limits that were applied to the requested operation, when available. The table above
     * indicates the default rate and burst values for this operation. Selling partners whose business demands require
     * higher throughput may have higher rate and burst values than those shown here. For more information, refer to
     * [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param body UpdateFulfillmentOrderRequest parameter (required)
     * @param sellerFulfillmentOrderId The identifier assigned to the item by the seller when the fulfillment order was
     *     created. (required)
     * @return UpdateFulfillmentOrderResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public UpdateFulfillmentOrderResponse updateFulfillmentOrder(
            UpdateFulfillmentOrderRequest body, String sellerFulfillmentOrderId) throws ApiException, LWAException {
        ApiResponse<UpdateFulfillmentOrderResponse> resp =
                updateFulfillmentOrderWithHttpInfo(body, sellerFulfillmentOrderId, null);
        return resp.getData();
    }

    /**
     * Updates and/or requests shipment for a fulfillment order with an order hold on it. **Usage Plan:** | Rate
     * (requests per second) | Burst | | ---- | ---- | | 2 | 30 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header
     * returns the usage plan rate limits that were applied to the requested operation, when available. The table above
     * indicates the default rate and burst values for this operation. Selling partners whose business demands require
     * higher throughput may have higher rate and burst values than those shown here. For more information, refer to
     * [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param body UpdateFulfillmentOrderRequest parameter (required)
     * @param sellerFulfillmentOrderId The identifier assigned to the item by the seller when the fulfillment order was
     *     created. (required)
     * @param restrictedDataToken Restricted Data Token (optional)
     * @return ApiResponse&lt;UpdateFulfillmentOrderResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<UpdateFulfillmentOrderResponse> updateFulfillmentOrderWithHttpInfo(
            UpdateFulfillmentOrderRequest body, String sellerFulfillmentOrderId, String restrictedDataToken)
            throws ApiException, LWAException {
        okhttp3.Call call = updateFulfillmentOrderValidateBeforeCall(body, sellerFulfillmentOrderId, null);

        if (restrictedDataToken != null) {
            okhttp3.Request request = call.request();
            request = RestrictedDataTokenSigner.sign(
                    request, restrictedDataToken, "FbaOutboundApi-updateFulfillmentOrder");
            call = apiClient.getHttpClient().newCall(request);
        }

        if (disableRateLimiting || updateFulfillmentOrderBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<UpdateFulfillmentOrderResponse>() {}.getType();
            return apiClient.execute(call, localVarReturnType);
        } else throw new ApiException.RateLimitExceeded("updateFulfillmentOrder operation exceeds rate limit");
    }

    /**
     * Updates and/or requests shipment for a fulfillment order with an order hold on it. **Usage Plan:** | Rate
     * (requests per second) | Burst | | ---- | ---- | | 2 | 30 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header
     * returns the usage plan rate limits that were applied to the requested operation, when available. The table above
     * indicates the default rate and burst values for this operation. Selling partners whose business demands require
     * higher throughput may have higher rate and burst values than those shown here. For more information, refer to
     * [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param body UpdateFulfillmentOrderRequest parameter (required)
     * @param sellerFulfillmentOrderId The identifier assigned to the item by the seller when the fulfillment order was
     *     created. (required)
     * @return ApiResponse&lt;UpdateFulfillmentOrderResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<UpdateFulfillmentOrderResponse> updateFulfillmentOrderWithHttpInfo(
            UpdateFulfillmentOrderRequest body, String sellerFulfillmentOrderId) throws ApiException, LWAException {
        return updateFulfillmentOrderWithHttpInfo(body, sellerFulfillmentOrderId, null);
    }

    /**
     * (asynchronously) Updates and/or requests shipment for a fulfillment order with an order hold on it. **Usage
     * Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 | The &#x60;x-amzn-RateLimit-Limit&#x60;
     * response header returns the usage plan rate limits that were applied to the requested operation, when available.
     * The table above indicates the default rate and burst values for this operation. Selling partners whose business
     * demands require higher throughput may have higher rate and burst values than those shown here. For more
     * information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param body UpdateFulfillmentOrderRequest parameter (required)
     * @param sellerFulfillmentOrderId The identifier assigned to the item by the seller when the fulfillment order was
     *     created. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call updateFulfillmentOrderAsync(
            UpdateFulfillmentOrderRequest body,
            String sellerFulfillmentOrderId,
            final ApiCallback<UpdateFulfillmentOrderResponse> callback)
            throws ApiException, LWAException {
        return updateFulfillmentOrderAsync(body, sellerFulfillmentOrderId, callback, null);
    }
    /**
     * (asynchronously) Updates and/or requests shipment for a fulfillment order with an order hold on it. **Usage
     * Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 | The &#x60;x-amzn-RateLimit-Limit&#x60;
     * response header returns the usage plan rate limits that were applied to the requested operation, when available.
     * The table above indicates the default rate and burst values for this operation. Selling partners whose business
     * demands require higher throughput may have higher rate and burst values than those shown here. For more
     * information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param body UpdateFulfillmentOrderRequest parameter (required)
     * @param sellerFulfillmentOrderId The identifier assigned to the item by the seller when the fulfillment order was
     *     created. (required)
     * @param callback The callback to be executed when the API call finishes
     * @param restrictedDataToken Restricted Data Token (optional)
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call updateFulfillmentOrderAsync(
            UpdateFulfillmentOrderRequest body,
            String sellerFulfillmentOrderId,
            final ApiCallback<UpdateFulfillmentOrderResponse> callback,
            String restrictedDataToken)
            throws ApiException, LWAException {

        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call =
                updateFulfillmentOrderValidateBeforeCall(body, sellerFulfillmentOrderId, progressRequestListener);

        if (restrictedDataToken != null) {
            okhttp3.Request request = call.request();
            request = RestrictedDataTokenSigner.sign(
                    request, restrictedDataToken, "FbaOutboundApi-updateFulfillmentOrder");
            call = apiClient.getHttpClient().newCall(request);
        }

        if (disableRateLimiting || updateFulfillmentOrderBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<UpdateFulfillmentOrderResponse>() {}.getType();
            apiClient.executeAsync(call, localVarReturnType, callback);
            return call;
        } else throw new ApiException.RateLimitExceeded("updateFulfillmentOrder operation exceeds rate limit");
    }

    public static class Builder {
        private LWAAuthorizationCredentials lwaAuthorizationCredentials;
        private String endpoint;
        private LWAAccessTokenCache lwaAccessTokenCache;
        private Boolean disableAccessTokenCache = false;
        private Boolean disableRateLimiting = false;

        public Builder lwaAuthorizationCredentials(LWAAuthorizationCredentials lwaAuthorizationCredentials) {
            this.lwaAuthorizationCredentials = lwaAuthorizationCredentials;
            return this;
        }

        public Builder endpoint(String endpoint) {
            this.endpoint = endpoint;
            return this;
        }

        public Builder lwaAccessTokenCache(LWAAccessTokenCache lwaAccessTokenCache) {
            this.lwaAccessTokenCache = lwaAccessTokenCache;
            return this;
        }

        public Builder disableAccessTokenCache() {
            this.disableAccessTokenCache = true;
            return this;
        }

        public Builder disableRateLimiting() {
            this.disableRateLimiting = true;
            return this;
        }

        public FbaOutboundApi build() {
            if (lwaAuthorizationCredentials == null) {
                throw new RuntimeException("LWAAuthorizationCredentials not set");
            }

            if (StringUtil.isEmpty(endpoint)) {
                throw new RuntimeException("Endpoint not set");
            }

            LWAAuthorizationSigner lwaAuthorizationSigner = null;
            if (disableAccessTokenCache) {
                lwaAuthorizationSigner = new LWAAuthorizationSigner(lwaAuthorizationCredentials);
            } else {
                if (lwaAccessTokenCache == null) {
                    lwaAccessTokenCache = new LWAAccessTokenCacheImpl();
                }
                lwaAuthorizationSigner = new LWAAuthorizationSigner(lwaAuthorizationCredentials, lwaAccessTokenCache);
            }

            return new FbaOutboundApi(
                    new ApiClient()
                            .setLWAAuthorizationSigner(lwaAuthorizationSigner)
                            .setBasePath(endpoint),
                    disableRateLimiting);
        }
    }
}
