/*
 * The Selling Partner API for Amazon Seller Wallet Open Banking API
 * The Selling Partner API for Seller Wallet (Seller Wallet API) provides financial information that is relevant to a seller's Seller Wallet account. You can obtain financial events, balances, and transfer schedules for Seller Wallet accounts. You can also schedule and initiate transactions.
 *
 * OpenAPI spec version: 2024-03-01
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package software.amazon.spapi.models.sellerwallet.v2024_03_01;

import com.google.gson.annotations.SerializedName;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.Objects;

/**
 * Details of an Amazon SW bank account, used to hold money earned by a SW customer by selling items. NOTE: Not
 * including account_links, short cut links to the account balance and transactions -&gt; since not mandatory
 */
@Schema(
        description =
                "Details of an Amazon SW bank account, used to hold money earned by a SW customer by selling items. NOTE: Not including account_links, short cut links to the account balance and transactions -> since not mandatory ")
public class BankAccount {
    @SerializedName("accountId")
    private String accountId = null;

    @SerializedName("accountHolderName")
    private String accountHolderName = null;

    @SerializedName("bankAccountNumberFormat")
    private BankAccountNumberFormat bankAccountNumberFormat = null;

    @SerializedName("bankName")
    private String bankName = null;

    @SerializedName("bankAccountOwnershipType")
    private BankAccountOwnershipType bankAccountOwnershipType = null;

    @SerializedName("routingNumber")
    private String routingNumber = null;

    @SerializedName("bankNumberFormat")
    private BankNumberFormat bankNumberFormat = null;

    @SerializedName("accountCountryCode")
    private String accountCountryCode = null;

    @SerializedName("accountCurrency")
    private String accountCurrency = null;

    @SerializedName("bankAccountNumberTail")
    private String bankAccountNumberTail = null;

    @SerializedName("bankAccountHolderStatus")
    private BankAccountHolderStatus bankAccountHolderStatus = null;

    public BankAccount accountId(String accountId) {
        this.accountId = accountId;
        return this;
    }

    /**
     * The unique identifier provided by Amazon to identify the account
     *
     * @return accountId
     */
    @Schema(
            example = "amzn1.account.AGUGL2EM3ZHYSRJWH2UCRPIM5JFQ",
            description = "The unique identifier provided by Amazon to identify the account ")
    public String getAccountId() {
        return accountId;
    }

    public void setAccountId(String accountId) {
        this.accountId = accountId;
    }

    public BankAccount accountHolderName(String accountHolderName) {
        this.accountHolderName = accountHolderName;
        return this;
    }

    /**
     * BankAccount holder&#x27;s name (expected to be Amazon customer)
     *
     * @return accountHolderName
     */
    @Schema(
            example = "John Doe",
            required = true,
            description = "BankAccount holder's name (expected to be Amazon customer) ")
    public String getAccountHolderName() {
        return accountHolderName;
    }

    public void setAccountHolderName(String accountHolderName) {
        this.accountHolderName = accountHolderName;
    }

    public BankAccount bankAccountNumberFormat(BankAccountNumberFormat bankAccountNumberFormat) {
        this.bankAccountNumberFormat = bankAccountNumberFormat;
        return this;
    }

    /**
     * Get bankAccountNumberFormat
     *
     * @return bankAccountNumberFormat
     */
    @Schema(required = true, description = "")
    public BankAccountNumberFormat getBankAccountNumberFormat() {
        return bankAccountNumberFormat;
    }

    public void setBankAccountNumberFormat(BankAccountNumberFormat bankAccountNumberFormat) {
        this.bankAccountNumberFormat = bankAccountNumberFormat;
    }

    public BankAccount bankName(String bankName) {
        this.bankName = bankName;
        return this;
    }

    /**
     * The name of the bank, for all Amazon Seller Wallet account the value will be Amazon Seller Wallet
     *
     * @return bankName
     */
    @Schema(
            example = "Bank Of America",
            description =
                    "The name of the bank, for all Amazon Seller Wallet account the value will be Amazon Seller Wallet ")
    public String getBankName() {
        return bankName;
    }

    public void setBankName(String bankName) {
        this.bankName = bankName;
    }

    public BankAccount bankAccountOwnershipType(BankAccountOwnershipType bankAccountOwnershipType) {
        this.bankAccountOwnershipType = bankAccountOwnershipType;
        return this;
    }

    /**
     * Get bankAccountOwnershipType
     *
     * @return bankAccountOwnershipType
     */
    @Schema(required = true, description = "")
    public BankAccountOwnershipType getBankAccountOwnershipType() {
        return bankAccountOwnershipType;
    }

    public void setBankAccountOwnershipType(BankAccountOwnershipType bankAccountOwnershipType) {
        this.bankAccountOwnershipType = bankAccountOwnershipType;
    }

    public BankAccount routingNumber(String routingNumber) {
        this.routingNumber = routingNumber;
        return this;
    }

    /**
     * Routing number for automated clearing house transfers, for all Amazon Seller Wallet account the value will be
     * denoted by nine cosecutive 0&#x27;s,
     *
     * @return routingNumber
     */
    @Schema(
            example = "026009593",
            required = true,
            description =
                    "Routing number for automated clearing house transfers, for all Amazon Seller Wallet account the value will be denoted by nine cosecutive 0's,  ")
    public String getRoutingNumber() {
        return routingNumber;
    }

    public void setRoutingNumber(String routingNumber) {
        this.routingNumber = routingNumber;
    }

    public BankAccount bankNumberFormat(BankNumberFormat bankNumberFormat) {
        this.bankNumberFormat = bankNumberFormat;
        return this;
    }

    /**
     * Get bankNumberFormat
     *
     * @return bankNumberFormat
     */
    @Schema(required = true, description = "")
    public BankNumberFormat getBankNumberFormat() {
        return bankNumberFormat;
    }

    public void setBankNumberFormat(BankNumberFormat bankNumberFormat) {
        this.bankNumberFormat = bankNumberFormat;
    }

    public BankAccount accountCountryCode(String accountCountryCode) {
        this.accountCountryCode = accountCountryCode;
        return this;
    }

    /**
     * The two digit country code, in ISO 3166 format.
     *
     * @return accountCountryCode
     */
    @Schema(example = "US", required = true, description = "The two digit country code, in ISO 3166 format. ")
    public String getAccountCountryCode() {
        return accountCountryCode;
    }

    public void setAccountCountryCode(String accountCountryCode) {
        this.accountCountryCode = accountCountryCode;
    }

    public BankAccount accountCurrency(String accountCurrency) {
        this.accountCurrency = accountCurrency;
        return this;
    }

    /**
     * BankAccount currency code in ISO 4217 format
     *
     * @return accountCurrency
     */
    @Schema(example = "USD", required = true, description = "BankAccount currency code in ISO 4217 format ")
    public String getAccountCurrency() {
        return accountCurrency;
    }

    public void setAccountCurrency(String accountCurrency) {
        this.accountCurrency = accountCurrency;
    }

    public BankAccount bankAccountNumberTail(String bankAccountNumberTail) {
        this.bankAccountNumberTail = bankAccountNumberTail;
        return this;
    }

    /**
     * Last 3 digit of the bank account number, for all Amazon Seller Wallet account the value will be three consecutive
     * 0&#x27;s
     *
     * @return bankAccountNumberTail
     */
    @Schema(
            example = "666",
            required = true,
            description =
                    "Last 3 digit of the bank account number, for all Amazon Seller Wallet account the value will be three consecutive 0's ")
    public String getBankAccountNumberTail() {
        return bankAccountNumberTail;
    }

    public void setBankAccountNumberTail(String bankAccountNumberTail) {
        this.bankAccountNumberTail = bankAccountNumberTail;
    }

    public BankAccount bankAccountHolderStatus(BankAccountHolderStatus bankAccountHolderStatus) {
        this.bankAccountHolderStatus = bankAccountHolderStatus;
        return this;
    }

    /**
     * Get bankAccountHolderStatus
     *
     * @return bankAccountHolderStatus
     */
    @Schema(description = "")
    public BankAccountHolderStatus getBankAccountHolderStatus() {
        return bankAccountHolderStatus;
    }

    public void setBankAccountHolderStatus(BankAccountHolderStatus bankAccountHolderStatus) {
        this.bankAccountHolderStatus = bankAccountHolderStatus;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        BankAccount bankAccount = (BankAccount) o;
        return Objects.equals(this.accountId, bankAccount.accountId)
                && Objects.equals(this.accountHolderName, bankAccount.accountHolderName)
                && Objects.equals(this.bankAccountNumberFormat, bankAccount.bankAccountNumberFormat)
                && Objects.equals(this.bankName, bankAccount.bankName)
                && Objects.equals(this.bankAccountOwnershipType, bankAccount.bankAccountOwnershipType)
                && Objects.equals(this.routingNumber, bankAccount.routingNumber)
                && Objects.equals(this.bankNumberFormat, bankAccount.bankNumberFormat)
                && Objects.equals(this.accountCountryCode, bankAccount.accountCountryCode)
                && Objects.equals(this.accountCurrency, bankAccount.accountCurrency)
                && Objects.equals(this.bankAccountNumberTail, bankAccount.bankAccountNumberTail)
                && Objects.equals(this.bankAccountHolderStatus, bankAccount.bankAccountHolderStatus);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                accountId,
                accountHolderName,
                bankAccountNumberFormat,
                bankName,
                bankAccountOwnershipType,
                routingNumber,
                bankNumberFormat,
                accountCountryCode,
                accountCurrency,
                bankAccountNumberTail,
                bankAccountHolderStatus);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class BankAccount {\n");

        sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
        sb.append("    accountHolderName: ")
                .append(toIndentedString(accountHolderName))
                .append("\n");
        sb.append("    bankAccountNumberFormat: ")
                .append(toIndentedString(bankAccountNumberFormat))
                .append("\n");
        sb.append("    bankName: ").append(toIndentedString(bankName)).append("\n");
        sb.append("    bankAccountOwnershipType: ")
                .append(toIndentedString(bankAccountOwnershipType))
                .append("\n");
        sb.append("    routingNumber: ").append(toIndentedString(routingNumber)).append("\n");
        sb.append("    bankNumberFormat: ")
                .append(toIndentedString(bankNumberFormat))
                .append("\n");
        sb.append("    accountCountryCode: ")
                .append(toIndentedString(accountCountryCode))
                .append("\n");
        sb.append("    accountCurrency: ")
                .append(toIndentedString(accountCurrency))
                .append("\n");
        sb.append("    bankAccountNumberTail: ")
                .append(toIndentedString(bankAccountNumberTail))
                .append("\n");
        sb.append("    bankAccountHolderStatus: ")
                .append(toIndentedString(bankAccountHolderStatus))
                .append("\n");
        sb.append("}");
        return sb.toString();
    }

    /** Convert the given object to string with each line indented by 4 spaces (except the first line). */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }
}
