/*
 * The Selling Partner API for Amazon Seller Wallet Open Banking API
 * The Selling Partner API for Seller Wallet (Seller Wallet API) provides financial information that is relevant to a seller's Seller Wallet account. You can obtain financial events, balances, and transfer schedules for Seller Wallet accounts. You can also schedule and initiate transactions.
 *
 * OpenAPI spec version: 2024-03-01
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package software.amazon.spapi.models.sellerwallet.v2024_03_01;

import com.google.gson.annotations.SerializedName;
import io.swagger.v3.oas.annotations.media.Schema;
import java.time.OffsetDateTime;
import java.util.Objects;

/** The current transaction status and related historical details. */
@Schema(description = "The current transaction status and related historical details.")
public class Transaction {
    @SerializedName("transactionId")
    private String transactionId = null;

    @SerializedName("transactionType")
    private TransactionType transactionType = null;

    @SerializedName("transactionStatus")
    private TransactionStatus transactionStatus = null;

    @SerializedName("transactionRequestDate")
    private OffsetDateTime transactionRequestDate = null;

    @SerializedName("expectedCompletionDate")
    private OffsetDateTime expectedCompletionDate = null;

    @SerializedName("transactionActualCompletionDate")
    private OffsetDateTime transactionActualCompletionDate = null;

    @SerializedName("lastUpdateDate")
    private OffsetDateTime lastUpdateDate = null;

    @SerializedName("requesterName")
    private String requesterName = null;

    @SerializedName("transactionRequesterSource")
    private String transactionRequesterSource = null;

    @SerializedName("transactionDescription")
    private String transactionDescription = null;

    @SerializedName("transactionSourceAccount")
    private TransactionAccount transactionSourceAccount = null;

    @SerializedName("transactionDestinationAccount")
    private TransactionAccount transactionDestinationAccount = null;

    @SerializedName("transactionRequestAmount")
    private Currency transactionRequestAmount = null;

    @SerializedName("transferRateDetails")
    private TransferRatePreview transferRateDetails = null;

    @SerializedName("transactionFinalAmount")
    private Currency transactionFinalAmount = null;

    @SerializedName("transactionFailureReason")
    private String transactionFailureReason = null;

    public Transaction transactionId(String transactionId) {
        this.transactionId = transactionId;
        return this;
    }

    /**
     * The unique identifier provided by Amazon to the transaction
     *
     * @return transactionId
     */
    @Schema(required = true, description = "The unique identifier provided by Amazon to the transaction ")
    public String getTransactionId() {
        return transactionId;
    }

    public void setTransactionId(String transactionId) {
        this.transactionId = transactionId;
    }

    public Transaction transactionType(TransactionType transactionType) {
        this.transactionType = transactionType;
        return this;
    }

    /**
     * Get transactionType
     *
     * @return transactionType
     */
    @Schema(required = true, description = "")
    public TransactionType getTransactionType() {
        return transactionType;
    }

    public void setTransactionType(TransactionType transactionType) {
        this.transactionType = transactionType;
    }

    public Transaction transactionStatus(TransactionStatus transactionStatus) {
        this.transactionStatus = transactionStatus;
        return this;
    }

    /**
     * Get transactionStatus
     *
     * @return transactionStatus
     */
    @Schema(required = true, description = "")
    public TransactionStatus getTransactionStatus() {
        return transactionStatus;
    }

    public void setTransactionStatus(TransactionStatus transactionStatus) {
        this.transactionStatus = transactionStatus;
    }

    public Transaction transactionRequestDate(OffsetDateTime transactionRequestDate) {
        this.transactionRequestDate = transactionRequestDate;
        return this;
    }

    /**
     * The date when the transaction was initiated.
     *
     * @return transactionRequestDate
     */
    @Schema(required = true, description = "The date when the transaction was initiated.")
    public OffsetDateTime getTransactionRequestDate() {
        return transactionRequestDate;
    }

    public void setTransactionRequestDate(OffsetDateTime transactionRequestDate) {
        this.transactionRequestDate = transactionRequestDate;
    }

    public Transaction expectedCompletionDate(OffsetDateTime expectedCompletionDate) {
        this.expectedCompletionDate = expectedCompletionDate;
        return this;
    }

    /**
     * Expected completion date of a transaction, for existing active Payees (Trusted Beneficiaries) it will be 24 hours
     * but for new destination bank accounts the value could go up to 5 days
     *
     * @return expectedCompletionDate
     */
    @Schema(
            example = "2023-09-26T02:32:59.787Z",
            description =
                    "Expected completion date of a transaction, for existing active Payees (Trusted Beneficiaries) it will be 24 hours but for new destination bank accounts the value could go up to 5 days ")
    public OffsetDateTime getExpectedCompletionDate() {
        return expectedCompletionDate;
    }

    public void setExpectedCompletionDate(OffsetDateTime expectedCompletionDate) {
        this.expectedCompletionDate = expectedCompletionDate;
    }

    public Transaction transactionActualCompletionDate(OffsetDateTime transactionActualCompletionDate) {
        this.transactionActualCompletionDate = transactionActualCompletionDate;
        return this;
    }

    /**
     * Transaction completion date
     *
     * @return transactionActualCompletionDate
     */
    @Schema(description = "Transaction completion date ")
    public OffsetDateTime getTransactionActualCompletionDate() {
        return transactionActualCompletionDate;
    }

    public void setTransactionActualCompletionDate(OffsetDateTime transactionActualCompletionDate) {
        this.transactionActualCompletionDate = transactionActualCompletionDate;
    }

    public Transaction lastUpdateDate(OffsetDateTime lastUpdateDate) {
        this.lastUpdateDate = lastUpdateDate;
        return this;
    }

    /**
     * The last update date on the transaction
     *
     * @return lastUpdateDate
     */
    @Schema(required = true, description = "The last update date on the transaction ")
    public OffsetDateTime getLastUpdateDate() {
        return lastUpdateDate;
    }

    public void setLastUpdateDate(OffsetDateTime lastUpdateDate) {
        this.lastUpdateDate = lastUpdateDate;
    }

    public Transaction requesterName(String requesterName) {
        this.requesterName = requesterName;
        return this;
    }

    /**
     * Amazon SW customer who requested the transaction
     *
     * @return requesterName
     */
    @Schema(example = "TPPOrgId", description = "Amazon SW customer who requested the transaction ")
    public String getRequesterName() {
        return requesterName;
    }

    public void setRequesterName(String requesterName) {
        this.requesterName = requesterName;
    }

    public Transaction transactionRequesterSource(String transactionRequesterSource) {
        this.transactionRequesterSource = transactionRequesterSource;
        return this;
    }

    /**
     * The transaction initiation source. This value is either the Amazon portal or PISP name that the customer used to
     * start the transaction.
     *
     * @return transactionRequesterSource
     */
    @Schema(
            required = true,
            description =
                    "The transaction initiation source. This value is either the Amazon portal or PISP name that the customer used to start the transaction.")
    public String getTransactionRequesterSource() {
        return transactionRequesterSource;
    }

    public void setTransactionRequesterSource(String transactionRequesterSource) {
        this.transactionRequesterSource = transactionRequesterSource;
    }

    public Transaction transactionDescription(String transactionDescription) {
        this.transactionDescription = transactionDescription;
        return this;
    }

    /**
     * A description of the transaction that the requester provides when they initiate the transaction.
     *
     * @return transactionDescription
     */
    @Schema(
            required = true,
            description =
                    "A description of the transaction that the requester provides when they initiate the transaction.")
    public String getTransactionDescription() {
        return transactionDescription;
    }

    public void setTransactionDescription(String transactionDescription) {
        this.transactionDescription = transactionDescription;
    }

    public Transaction transactionSourceAccount(TransactionAccount transactionSourceAccount) {
        this.transactionSourceAccount = transactionSourceAccount;
        return this;
    }

    /**
     * Get transactionSourceAccount
     *
     * @return transactionSourceAccount
     */
    @Schema(required = true, description = "")
    public TransactionAccount getTransactionSourceAccount() {
        return transactionSourceAccount;
    }

    public void setTransactionSourceAccount(TransactionAccount transactionSourceAccount) {
        this.transactionSourceAccount = transactionSourceAccount;
    }

    public Transaction transactionDestinationAccount(TransactionAccount transactionDestinationAccount) {
        this.transactionDestinationAccount = transactionDestinationAccount;
        return this;
    }

    /**
     * Get transactionDestinationAccount
     *
     * @return transactionDestinationAccount
     */
    @Schema(required = true, description = "")
    public TransactionAccount getTransactionDestinationAccount() {
        return transactionDestinationAccount;
    }

    public void setTransactionDestinationAccount(TransactionAccount transactionDestinationAccount) {
        this.transactionDestinationAccount = transactionDestinationAccount;
    }

    public Transaction transactionRequestAmount(Currency transactionRequestAmount) {
        this.transactionRequestAmount = transactionRequestAmount;
        return this;
    }

    /**
     * Get transactionRequestAmount
     *
     * @return transactionRequestAmount
     */
    @Schema(required = true, description = "")
    public Currency getTransactionRequestAmount() {
        return transactionRequestAmount;
    }

    public void setTransactionRequestAmount(Currency transactionRequestAmount) {
        this.transactionRequestAmount = transactionRequestAmount;
    }

    public Transaction transferRateDetails(TransferRatePreview transferRateDetails) {
        this.transferRateDetails = transferRateDetails;
        return this;
    }

    /**
     * Get transferRateDetails
     *
     * @return transferRateDetails
     */
    @Schema(required = true, description = "")
    public TransferRatePreview getTransferRateDetails() {
        return transferRateDetails;
    }

    public void setTransferRateDetails(TransferRatePreview transferRateDetails) {
        this.transferRateDetails = transferRateDetails;
    }

    public Transaction transactionFinalAmount(Currency transactionFinalAmount) {
        this.transactionFinalAmount = transactionFinalAmount;
        return this;
    }

    /**
     * Get transactionFinalAmount
     *
     * @return transactionFinalAmount
     */
    @Schema(description = "")
    public Currency getTransactionFinalAmount() {
        return transactionFinalAmount;
    }

    public void setTransactionFinalAmount(Currency transactionFinalAmount) {
        this.transactionFinalAmount = transactionFinalAmount;
    }

    public Transaction transactionFailureReason(String transactionFailureReason) {
        this.transactionFailureReason = transactionFailureReason;
        return this;
    }

    /**
     * Description in case the transaction fails before completion
     *
     * @return transactionFailureReason
     */
    @Schema(
            example = "Insufficient Balance",
            description = "Description in case the transaction fails before completion ")
    public String getTransactionFailureReason() {
        return transactionFailureReason;
    }

    public void setTransactionFailureReason(String transactionFailureReason) {
        this.transactionFailureReason = transactionFailureReason;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Transaction transaction = (Transaction) o;
        return Objects.equals(this.transactionId, transaction.transactionId)
                && Objects.equals(this.transactionType, transaction.transactionType)
                && Objects.equals(this.transactionStatus, transaction.transactionStatus)
                && Objects.equals(this.transactionRequestDate, transaction.transactionRequestDate)
                && Objects.equals(this.expectedCompletionDate, transaction.expectedCompletionDate)
                && Objects.equals(this.transactionActualCompletionDate, transaction.transactionActualCompletionDate)
                && Objects.equals(this.lastUpdateDate, transaction.lastUpdateDate)
                && Objects.equals(this.requesterName, transaction.requesterName)
                && Objects.equals(this.transactionRequesterSource, transaction.transactionRequesterSource)
                && Objects.equals(this.transactionDescription, transaction.transactionDescription)
                && Objects.equals(this.transactionSourceAccount, transaction.transactionSourceAccount)
                && Objects.equals(this.transactionDestinationAccount, transaction.transactionDestinationAccount)
                && Objects.equals(this.transactionRequestAmount, transaction.transactionRequestAmount)
                && Objects.equals(this.transferRateDetails, transaction.transferRateDetails)
                && Objects.equals(this.transactionFinalAmount, transaction.transactionFinalAmount)
                && Objects.equals(this.transactionFailureReason, transaction.transactionFailureReason);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                transactionId,
                transactionType,
                transactionStatus,
                transactionRequestDate,
                expectedCompletionDate,
                transactionActualCompletionDate,
                lastUpdateDate,
                requesterName,
                transactionRequesterSource,
                transactionDescription,
                transactionSourceAccount,
                transactionDestinationAccount,
                transactionRequestAmount,
                transferRateDetails,
                transactionFinalAmount,
                transactionFailureReason);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class Transaction {\n");

        sb.append("    transactionId: ").append(toIndentedString(transactionId)).append("\n");
        sb.append("    transactionType: ")
                .append(toIndentedString(transactionType))
                .append("\n");
        sb.append("    transactionStatus: ")
                .append(toIndentedString(transactionStatus))
                .append("\n");
        sb.append("    transactionRequestDate: ")
                .append(toIndentedString(transactionRequestDate))
                .append("\n");
        sb.append("    expectedCompletionDate: ")
                .append(toIndentedString(expectedCompletionDate))
                .append("\n");
        sb.append("    transactionActualCompletionDate: ")
                .append(toIndentedString(transactionActualCompletionDate))
                .append("\n");
        sb.append("    lastUpdateDate: ")
                .append(toIndentedString(lastUpdateDate))
                .append("\n");
        sb.append("    requesterName: ").append(toIndentedString(requesterName)).append("\n");
        sb.append("    transactionRequesterSource: ")
                .append(toIndentedString(transactionRequesterSource))
                .append("\n");
        sb.append("    transactionDescription: ")
                .append(toIndentedString(transactionDescription))
                .append("\n");
        sb.append("    transactionSourceAccount: ")
                .append(toIndentedString(transactionSourceAccount))
                .append("\n");
        sb.append("    transactionDestinationAccount: ")
                .append(toIndentedString(transactionDestinationAccount))
                .append("\n");
        sb.append("    transactionRequestAmount: ")
                .append(toIndentedString(transactionRequestAmount))
                .append("\n");
        sb.append("    transferRateDetails: ")
                .append(toIndentedString(transferRateDetails))
                .append("\n");
        sb.append("    transactionFinalAmount: ")
                .append(toIndentedString(transactionFinalAmount))
                .append("\n");
        sb.append("    transactionFailureReason: ")
                .append(toIndentedString(transactionFailureReason))
                .append("\n");
        sb.append("}");
        return sb.toString();
    }

    /** Convert the given object to string with each line indented by 4 spaces (except the first line). */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }
}
