/*
 * The Selling Partner API for Amazon Seller Wallet Open Banking API
 * The Selling Partner API for Seller Wallet (Seller Wallet API) provides financial information that is relevant to a seller's Seller Wallet account. You can obtain financial events, balances, and transfer schedules for Seller Wallet accounts. You can also schedule and initiate transactions.
 *
 * OpenAPI spec version: 2024-03-01
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package software.amazon.spapi.models.sellerwallet.v2024_03_01;

import com.google.gson.annotations.SerializedName;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.Objects;

/** Response returned when the schedule transfer&#x27;s delete request is successful. */
@Schema(description = "Response returned when the schedule transfer's delete request is successful.")
public class DeleteTransferSchedule {
    @SerializedName("code")
    private String code = null;

    @SerializedName("message")
    private String message = null;

    @SerializedName("details")
    private String details = null;

    public DeleteTransferSchedule code(String code) {
        this.code = code;
        return this;
    }

    /**
     * A success code that specifies the delete operation was successful. eg:HTTP 200.
     *
     * @return code
     */
    @Schema(
            required = true,
            description = "A success code that specifies the delete operation was successful. eg:HTTP 200.")
    public String getCode() {
        return code;
    }

    public void setCode(String code) {
        this.code = code;
    }

    public DeleteTransferSchedule message(String message) {
        this.message = message;
        return this;
    }

    /**
     * A message that describes the success condition of the delete schedule transaction.
     *
     * @return message
     */
    @Schema(
            required = true,
            description = "A message that describes the success condition of the delete schedule transaction.")
    public String getMessage() {
        return message;
    }

    public void setMessage(String message) {
        this.message = message;
    }

    public DeleteTransferSchedule details(String details) {
        this.details = details;
        return this;
    }

    /**
     * Additional details that can help the caller understand the operation execution.
     *
     * @return details
     */
    @Schema(description = "Additional details that can help the caller understand the operation execution.")
    public String getDetails() {
        return details;
    }

    public void setDetails(String details) {
        this.details = details;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DeleteTransferSchedule deleteTransferSchedule = (DeleteTransferSchedule) o;
        return Objects.equals(this.code, deleteTransferSchedule.code)
                && Objects.equals(this.message, deleteTransferSchedule.message)
                && Objects.equals(this.details, deleteTransferSchedule.details);
    }

    @Override
    public int hashCode() {
        return Objects.hash(code, message, details);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class DeleteTransferSchedule {\n");

        sb.append("    code: ").append(toIndentedString(code)).append("\n");
        sb.append("    message: ").append(toIndentedString(message)).append("\n");
        sb.append("    details: ").append(toIndentedString(details)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /** Convert the given object to string with each line indented by 4 spaces (except the first line). */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }
}
