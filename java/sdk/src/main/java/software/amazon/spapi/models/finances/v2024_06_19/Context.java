/*
 * The Selling Partner API for Finances
 * The Selling Partner API for Finances helps you obtain financial information relevant to a seller's business. You can obtain financial events for a given order or date range without having to wait until a statement period closes.
 *
 * OpenAPI spec version: 2024-06-19
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package software.amazon.spapi.models.finances.v2024_06_19;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Objects;

/** Additional Information about the item. */
@Schema(description = "Additional Information about the item.")
public class Context {
    @SerializedName("contextType")
    private String contextType = null;

    /** The store name associated with the transaction. */
    @JsonAdapter(StoreNameEnum.Adapter.class)
    public enum StoreNameEnum {
        @SerializedName("AMAZON_HAUL")
        AMAZON_HAUL("AMAZON_HAUL");

        private String value;

        StoreNameEnum(String value) {
            this.value = value;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static StoreNameEnum fromValue(String input) {
            for (StoreNameEnum b : StoreNameEnum.values()) {
                if (b.value.equals(input)) {
                    return b;
                }
            }
            return null;
        }

        public static class Adapter extends TypeAdapter<StoreNameEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final StoreNameEnum enumeration) throws IOException {
                jsonWriter.value(String.valueOf(enumeration.getValue()));
            }

            @Override
            public StoreNameEnum read(final JsonReader jsonReader) throws IOException {
                Object value = jsonReader.nextString();
                return StoreNameEnum.fromValue((String) (value));
            }
        }
    }

    @SerializedName("storeName")
    private StoreNameEnum storeName = null;

    @SerializedName("orderType")
    private String orderType = null;

    @SerializedName("channel")
    private String channel = null;

    @SerializedName("asin")
    private String asin = null;

    @SerializedName("sku")
    private String sku = null;

    @SerializedName("quantityShipped")
    private Integer quantityShipped = null;

    @SerializedName("fulfillmentNetwork")
    private String fulfillmentNetwork = null;

    @SerializedName("paymentType")
    private String paymentType = null;

    @SerializedName("paymentMethod")
    private String paymentMethod = null;

    @SerializedName("paymentReference")
    private String paymentReference = null;

    @SerializedName("paymentDate")
    private OffsetDateTime paymentDate = null;

    @SerializedName("deferralReason")
    private String deferralReason = null;

    @SerializedName("maturityDate")
    private OffsetDateTime maturityDate = null;

    @SerializedName("startTime")
    private OffsetDateTime startTime = null;

    @SerializedName("endTime")
    private OffsetDateTime endTime = null;

    public Context contextType(String contextType) {
        this.contextType = contextType;
        return this;
    }

    /**
     * Get contextType
     *
     * @return contextType
     */
    @Schema(required = true, description = "")
    public String getContextType() {
        return contextType;
    }

    public void setContextType(String contextType) {
        this.contextType = contextType;
    }

    public Context storeName(StoreNameEnum storeName) {
        this.storeName = storeName;
        return this;
    }

    /**
     * The store name associated with the transaction.
     *
     * @return storeName
     */
    @Schema(description = "The store name associated with the transaction.")
    public StoreNameEnum getStoreName() {
        return storeName;
    }

    public void setStoreName(StoreNameEnum storeName) {
        this.storeName = storeName;
    }

    public Context orderType(String orderType) {
        this.orderType = orderType;
        return this;
    }

    /**
     * Order type of the transaction.
     *
     * @return orderType
     */
    @Schema(description = "Order type of the transaction.")
    public String getOrderType() {
        return orderType;
    }

    public void setOrderType(String orderType) {
        this.orderType = orderType;
    }

    public Context channel(String channel) {
        this.channel = channel;
        return this;
    }

    /**
     * Channel details of related transaction.
     *
     * @return channel
     */
    @Schema(description = "Channel details of related transaction.")
    public String getChannel() {
        return channel;
    }

    public void setChannel(String channel) {
        this.channel = channel;
    }

    public Context asin(String asin) {
        this.asin = asin;
        return this;
    }

    /**
     * Amazon Standard Identification Number (ASIN) of the item.
     *
     * @return asin
     */
    @Schema(description = "Amazon Standard Identification Number (ASIN) of the item.")
    public String getAsin() {
        return asin;
    }

    public void setAsin(String asin) {
        this.asin = asin;
    }

    public Context sku(String sku) {
        this.sku = sku;
        return this;
    }

    /**
     * Stock keeping unit (SKU) of the item.
     *
     * @return sku
     */
    @Schema(description = "Stock keeping unit (SKU) of the item.")
    public String getSku() {
        return sku;
    }

    public void setSku(String sku) {
        this.sku = sku;
    }

    public Context quantityShipped(Integer quantityShipped) {
        this.quantityShipped = quantityShipped;
        return this;
    }

    /**
     * Quantity of the item shipped.
     *
     * @return quantityShipped
     */
    @Schema(description = "Quantity of the item shipped.")
    public Integer getQuantityShipped() {
        return quantityShipped;
    }

    public void setQuantityShipped(Integer quantityShipped) {
        this.quantityShipped = quantityShipped;
    }

    public Context fulfillmentNetwork(String fulfillmentNetwork) {
        this.fulfillmentNetwork = fulfillmentNetwork;
        return this;
    }

    /**
     * Fulfillment network of the item.
     *
     * @return fulfillmentNetwork
     */
    @Schema(description = "Fulfillment network of the item.")
    public String getFulfillmentNetwork() {
        return fulfillmentNetwork;
    }

    public void setFulfillmentNetwork(String fulfillmentNetwork) {
        this.fulfillmentNetwork = fulfillmentNetwork;
    }

    public Context paymentType(String paymentType) {
        this.paymentType = paymentType;
        return this;
    }

    /**
     * Type of payment made.
     *
     * @return paymentType
     */
    @Schema(description = "Type of payment made.")
    public String getPaymentType() {
        return paymentType;
    }

    public void setPaymentType(String paymentType) {
        this.paymentType = paymentType;
    }

    public Context paymentMethod(String paymentMethod) {
        this.paymentMethod = paymentMethod;
        return this;
    }

    /**
     * Method of payment made.
     *
     * @return paymentMethod
     */
    @Schema(description = "Method of payment made.")
    public String getPaymentMethod() {
        return paymentMethod;
    }

    public void setPaymentMethod(String paymentMethod) {
        this.paymentMethod = paymentMethod;
    }

    public Context paymentReference(String paymentReference) {
        this.paymentReference = paymentReference;
        return this;
    }

    /**
     * Reference number of payment made.
     *
     * @return paymentReference
     */
    @Schema(description = "Reference number of payment made.")
    public String getPaymentReference() {
        return paymentReference;
    }

    public void setPaymentReference(String paymentReference) {
        this.paymentReference = paymentReference;
    }

    public Context paymentDate(OffsetDateTime paymentDate) {
        this.paymentDate = paymentDate;
        return this;
    }

    /**
     * Get paymentDate
     *
     * @return paymentDate
     */
    @Schema(description = "")
    public OffsetDateTime getPaymentDate() {
        return paymentDate;
    }

    public void setPaymentDate(OffsetDateTime paymentDate) {
        this.paymentDate = paymentDate;
    }

    public Context deferralReason(String deferralReason) {
        this.deferralReason = deferralReason;
        return this;
    }

    /**
     * The deferral policy applied to the transaction. **Examples:** &#x60;B2B&#x60; (invoiced orders), &#x60;DD7&#x60;
     * (delivery date policy)
     *
     * @return deferralReason
     */
    @Schema(
            description =
                    "The deferral policy applied to the transaction.  **Examples:** `B2B` (invoiced orders), `DD7` (delivery date policy)")
    public String getDeferralReason() {
        return deferralReason;
    }

    public void setDeferralReason(String deferralReason) {
        this.deferralReason = deferralReason;
    }

    public Context maturityDate(OffsetDateTime maturityDate) {
        this.maturityDate = maturityDate;
        return this;
    }

    /**
     * Get maturityDate
     *
     * @return maturityDate
     */
    @Schema(description = "")
    public OffsetDateTime getMaturityDate() {
        return maturityDate;
    }

    public void setMaturityDate(OffsetDateTime maturityDate) {
        this.maturityDate = maturityDate;
    }

    public Context startTime(OffsetDateTime startTime) {
        this.startTime = startTime;
        return this;
    }

    /**
     * Get startTime
     *
     * @return startTime
     */
    @Schema(description = "")
    public OffsetDateTime getStartTime() {
        return startTime;
    }

    public void setStartTime(OffsetDateTime startTime) {
        this.startTime = startTime;
    }

    public Context endTime(OffsetDateTime endTime) {
        this.endTime = endTime;
        return this;
    }

    /**
     * Get endTime
     *
     * @return endTime
     */
    @Schema(description = "")
    public OffsetDateTime getEndTime() {
        return endTime;
    }

    public void setEndTime(OffsetDateTime endTime) {
        this.endTime = endTime;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Context context = (Context) o;
        return Objects.equals(this.contextType, context.contextType)
                && Objects.equals(this.storeName, context.storeName)
                && Objects.equals(this.orderType, context.orderType)
                && Objects.equals(this.channel, context.channel)
                && Objects.equals(this.asin, context.asin)
                && Objects.equals(this.sku, context.sku)
                && Objects.equals(this.quantityShipped, context.quantityShipped)
                && Objects.equals(this.fulfillmentNetwork, context.fulfillmentNetwork)
                && Objects.equals(this.paymentType, context.paymentType)
                && Objects.equals(this.paymentMethod, context.paymentMethod)
                && Objects.equals(this.paymentReference, context.paymentReference)
                && Objects.equals(this.paymentDate, context.paymentDate)
                && Objects.equals(this.deferralReason, context.deferralReason)
                && Objects.equals(this.maturityDate, context.maturityDate)
                && Objects.equals(this.startTime, context.startTime)
                && Objects.equals(this.endTime, context.endTime);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                contextType,
                storeName,
                orderType,
                channel,
                asin,
                sku,
                quantityShipped,
                fulfillmentNetwork,
                paymentType,
                paymentMethod,
                paymentReference,
                paymentDate,
                deferralReason,
                maturityDate,
                startTime,
                endTime);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class Context {\n");

        sb.append("    contextType: ").append(toIndentedString(contextType)).append("\n");
        sb.append("    storeName: ").append(toIndentedString(storeName)).append("\n");
        sb.append("    orderType: ").append(toIndentedString(orderType)).append("\n");
        sb.append("    channel: ").append(toIndentedString(channel)).append("\n");
        sb.append("    asin: ").append(toIndentedString(asin)).append("\n");
        sb.append("    sku: ").append(toIndentedString(sku)).append("\n");
        sb.append("    quantityShipped: ")
                .append(toIndentedString(quantityShipped))
                .append("\n");
        sb.append("    fulfillmentNetwork: ")
                .append(toIndentedString(fulfillmentNetwork))
                .append("\n");
        sb.append("    paymentType: ").append(toIndentedString(paymentType)).append("\n");
        sb.append("    paymentMethod: ").append(toIndentedString(paymentMethod)).append("\n");
        sb.append("    paymentReference: ")
                .append(toIndentedString(paymentReference))
                .append("\n");
        sb.append("    paymentDate: ").append(toIndentedString(paymentDate)).append("\n");
        sb.append("    deferralReason: ")
                .append(toIndentedString(deferralReason))
                .append("\n");
        sb.append("    maturityDate: ").append(toIndentedString(maturityDate)).append("\n");
        sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
        sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /** Convert the given object to string with each line indented by 4 spaces (except the first line). */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }
}
