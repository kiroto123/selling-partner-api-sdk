/*
 * The Selling Partner API for Amazon Seller Wallet Open Banking API
 * The Selling Partner API for Seller Wallet (Seller Wallet API) provides financial information that is relevant to a seller's Seller Wallet account. You can obtain financial events, balances, and transfer schedules for Seller Wallet accounts. You can also schedule and initiate transactions.
 *
 * OpenAPI spec version: 2024-03-01
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package software.amazon.spapi.models.sellerwallet.v2024_03_01;

import com.google.gson.annotations.SerializedName;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.Objects;

/**
 * Request body to create transaction instrument, Amazon performs validation and screening (anti-money laundering
 * measuers) on all the transaction instruments before executing a transaction thus it requires transaction instrument
 * holder&#x27;s contact details as well
 */
@Schema(
        description =
                "Request body to create transaction instrument, Amazon performs validation and screening (anti-money laundering measuers) on all the transaction instruments before executing a transaction thus it requires transaction instrument holder's contact details as well ")
public class TransactionInstrumentDetails {
    @SerializedName("bankAccount")
    private BankAccount bankAccount = null;

    @SerializedName("bankAccountNumber")
    private String bankAccountNumber = null;

    public TransactionInstrumentDetails bankAccount(BankAccount bankAccount) {
        this.bankAccount = bankAccount;
        return this;
    }

    /**
     * Get bankAccount
     *
     * @return bankAccount
     */
    @Schema(required = true, description = "")
    public BankAccount getBankAccount() {
        return bankAccount;
    }

    public void setBankAccount(BankAccount bankAccount) {
        this.bankAccount = bankAccount;
    }

    public TransactionInstrumentDetails bankAccountNumber(String bankAccountNumber) {
        this.bankAccountNumber = bankAccountNumber;
        return this;
    }

    /**
     * This field would be used to populate the bank account number of the destination payment method. The field is
     * intentionally not included in any other Schemas since Amazon internal systems will never receive it in
     * unencrypted format, so field won&#x27;t be part of the request signature
     *
     * @return bankAccountNumber
     */
    @Schema(
            example = "GB29RBOS60161331926819",
            required = true,
            description =
                    "This field would be used to populate the bank account number of the destination payment method. The field is intentionally not included in any other Schemas since Amazon internal systems will never receive it in unencrypted format, so field won't be part of the request signature ")
    public String getBankAccountNumber() {
        return bankAccountNumber;
    }

    public void setBankAccountNumber(String bankAccountNumber) {
        this.bankAccountNumber = bankAccountNumber;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TransactionInstrumentDetails transactionInstrumentDetails = (TransactionInstrumentDetails) o;
        return Objects.equals(this.bankAccount, transactionInstrumentDetails.bankAccount)
                && Objects.equals(this.bankAccountNumber, transactionInstrumentDetails.bankAccountNumber);
    }

    @Override
    public int hashCode() {
        return Objects.hash(bankAccount, bankAccountNumber);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class TransactionInstrumentDetails {\n");

        sb.append("    bankAccount: ").append(toIndentedString(bankAccount)).append("\n");
        sb.append("    bankAccountNumber: ")
                .append(toIndentedString(bankAccountNumber))
                .append("\n");
        sb.append("}");
        return sb.toString();
    }

    /** Convert the given object to string with each line indented by 4 spaces (except the first line). */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }
}
