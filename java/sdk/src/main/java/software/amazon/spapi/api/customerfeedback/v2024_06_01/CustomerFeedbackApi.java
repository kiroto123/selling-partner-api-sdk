/*
 * The Selling Partner API for CustomerFeedback
 * The Selling Partner API for Customer Feedback (Customer Feedback API) provides information about customer reviews and returns at both the item and browse node level.
 *
 * OpenAPI spec version: 2024-06-01
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package software.amazon.spapi.api.customerfeedback.v2024_06_01;

import com.amazon.SellingPartnerAPIAA.LWAAccessTokenCache;
import com.amazon.SellingPartnerAPIAA.LWAAccessTokenCacheImpl;
import com.amazon.SellingPartnerAPIAA.LWAAuthorizationCredentials;
import com.amazon.SellingPartnerAPIAA.LWAAuthorizationSigner;
import com.amazon.SellingPartnerAPIAA.LWAException;
import com.amazon.SellingPartnerAPIAA.RestrictedDataTokenSigner;
import com.google.gson.reflect.TypeToken;
import io.github.bucket4j.Bucket;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import software.amazon.spapi.ApiCallback;
import software.amazon.spapi.ApiClient;
import software.amazon.spapi.ApiException;
import software.amazon.spapi.ApiResponse;
import software.amazon.spapi.Configuration;
import software.amazon.spapi.Pair;
import software.amazon.spapi.ProgressRequestBody;
import software.amazon.spapi.StringUtil;
import software.amazon.spapi.models.customerfeedback.v2024_06_01.BrowseNodeResponse;
import software.amazon.spapi.models.customerfeedback.v2024_06_01.BrowseNodeReturnTopicsResponse;
import software.amazon.spapi.models.customerfeedback.v2024_06_01.BrowseNodeReturnTrendsResponse;
import software.amazon.spapi.models.customerfeedback.v2024_06_01.BrowseNodeReviewTopicsResponse;
import software.amazon.spapi.models.customerfeedback.v2024_06_01.BrowseNodeReviewTrendsResponse;
import software.amazon.spapi.models.customerfeedback.v2024_06_01.ItemReviewTopicsResponse;
import software.amazon.spapi.models.customerfeedback.v2024_06_01.ItemReviewTrendsResponse;

public class CustomerFeedbackApi {
    private ApiClient apiClient;
    private Boolean disableRateLimiting;

    public CustomerFeedbackApi(ApiClient apiClient, Boolean disableRateLimiting) {
        this.apiClient = apiClient;
        this.disableRateLimiting = disableRateLimiting;
    }

    private final Configuration config = Configuration.get();

    public final Bucket getBrowseNodeReturnTopicsBucket = Bucket.builder()
            .addLimit(config.getLimit("CustomerFeedbackApi-getBrowseNodeReturnTopics"))
            .build();

    public final Bucket getBrowseNodeReturnTrendsBucket = Bucket.builder()
            .addLimit(config.getLimit("CustomerFeedbackApi-getBrowseNodeReturnTrends"))
            .build();

    public final Bucket getBrowseNodeReviewTopicsBucket = Bucket.builder()
            .addLimit(config.getLimit("CustomerFeedbackApi-getBrowseNodeReviewTopics"))
            .build();

    public final Bucket getBrowseNodeReviewTrendsBucket = Bucket.builder()
            .addLimit(config.getLimit("CustomerFeedbackApi-getBrowseNodeReviewTrends"))
            .build();

    public final Bucket getItemBrowseNodeBucket = Bucket.builder()
            .addLimit(config.getLimit("CustomerFeedbackApi-getItemBrowseNode"))
            .build();

    public final Bucket getItemReviewTopicsBucket = Bucket.builder()
            .addLimit(config.getLimit("CustomerFeedbackApi-getItemReviewTopics"))
            .build();

    public final Bucket getItemReviewTrendsBucket = Bucket.builder()
            .addLimit(config.getLimit("CustomerFeedbackApi-getItemReviewTrends"))
            .build();

    /**
     * Build call for getBrowseNodeReturnTopics
     *
     * @param browseNodeId A browse node ID is a unique identifier for a browse node. A browse node is a named location
     *     in a browse tree that is used for navigation, product classification, and website content. (required)
     * @param marketplaceId The MarketplaceId is the globally unique identifier of a marketplace, you can refer to the
     *     marketplaceId here : https://developer-docs.amazon.com/sp-api/docs/marketplace-ids. (required)
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    private okhttp3.Call getBrowseNodeReturnTopicsCall(
            String browseNodeId,
            String marketplaceId,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/customerFeedback/2024-06-01/browseNodes/{browseNodeId}/returns/topics"
                .replaceAll("\\{" + "browseNodeId" + "\\}", apiClient.escapeString(browseNodeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (marketplaceId != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("marketplaceId", marketplaceId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {};

        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        return apiClient.buildCall(
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                progressRequestListener);
    }

    private okhttp3.Call getBrowseNodeReturnTopicsValidateBeforeCall(
            String browseNodeId,
            String marketplaceId,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        // verify the required parameter 'browseNodeId' is set
        if (browseNodeId == null) {
            throw new ApiException(
                    "Missing the required parameter 'browseNodeId' when calling getBrowseNodeReturnTopics(Async)");
        }
        // verify the required parameter 'marketplaceId' is set
        if (marketplaceId == null) {
            throw new ApiException(
                    "Missing the required parameter 'marketplaceId' when calling getBrowseNodeReturnTopics(Async)");
        }

        return getBrowseNodeReturnTopicsCall(browseNodeId, marketplaceId, progressRequestListener);
    }

    /**
     * Retrieve the topics that customers mention when they return items in a browse node.
     *
     * @param browseNodeId A browse node ID is a unique identifier for a browse node. A browse node is a named location
     *     in a browse tree that is used for navigation, product classification, and website content. (required)
     * @param marketplaceId The MarketplaceId is the globally unique identifier of a marketplace, you can refer to the
     *     marketplaceId here : https://developer-docs.amazon.com/sp-api/docs/marketplace-ids. (required)
     * @param restrictedDataToken Restricted Data Token (optional)
     * @return BrowseNodeReturnTopicsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public BrowseNodeReturnTopicsResponse getBrowseNodeReturnTopics(
            String browseNodeId, String marketplaceId, String restrictedDataToken) throws ApiException, LWAException {
        ApiResponse<BrowseNodeReturnTopicsResponse> resp =
                getBrowseNodeReturnTopicsWithHttpInfo(browseNodeId, marketplaceId, restrictedDataToken);
        return resp.getData();
    }

    /**
     * Retrieve the topics that customers mention when they return items in a browse node.
     *
     * @param browseNodeId A browse node ID is a unique identifier for a browse node. A browse node is a named location
     *     in a browse tree that is used for navigation, product classification, and website content. (required)
     * @param marketplaceId The MarketplaceId is the globally unique identifier of a marketplace, you can refer to the
     *     marketplaceId here : https://developer-docs.amazon.com/sp-api/docs/marketplace-ids. (required)
     * @return BrowseNodeReturnTopicsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public BrowseNodeReturnTopicsResponse getBrowseNodeReturnTopics(String browseNodeId, String marketplaceId)
            throws ApiException, LWAException {
        ApiResponse<BrowseNodeReturnTopicsResponse> resp =
                getBrowseNodeReturnTopicsWithHttpInfo(browseNodeId, marketplaceId, null);
        return resp.getData();
    }

    /**
     * Retrieve the topics that customers mention when they return items in a browse node.
     *
     * @param browseNodeId A browse node ID is a unique identifier for a browse node. A browse node is a named location
     *     in a browse tree that is used for navigation, product classification, and website content. (required)
     * @param marketplaceId The MarketplaceId is the globally unique identifier of a marketplace, you can refer to the
     *     marketplaceId here : https://developer-docs.amazon.com/sp-api/docs/marketplace-ids. (required)
     * @param restrictedDataToken Restricted Data Token (optional)
     * @return ApiResponse&lt;BrowseNodeReturnTopicsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<BrowseNodeReturnTopicsResponse> getBrowseNodeReturnTopicsWithHttpInfo(
            String browseNodeId, String marketplaceId, String restrictedDataToken) throws ApiException, LWAException {
        okhttp3.Call call = getBrowseNodeReturnTopicsValidateBeforeCall(browseNodeId, marketplaceId, null);

        if (restrictedDataToken != null) {
            okhttp3.Request request = call.request();
            request = RestrictedDataTokenSigner.sign(
                    request, restrictedDataToken, "CustomerFeedbackApi-getBrowseNodeReturnTopics");
            call = apiClient.getHttpClient().newCall(request);
        }

        if (disableRateLimiting || getBrowseNodeReturnTopicsBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<BrowseNodeReturnTopicsResponse>() {}.getType();
            return apiClient.execute(call, localVarReturnType);
        } else throw new ApiException.RateLimitExceeded("getBrowseNodeReturnTopics operation exceeds rate limit");
    }

    /**
     * Retrieve the topics that customers mention when they return items in a browse node.
     *
     * @param browseNodeId A browse node ID is a unique identifier for a browse node. A browse node is a named location
     *     in a browse tree that is used for navigation, product classification, and website content. (required)
     * @param marketplaceId The MarketplaceId is the globally unique identifier of a marketplace, you can refer to the
     *     marketplaceId here : https://developer-docs.amazon.com/sp-api/docs/marketplace-ids. (required)
     * @return ApiResponse&lt;BrowseNodeReturnTopicsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<BrowseNodeReturnTopicsResponse> getBrowseNodeReturnTopicsWithHttpInfo(
            String browseNodeId, String marketplaceId) throws ApiException, LWAException {
        return getBrowseNodeReturnTopicsWithHttpInfo(browseNodeId, marketplaceId, null);
    }

    /**
     * (asynchronously) Retrieve the topics that customers mention when they return items in a browse node.
     *
     * @param browseNodeId A browse node ID is a unique identifier for a browse node. A browse node is a named location
     *     in a browse tree that is used for navigation, product classification, and website content. (required)
     * @param marketplaceId The MarketplaceId is the globally unique identifier of a marketplace, you can refer to the
     *     marketplaceId here : https://developer-docs.amazon.com/sp-api/docs/marketplace-ids. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call getBrowseNodeReturnTopicsAsync(
            String browseNodeId, String marketplaceId, final ApiCallback<BrowseNodeReturnTopicsResponse> callback)
            throws ApiException, LWAException {
        return getBrowseNodeReturnTopicsAsync(browseNodeId, marketplaceId, callback, null);
    }
    /**
     * (asynchronously) Retrieve the topics that customers mention when they return items in a browse node.
     *
     * @param browseNodeId A browse node ID is a unique identifier for a browse node. A browse node is a named location
     *     in a browse tree that is used for navigation, product classification, and website content. (required)
     * @param marketplaceId The MarketplaceId is the globally unique identifier of a marketplace, you can refer to the
     *     marketplaceId here : https://developer-docs.amazon.com/sp-api/docs/marketplace-ids. (required)
     * @param callback The callback to be executed when the API call finishes
     * @param restrictedDataToken Restricted Data Token (optional)
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call getBrowseNodeReturnTopicsAsync(
            String browseNodeId,
            String marketplaceId,
            final ApiCallback<BrowseNodeReturnTopicsResponse> callback,
            String restrictedDataToken)
            throws ApiException, LWAException {

        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call =
                getBrowseNodeReturnTopicsValidateBeforeCall(browseNodeId, marketplaceId, progressRequestListener);

        if (restrictedDataToken != null) {
            okhttp3.Request request = call.request();
            request = RestrictedDataTokenSigner.sign(
                    request, restrictedDataToken, "CustomerFeedbackApi-getBrowseNodeReturnTopics");
            call = apiClient.getHttpClient().newCall(request);
        }

        if (disableRateLimiting || getBrowseNodeReturnTopicsBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<BrowseNodeReturnTopicsResponse>() {}.getType();
            apiClient.executeAsync(call, localVarReturnType, callback);
            return call;
        } else throw new ApiException.RateLimitExceeded("getBrowseNodeReturnTopics operation exceeds rate limit");
    }
    /**
     * Build call for getBrowseNodeReturnTrends
     *
     * @param browseNodeId A browse node ID is a unique identifier of a browse node. A browse node is a named location
     *     in a browse tree that is used for navigation, product classification, and website content. (required)
     * @param marketplaceId The MarketplaceId is the globally unique identifier of a marketplace, you can refer to the
     *     marketplaceId here : https://developer-docs.amazon.com/sp-api/docs/marketplace-ids. (required)
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    private okhttp3.Call getBrowseNodeReturnTrendsCall(
            String browseNodeId,
            String marketplaceId,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/customerFeedback/2024-06-01/browseNodes/{browseNodeId}/returns/trends"
                .replaceAll("\\{" + "browseNodeId" + "\\}", apiClient.escapeString(browseNodeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (marketplaceId != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("marketplaceId", marketplaceId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {};

        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        return apiClient.buildCall(
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                progressRequestListener);
    }

    private okhttp3.Call getBrowseNodeReturnTrendsValidateBeforeCall(
            String browseNodeId,
            String marketplaceId,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        // verify the required parameter 'browseNodeId' is set
        if (browseNodeId == null) {
            throw new ApiException(
                    "Missing the required parameter 'browseNodeId' when calling getBrowseNodeReturnTrends(Async)");
        }
        // verify the required parameter 'marketplaceId' is set
        if (marketplaceId == null) {
            throw new ApiException(
                    "Missing the required parameter 'marketplaceId' when calling getBrowseNodeReturnTrends(Async)");
        }

        return getBrowseNodeReturnTrendsCall(browseNodeId, marketplaceId, progressRequestListener);
    }

    /**
     * Retrieve the trends of topics that customers mention when they return items in a browse node.
     *
     * @param browseNodeId A browse node ID is a unique identifier of a browse node. A browse node is a named location
     *     in a browse tree that is used for navigation, product classification, and website content. (required)
     * @param marketplaceId The MarketplaceId is the globally unique identifier of a marketplace, you can refer to the
     *     marketplaceId here : https://developer-docs.amazon.com/sp-api/docs/marketplace-ids. (required)
     * @param restrictedDataToken Restricted Data Token (optional)
     * @return BrowseNodeReturnTrendsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public BrowseNodeReturnTrendsResponse getBrowseNodeReturnTrends(
            String browseNodeId, String marketplaceId, String restrictedDataToken) throws ApiException, LWAException {
        ApiResponse<BrowseNodeReturnTrendsResponse> resp =
                getBrowseNodeReturnTrendsWithHttpInfo(browseNodeId, marketplaceId, restrictedDataToken);
        return resp.getData();
    }

    /**
     * Retrieve the trends of topics that customers mention when they return items in a browse node.
     *
     * @param browseNodeId A browse node ID is a unique identifier of a browse node. A browse node is a named location
     *     in a browse tree that is used for navigation, product classification, and website content. (required)
     * @param marketplaceId The MarketplaceId is the globally unique identifier of a marketplace, you can refer to the
     *     marketplaceId here : https://developer-docs.amazon.com/sp-api/docs/marketplace-ids. (required)
     * @return BrowseNodeReturnTrendsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public BrowseNodeReturnTrendsResponse getBrowseNodeReturnTrends(String browseNodeId, String marketplaceId)
            throws ApiException, LWAException {
        ApiResponse<BrowseNodeReturnTrendsResponse> resp =
                getBrowseNodeReturnTrendsWithHttpInfo(browseNodeId, marketplaceId, null);
        return resp.getData();
    }

    /**
     * Retrieve the trends of topics that customers mention when they return items in a browse node.
     *
     * @param browseNodeId A browse node ID is a unique identifier of a browse node. A browse node is a named location
     *     in a browse tree that is used for navigation, product classification, and website content. (required)
     * @param marketplaceId The MarketplaceId is the globally unique identifier of a marketplace, you can refer to the
     *     marketplaceId here : https://developer-docs.amazon.com/sp-api/docs/marketplace-ids. (required)
     * @param restrictedDataToken Restricted Data Token (optional)
     * @return ApiResponse&lt;BrowseNodeReturnTrendsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<BrowseNodeReturnTrendsResponse> getBrowseNodeReturnTrendsWithHttpInfo(
            String browseNodeId, String marketplaceId, String restrictedDataToken) throws ApiException, LWAException {
        okhttp3.Call call = getBrowseNodeReturnTrendsValidateBeforeCall(browseNodeId, marketplaceId, null);

        if (restrictedDataToken != null) {
            okhttp3.Request request = call.request();
            request = RestrictedDataTokenSigner.sign(
                    request, restrictedDataToken, "CustomerFeedbackApi-getBrowseNodeReturnTrends");
            call = apiClient.getHttpClient().newCall(request);
        }

        if (disableRateLimiting || getBrowseNodeReturnTrendsBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<BrowseNodeReturnTrendsResponse>() {}.getType();
            return apiClient.execute(call, localVarReturnType);
        } else throw new ApiException.RateLimitExceeded("getBrowseNodeReturnTrends operation exceeds rate limit");
    }

    /**
     * Retrieve the trends of topics that customers mention when they return items in a browse node.
     *
     * @param browseNodeId A browse node ID is a unique identifier of a browse node. A browse node is a named location
     *     in a browse tree that is used for navigation, product classification, and website content. (required)
     * @param marketplaceId The MarketplaceId is the globally unique identifier of a marketplace, you can refer to the
     *     marketplaceId here : https://developer-docs.amazon.com/sp-api/docs/marketplace-ids. (required)
     * @return ApiResponse&lt;BrowseNodeReturnTrendsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<BrowseNodeReturnTrendsResponse> getBrowseNodeReturnTrendsWithHttpInfo(
            String browseNodeId, String marketplaceId) throws ApiException, LWAException {
        return getBrowseNodeReturnTrendsWithHttpInfo(browseNodeId, marketplaceId, null);
    }

    /**
     * (asynchronously) Retrieve the trends of topics that customers mention when they return items in a browse node.
     *
     * @param browseNodeId A browse node ID is a unique identifier of a browse node. A browse node is a named location
     *     in a browse tree that is used for navigation, product classification, and website content. (required)
     * @param marketplaceId The MarketplaceId is the globally unique identifier of a marketplace, you can refer to the
     *     marketplaceId here : https://developer-docs.amazon.com/sp-api/docs/marketplace-ids. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call getBrowseNodeReturnTrendsAsync(
            String browseNodeId, String marketplaceId, final ApiCallback<BrowseNodeReturnTrendsResponse> callback)
            throws ApiException, LWAException {
        return getBrowseNodeReturnTrendsAsync(browseNodeId, marketplaceId, callback, null);
    }
    /**
     * (asynchronously) Retrieve the trends of topics that customers mention when they return items in a browse node.
     *
     * @param browseNodeId A browse node ID is a unique identifier of a browse node. A browse node is a named location
     *     in a browse tree that is used for navigation, product classification, and website content. (required)
     * @param marketplaceId The MarketplaceId is the globally unique identifier of a marketplace, you can refer to the
     *     marketplaceId here : https://developer-docs.amazon.com/sp-api/docs/marketplace-ids. (required)
     * @param callback The callback to be executed when the API call finishes
     * @param restrictedDataToken Restricted Data Token (optional)
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call getBrowseNodeReturnTrendsAsync(
            String browseNodeId,
            String marketplaceId,
            final ApiCallback<BrowseNodeReturnTrendsResponse> callback,
            String restrictedDataToken)
            throws ApiException, LWAException {

        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call =
                getBrowseNodeReturnTrendsValidateBeforeCall(browseNodeId, marketplaceId, progressRequestListener);

        if (restrictedDataToken != null) {
            okhttp3.Request request = call.request();
            request = RestrictedDataTokenSigner.sign(
                    request, restrictedDataToken, "CustomerFeedbackApi-getBrowseNodeReturnTrends");
            call = apiClient.getHttpClient().newCall(request);
        }

        if (disableRateLimiting || getBrowseNodeReturnTrendsBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<BrowseNodeReturnTrendsResponse>() {}.getType();
            apiClient.executeAsync(call, localVarReturnType, callback);
            return call;
        } else throw new ApiException.RateLimitExceeded("getBrowseNodeReturnTrends operation exceeds rate limit");
    }
    /**
     * Build call for getBrowseNodeReviewTopics
     *
     * @param browseNodeId The ID of a browse node. A browse node is a named location in a browse tree that is used for
     *     navigation, product classification, and website content. (required)
     * @param marketplaceId The MarketplaceId is the globally unique identifier of a marketplace, you can refer to the
     *     marketplaceId here : https://developer-docs.amazon.com/sp-api/docs/marketplace-ids. (required)
     * @param sortBy The metric by which to sort the data in the response. (required)
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    private okhttp3.Call getBrowseNodeReviewTopicsCall(
            String browseNodeId,
            String marketplaceId,
            String sortBy,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/customerFeedback/2024-06-01/browseNodes/{browseNodeId}/reviews/topics"
                .replaceAll("\\{" + "browseNodeId" + "\\}", apiClient.escapeString(browseNodeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (marketplaceId != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("marketplaceId", marketplaceId));
        if (sortBy != null) localVarQueryParams.addAll(apiClient.parameterToPair("sortBy", sortBy));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {};

        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        return apiClient.buildCall(
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                progressRequestListener);
    }

    private okhttp3.Call getBrowseNodeReviewTopicsValidateBeforeCall(
            String browseNodeId,
            String marketplaceId,
            String sortBy,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        // verify the required parameter 'browseNodeId' is set
        if (browseNodeId == null) {
            throw new ApiException(
                    "Missing the required parameter 'browseNodeId' when calling getBrowseNodeReviewTopics(Async)");
        }
        // verify the required parameter 'marketplaceId' is set
        if (marketplaceId == null) {
            throw new ApiException(
                    "Missing the required parameter 'marketplaceId' when calling getBrowseNodeReviewTopics(Async)");
        }
        // verify the required parameter 'sortBy' is set
        if (sortBy == null) {
            throw new ApiException(
                    "Missing the required parameter 'sortBy' when calling getBrowseNodeReviewTopics(Async)");
        }

        return getBrowseNodeReviewTopicsCall(browseNodeId, marketplaceId, sortBy, progressRequestListener);
    }

    /**
     * Retrieve a browse node&#x27;s ten most positive and ten most negative review topics.
     *
     * @param browseNodeId The ID of a browse node. A browse node is a named location in a browse tree that is used for
     *     navigation, product classification, and website content. (required)
     * @param marketplaceId The MarketplaceId is the globally unique identifier of a marketplace, you can refer to the
     *     marketplaceId here : https://developer-docs.amazon.com/sp-api/docs/marketplace-ids. (required)
     * @param sortBy The metric by which to sort the data in the response. (required)
     * @param restrictedDataToken Restricted Data Token (optional)
     * @return BrowseNodeReviewTopicsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public BrowseNodeReviewTopicsResponse getBrowseNodeReviewTopics(
            String browseNodeId, String marketplaceId, String sortBy, String restrictedDataToken)
            throws ApiException, LWAException {
        ApiResponse<BrowseNodeReviewTopicsResponse> resp =
                getBrowseNodeReviewTopicsWithHttpInfo(browseNodeId, marketplaceId, sortBy, restrictedDataToken);
        return resp.getData();
    }

    /**
     * Retrieve a browse node&#x27;s ten most positive and ten most negative review topics.
     *
     * @param browseNodeId The ID of a browse node. A browse node is a named location in a browse tree that is used for
     *     navigation, product classification, and website content. (required)
     * @param marketplaceId The MarketplaceId is the globally unique identifier of a marketplace, you can refer to the
     *     marketplaceId here : https://developer-docs.amazon.com/sp-api/docs/marketplace-ids. (required)
     * @param sortBy The metric by which to sort the data in the response. (required)
     * @return BrowseNodeReviewTopicsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public BrowseNodeReviewTopicsResponse getBrowseNodeReviewTopics(
            String browseNodeId, String marketplaceId, String sortBy) throws ApiException, LWAException {
        ApiResponse<BrowseNodeReviewTopicsResponse> resp =
                getBrowseNodeReviewTopicsWithHttpInfo(browseNodeId, marketplaceId, sortBy, null);
        return resp.getData();
    }

    /**
     * Retrieve a browse node&#x27;s ten most positive and ten most negative review topics.
     *
     * @param browseNodeId The ID of a browse node. A browse node is a named location in a browse tree that is used for
     *     navigation, product classification, and website content. (required)
     * @param marketplaceId The MarketplaceId is the globally unique identifier of a marketplace, you can refer to the
     *     marketplaceId here : https://developer-docs.amazon.com/sp-api/docs/marketplace-ids. (required)
     * @param sortBy The metric by which to sort the data in the response. (required)
     * @param restrictedDataToken Restricted Data Token (optional)
     * @return ApiResponse&lt;BrowseNodeReviewTopicsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<BrowseNodeReviewTopicsResponse> getBrowseNodeReviewTopicsWithHttpInfo(
            String browseNodeId, String marketplaceId, String sortBy, String restrictedDataToken)
            throws ApiException, LWAException {
        okhttp3.Call call = getBrowseNodeReviewTopicsValidateBeforeCall(browseNodeId, marketplaceId, sortBy, null);

        if (restrictedDataToken != null) {
            okhttp3.Request request = call.request();
            request = RestrictedDataTokenSigner.sign(
                    request, restrictedDataToken, "CustomerFeedbackApi-getBrowseNodeReviewTopics");
            call = apiClient.getHttpClient().newCall(request);
        }

        if (disableRateLimiting || getBrowseNodeReviewTopicsBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<BrowseNodeReviewTopicsResponse>() {}.getType();
            return apiClient.execute(call, localVarReturnType);
        } else throw new ApiException.RateLimitExceeded("getBrowseNodeReviewTopics operation exceeds rate limit");
    }

    /**
     * Retrieve a browse node&#x27;s ten most positive and ten most negative review topics.
     *
     * @param browseNodeId The ID of a browse node. A browse node is a named location in a browse tree that is used for
     *     navigation, product classification, and website content. (required)
     * @param marketplaceId The MarketplaceId is the globally unique identifier of a marketplace, you can refer to the
     *     marketplaceId here : https://developer-docs.amazon.com/sp-api/docs/marketplace-ids. (required)
     * @param sortBy The metric by which to sort the data in the response. (required)
     * @return ApiResponse&lt;BrowseNodeReviewTopicsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<BrowseNodeReviewTopicsResponse> getBrowseNodeReviewTopicsWithHttpInfo(
            String browseNodeId, String marketplaceId, String sortBy) throws ApiException, LWAException {
        return getBrowseNodeReviewTopicsWithHttpInfo(browseNodeId, marketplaceId, sortBy, null);
    }

    /**
     * (asynchronously) Retrieve a browse node&#x27;s ten most positive and ten most negative review topics.
     *
     * @param browseNodeId The ID of a browse node. A browse node is a named location in a browse tree that is used for
     *     navigation, product classification, and website content. (required)
     * @param marketplaceId The MarketplaceId is the globally unique identifier of a marketplace, you can refer to the
     *     marketplaceId here : https://developer-docs.amazon.com/sp-api/docs/marketplace-ids. (required)
     * @param sortBy The metric by which to sort the data in the response. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call getBrowseNodeReviewTopicsAsync(
            String browseNodeId,
            String marketplaceId,
            String sortBy,
            final ApiCallback<BrowseNodeReviewTopicsResponse> callback)
            throws ApiException, LWAException {
        return getBrowseNodeReviewTopicsAsync(browseNodeId, marketplaceId, sortBy, callback, null);
    }
    /**
     * (asynchronously) Retrieve a browse node&#x27;s ten most positive and ten most negative review topics.
     *
     * @param browseNodeId The ID of a browse node. A browse node is a named location in a browse tree that is used for
     *     navigation, product classification, and website content. (required)
     * @param marketplaceId The MarketplaceId is the globally unique identifier of a marketplace, you can refer to the
     *     marketplaceId here : https://developer-docs.amazon.com/sp-api/docs/marketplace-ids. (required)
     * @param sortBy The metric by which to sort the data in the response. (required)
     * @param callback The callback to be executed when the API call finishes
     * @param restrictedDataToken Restricted Data Token (optional)
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call getBrowseNodeReviewTopicsAsync(
            String browseNodeId,
            String marketplaceId,
            String sortBy,
            final ApiCallback<BrowseNodeReviewTopicsResponse> callback,
            String restrictedDataToken)
            throws ApiException, LWAException {

        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = getBrowseNodeReviewTopicsValidateBeforeCall(
                browseNodeId, marketplaceId, sortBy, progressRequestListener);

        if (restrictedDataToken != null) {
            okhttp3.Request request = call.request();
            request = RestrictedDataTokenSigner.sign(
                    request, restrictedDataToken, "CustomerFeedbackApi-getBrowseNodeReviewTopics");
            call = apiClient.getHttpClient().newCall(request);
        }

        if (disableRateLimiting || getBrowseNodeReviewTopicsBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<BrowseNodeReviewTopicsResponse>() {}.getType();
            apiClient.executeAsync(call, localVarReturnType, callback);
            return call;
        } else throw new ApiException.RateLimitExceeded("getBrowseNodeReviewTopics operation exceeds rate limit");
    }
    /**
     * Build call for getBrowseNodeReviewTrends
     *
     * @param browseNodeId A browse node ID is a unique identifier of a browse node. A browse node is a named location
     *     in a browse tree that is used for navigation, product classification, and website content. (required)
     * @param marketplaceId The marketplace ID is the globally unique identifier of a marketplace. For more information,
     *     refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids). (required)
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    private okhttp3.Call getBrowseNodeReviewTrendsCall(
            String browseNodeId,
            String marketplaceId,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/customerFeedback/2024-06-01/browseNodes/{browseNodeId}/reviews/trends"
                .replaceAll("\\{" + "browseNodeId" + "\\}", apiClient.escapeString(browseNodeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (marketplaceId != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("marketplaceId", marketplaceId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {};

        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        return apiClient.buildCall(
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                progressRequestListener);
    }

    private okhttp3.Call getBrowseNodeReviewTrendsValidateBeforeCall(
            String browseNodeId,
            String marketplaceId,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        // verify the required parameter 'browseNodeId' is set
        if (browseNodeId == null) {
            throw new ApiException(
                    "Missing the required parameter 'browseNodeId' when calling getBrowseNodeReviewTrends(Async)");
        }
        // verify the required parameter 'marketplaceId' is set
        if (marketplaceId == null) {
            throw new ApiException(
                    "Missing the required parameter 'marketplaceId' when calling getBrowseNodeReviewTrends(Async)");
        }

        return getBrowseNodeReviewTrendsCall(browseNodeId, marketplaceId, progressRequestListener);
    }

    /**
     * Retrieve the positive and negative review trends of items in a browse node for the past six months.
     *
     * @param browseNodeId A browse node ID is a unique identifier of a browse node. A browse node is a named location
     *     in a browse tree that is used for navigation, product classification, and website content. (required)
     * @param marketplaceId The marketplace ID is the globally unique identifier of a marketplace. For more information,
     *     refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids). (required)
     * @param restrictedDataToken Restricted Data Token (optional)
     * @return BrowseNodeReviewTrendsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public BrowseNodeReviewTrendsResponse getBrowseNodeReviewTrends(
            String browseNodeId, String marketplaceId, String restrictedDataToken) throws ApiException, LWAException {
        ApiResponse<BrowseNodeReviewTrendsResponse> resp =
                getBrowseNodeReviewTrendsWithHttpInfo(browseNodeId, marketplaceId, restrictedDataToken);
        return resp.getData();
    }

    /**
     * Retrieve the positive and negative review trends of items in a browse node for the past six months.
     *
     * @param browseNodeId A browse node ID is a unique identifier of a browse node. A browse node is a named location
     *     in a browse tree that is used for navigation, product classification, and website content. (required)
     * @param marketplaceId The marketplace ID is the globally unique identifier of a marketplace. For more information,
     *     refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids). (required)
     * @return BrowseNodeReviewTrendsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public BrowseNodeReviewTrendsResponse getBrowseNodeReviewTrends(String browseNodeId, String marketplaceId)
            throws ApiException, LWAException {
        ApiResponse<BrowseNodeReviewTrendsResponse> resp =
                getBrowseNodeReviewTrendsWithHttpInfo(browseNodeId, marketplaceId, null);
        return resp.getData();
    }

    /**
     * Retrieve the positive and negative review trends of items in a browse node for the past six months.
     *
     * @param browseNodeId A browse node ID is a unique identifier of a browse node. A browse node is a named location
     *     in a browse tree that is used for navigation, product classification, and website content. (required)
     * @param marketplaceId The marketplace ID is the globally unique identifier of a marketplace. For more information,
     *     refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids). (required)
     * @param restrictedDataToken Restricted Data Token (optional)
     * @return ApiResponse&lt;BrowseNodeReviewTrendsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<BrowseNodeReviewTrendsResponse> getBrowseNodeReviewTrendsWithHttpInfo(
            String browseNodeId, String marketplaceId, String restrictedDataToken) throws ApiException, LWAException {
        okhttp3.Call call = getBrowseNodeReviewTrendsValidateBeforeCall(browseNodeId, marketplaceId, null);

        if (restrictedDataToken != null) {
            okhttp3.Request request = call.request();
            request = RestrictedDataTokenSigner.sign(
                    request, restrictedDataToken, "CustomerFeedbackApi-getBrowseNodeReviewTrends");
            call = apiClient.getHttpClient().newCall(request);
        }

        if (disableRateLimiting || getBrowseNodeReviewTrendsBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<BrowseNodeReviewTrendsResponse>() {}.getType();
            return apiClient.execute(call, localVarReturnType);
        } else throw new ApiException.RateLimitExceeded("getBrowseNodeReviewTrends operation exceeds rate limit");
    }

    /**
     * Retrieve the positive and negative review trends of items in a browse node for the past six months.
     *
     * @param browseNodeId A browse node ID is a unique identifier of a browse node. A browse node is a named location
     *     in a browse tree that is used for navigation, product classification, and website content. (required)
     * @param marketplaceId The marketplace ID is the globally unique identifier of a marketplace. For more information,
     *     refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids). (required)
     * @return ApiResponse&lt;BrowseNodeReviewTrendsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<BrowseNodeReviewTrendsResponse> getBrowseNodeReviewTrendsWithHttpInfo(
            String browseNodeId, String marketplaceId) throws ApiException, LWAException {
        return getBrowseNodeReviewTrendsWithHttpInfo(browseNodeId, marketplaceId, null);
    }

    /**
     * (asynchronously) Retrieve the positive and negative review trends of items in a browse node for the past six
     * months.
     *
     * @param browseNodeId A browse node ID is a unique identifier of a browse node. A browse node is a named location
     *     in a browse tree that is used for navigation, product classification, and website content. (required)
     * @param marketplaceId The marketplace ID is the globally unique identifier of a marketplace. For more information,
     *     refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids). (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call getBrowseNodeReviewTrendsAsync(
            String browseNodeId, String marketplaceId, final ApiCallback<BrowseNodeReviewTrendsResponse> callback)
            throws ApiException, LWAException {
        return getBrowseNodeReviewTrendsAsync(browseNodeId, marketplaceId, callback, null);
    }
    /**
     * (asynchronously) Retrieve the positive and negative review trends of items in a browse node for the past six
     * months.
     *
     * @param browseNodeId A browse node ID is a unique identifier of a browse node. A browse node is a named location
     *     in a browse tree that is used for navigation, product classification, and website content. (required)
     * @param marketplaceId The marketplace ID is the globally unique identifier of a marketplace. For more information,
     *     refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids). (required)
     * @param callback The callback to be executed when the API call finishes
     * @param restrictedDataToken Restricted Data Token (optional)
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call getBrowseNodeReviewTrendsAsync(
            String browseNodeId,
            String marketplaceId,
            final ApiCallback<BrowseNodeReviewTrendsResponse> callback,
            String restrictedDataToken)
            throws ApiException, LWAException {

        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call =
                getBrowseNodeReviewTrendsValidateBeforeCall(browseNodeId, marketplaceId, progressRequestListener);

        if (restrictedDataToken != null) {
            okhttp3.Request request = call.request();
            request = RestrictedDataTokenSigner.sign(
                    request, restrictedDataToken, "CustomerFeedbackApi-getBrowseNodeReviewTrends");
            call = apiClient.getHttpClient().newCall(request);
        }

        if (disableRateLimiting || getBrowseNodeReviewTrendsBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<BrowseNodeReviewTrendsResponse>() {}.getType();
            apiClient.executeAsync(call, localVarReturnType, callback);
            return call;
        } else throw new ApiException.RateLimitExceeded("getBrowseNodeReviewTrends operation exceeds rate limit");
    }
    /**
     * Build call for getItemBrowseNode
     *
     * @param asin The Amazon Standard Identification Number (ASIN) is the unique identifier of a product within a
     *     marketplace. (required)
     * @param marketplaceId The MarketplaceId is the globally unique identifier of a marketplace, you can refer to the
     *     marketplaceId here : https://developer-docs.amazon.com/sp-api/docs/marketplace-ids. (required)
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    private okhttp3.Call getItemBrowseNodeCall(
            String asin,
            String marketplaceId,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/customerFeedback/2024-06-01/items/{asin}/browseNode"
                .replaceAll("\\{" + "asin" + "\\}", apiClient.escapeString(asin.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (marketplaceId != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("marketplaceId", marketplaceId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {};

        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        return apiClient.buildCall(
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                progressRequestListener);
    }

    private okhttp3.Call getItemBrowseNodeValidateBeforeCall(
            String asin,
            String marketplaceId,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        // verify the required parameter 'asin' is set
        if (asin == null) {
            throw new ApiException("Missing the required parameter 'asin' when calling getItemBrowseNode(Async)");
        }
        // verify the required parameter 'marketplaceId' is set
        if (marketplaceId == null) {
            throw new ApiException(
                    "Missing the required parameter 'marketplaceId' when calling getItemBrowseNode(Async)");
        }

        return getItemBrowseNodeCall(asin, marketplaceId, progressRequestListener);
    }

    /**
     * This API returns the associated browse node of the requested ASIN. A browse node is a location in a browse tree
     * that is used for navigation, product classification, and website content on the Amazon retail website.
     *
     * @param asin The Amazon Standard Identification Number (ASIN) is the unique identifier of a product within a
     *     marketplace. (required)
     * @param marketplaceId The MarketplaceId is the globally unique identifier of a marketplace, you can refer to the
     *     marketplaceId here : https://developer-docs.amazon.com/sp-api/docs/marketplace-ids. (required)
     * @param restrictedDataToken Restricted Data Token (optional)
     * @return BrowseNodeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public BrowseNodeResponse getItemBrowseNode(String asin, String marketplaceId, String restrictedDataToken)
            throws ApiException, LWAException {
        ApiResponse<BrowseNodeResponse> resp = getItemBrowseNodeWithHttpInfo(asin, marketplaceId, restrictedDataToken);
        return resp.getData();
    }

    /**
     * This API returns the associated browse node of the requested ASIN. A browse node is a location in a browse tree
     * that is used for navigation, product classification, and website content on the Amazon retail website.
     *
     * @param asin The Amazon Standard Identification Number (ASIN) is the unique identifier of a product within a
     *     marketplace. (required)
     * @param marketplaceId The MarketplaceId is the globally unique identifier of a marketplace, you can refer to the
     *     marketplaceId here : https://developer-docs.amazon.com/sp-api/docs/marketplace-ids. (required)
     * @return BrowseNodeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public BrowseNodeResponse getItemBrowseNode(String asin, String marketplaceId) throws ApiException, LWAException {
        ApiResponse<BrowseNodeResponse> resp = getItemBrowseNodeWithHttpInfo(asin, marketplaceId, null);
        return resp.getData();
    }

    /**
     * This API returns the associated browse node of the requested ASIN. A browse node is a location in a browse tree
     * that is used for navigation, product classification, and website content on the Amazon retail website.
     *
     * @param asin The Amazon Standard Identification Number (ASIN) is the unique identifier of a product within a
     *     marketplace. (required)
     * @param marketplaceId The MarketplaceId is the globally unique identifier of a marketplace, you can refer to the
     *     marketplaceId here : https://developer-docs.amazon.com/sp-api/docs/marketplace-ids. (required)
     * @param restrictedDataToken Restricted Data Token (optional)
     * @return ApiResponse&lt;BrowseNodeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<BrowseNodeResponse> getItemBrowseNodeWithHttpInfo(
            String asin, String marketplaceId, String restrictedDataToken) throws ApiException, LWAException {
        okhttp3.Call call = getItemBrowseNodeValidateBeforeCall(asin, marketplaceId, null);

        if (restrictedDataToken != null) {
            okhttp3.Request request = call.request();
            request = RestrictedDataTokenSigner.sign(
                    request, restrictedDataToken, "CustomerFeedbackApi-getItemBrowseNode");
            call = apiClient.getHttpClient().newCall(request);
        }

        if (disableRateLimiting || getItemBrowseNodeBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<BrowseNodeResponse>() {}.getType();
            return apiClient.execute(call, localVarReturnType);
        } else throw new ApiException.RateLimitExceeded("getItemBrowseNode operation exceeds rate limit");
    }

    /**
     * This API returns the associated browse node of the requested ASIN. A browse node is a location in a browse tree
     * that is used for navigation, product classification, and website content on the Amazon retail website.
     *
     * @param asin The Amazon Standard Identification Number (ASIN) is the unique identifier of a product within a
     *     marketplace. (required)
     * @param marketplaceId The MarketplaceId is the globally unique identifier of a marketplace, you can refer to the
     *     marketplaceId here : https://developer-docs.amazon.com/sp-api/docs/marketplace-ids. (required)
     * @return ApiResponse&lt;BrowseNodeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<BrowseNodeResponse> getItemBrowseNodeWithHttpInfo(String asin, String marketplaceId)
            throws ApiException, LWAException {
        return getItemBrowseNodeWithHttpInfo(asin, marketplaceId, null);
    }

    /**
     * (asynchronously) This API returns the associated browse node of the requested ASIN. A browse node is a location
     * in a browse tree that is used for navigation, product classification, and website content on the Amazon retail
     * website.
     *
     * @param asin The Amazon Standard Identification Number (ASIN) is the unique identifier of a product within a
     *     marketplace. (required)
     * @param marketplaceId The MarketplaceId is the globally unique identifier of a marketplace, you can refer to the
     *     marketplaceId here : https://developer-docs.amazon.com/sp-api/docs/marketplace-ids. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call getItemBrowseNodeAsync(
            String asin, String marketplaceId, final ApiCallback<BrowseNodeResponse> callback)
            throws ApiException, LWAException {
        return getItemBrowseNodeAsync(asin, marketplaceId, callback, null);
    }
    /**
     * (asynchronously) This API returns the associated browse node of the requested ASIN. A browse node is a location
     * in a browse tree that is used for navigation, product classification, and website content on the Amazon retail
     * website.
     *
     * @param asin The Amazon Standard Identification Number (ASIN) is the unique identifier of a product within a
     *     marketplace. (required)
     * @param marketplaceId The MarketplaceId is the globally unique identifier of a marketplace, you can refer to the
     *     marketplaceId here : https://developer-docs.amazon.com/sp-api/docs/marketplace-ids. (required)
     * @param callback The callback to be executed when the API call finishes
     * @param restrictedDataToken Restricted Data Token (optional)
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call getItemBrowseNodeAsync(
            String asin,
            String marketplaceId,
            final ApiCallback<BrowseNodeResponse> callback,
            String restrictedDataToken)
            throws ApiException, LWAException {

        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = getItemBrowseNodeValidateBeforeCall(asin, marketplaceId, progressRequestListener);

        if (restrictedDataToken != null) {
            okhttp3.Request request = call.request();
            request = RestrictedDataTokenSigner.sign(
                    request, restrictedDataToken, "CustomerFeedbackApi-getItemBrowseNode");
            call = apiClient.getHttpClient().newCall(request);
        }

        if (disableRateLimiting || getItemBrowseNodeBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<BrowseNodeResponse>() {}.getType();
            apiClient.executeAsync(call, localVarReturnType, callback);
            return call;
        } else throw new ApiException.RateLimitExceeded("getItemBrowseNode operation exceeds rate limit");
    }
    /**
     * Build call for getItemReviewTopics
     *
     * @param asin The Amazon Standard Identification Number (ASIN) is the unique identifier of a product within a
     *     marketplace. The value must be a child ASIN. (required)
     * @param marketplaceId The MarketplaceId is the globally unique identifier of a marketplace, you can refer to the
     *     marketplaceId here : https://developer-docs.amazon.com/sp-api/docs/marketplace-ids. (required)
     * @param sortBy The metric by which to sort data in the response. (required)
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    private okhttp3.Call getItemReviewTopicsCall(
            String asin,
            String marketplaceId,
            String sortBy,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/customerFeedback/2024-06-01/items/{asin}/reviews/topics"
                .replaceAll("\\{" + "asin" + "\\}", apiClient.escapeString(asin.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (marketplaceId != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("marketplaceId", marketplaceId));
        if (sortBy != null) localVarQueryParams.addAll(apiClient.parameterToPair("sortBy", sortBy));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {};

        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        return apiClient.buildCall(
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                progressRequestListener);
    }

    private okhttp3.Call getItemReviewTopicsValidateBeforeCall(
            String asin,
            String marketplaceId,
            String sortBy,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        // verify the required parameter 'asin' is set
        if (asin == null) {
            throw new ApiException("Missing the required parameter 'asin' when calling getItemReviewTopics(Async)");
        }
        // verify the required parameter 'marketplaceId' is set
        if (marketplaceId == null) {
            throw new ApiException(
                    "Missing the required parameter 'marketplaceId' when calling getItemReviewTopics(Async)");
        }
        // verify the required parameter 'sortBy' is set
        if (sortBy == null) {
            throw new ApiException("Missing the required parameter 'sortBy' when calling getItemReviewTopics(Async)");
        }

        return getItemReviewTopicsCall(asin, marketplaceId, sortBy, progressRequestListener);
    }

    /**
     * Retrieve an item&#x27;s ten most positive and ten most negative review topics.
     *
     * @param asin The Amazon Standard Identification Number (ASIN) is the unique identifier of a product within a
     *     marketplace. The value must be a child ASIN. (required)
     * @param marketplaceId The MarketplaceId is the globally unique identifier of a marketplace, you can refer to the
     *     marketplaceId here : https://developer-docs.amazon.com/sp-api/docs/marketplace-ids. (required)
     * @param sortBy The metric by which to sort data in the response. (required)
     * @param restrictedDataToken Restricted Data Token (optional)
     * @return ItemReviewTopicsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ItemReviewTopicsResponse getItemReviewTopics(
            String asin, String marketplaceId, String sortBy, String restrictedDataToken)
            throws ApiException, LWAException {
        ApiResponse<ItemReviewTopicsResponse> resp =
                getItemReviewTopicsWithHttpInfo(asin, marketplaceId, sortBy, restrictedDataToken);
        return resp.getData();
    }

    /**
     * Retrieve an item&#x27;s ten most positive and ten most negative review topics.
     *
     * @param asin The Amazon Standard Identification Number (ASIN) is the unique identifier of a product within a
     *     marketplace. The value must be a child ASIN. (required)
     * @param marketplaceId The MarketplaceId is the globally unique identifier of a marketplace, you can refer to the
     *     marketplaceId here : https://developer-docs.amazon.com/sp-api/docs/marketplace-ids. (required)
     * @param sortBy The metric by which to sort data in the response. (required)
     * @return ItemReviewTopicsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ItemReviewTopicsResponse getItemReviewTopics(String asin, String marketplaceId, String sortBy)
            throws ApiException, LWAException {
        ApiResponse<ItemReviewTopicsResponse> resp = getItemReviewTopicsWithHttpInfo(asin, marketplaceId, sortBy, null);
        return resp.getData();
    }

    /**
     * Retrieve an item&#x27;s ten most positive and ten most negative review topics.
     *
     * @param asin The Amazon Standard Identification Number (ASIN) is the unique identifier of a product within a
     *     marketplace. The value must be a child ASIN. (required)
     * @param marketplaceId The MarketplaceId is the globally unique identifier of a marketplace, you can refer to the
     *     marketplaceId here : https://developer-docs.amazon.com/sp-api/docs/marketplace-ids. (required)
     * @param sortBy The metric by which to sort data in the response. (required)
     * @param restrictedDataToken Restricted Data Token (optional)
     * @return ApiResponse&lt;ItemReviewTopicsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<ItemReviewTopicsResponse> getItemReviewTopicsWithHttpInfo(
            String asin, String marketplaceId, String sortBy, String restrictedDataToken)
            throws ApiException, LWAException {
        okhttp3.Call call = getItemReviewTopicsValidateBeforeCall(asin, marketplaceId, sortBy, null);

        if (restrictedDataToken != null) {
            okhttp3.Request request = call.request();
            request = RestrictedDataTokenSigner.sign(
                    request, restrictedDataToken, "CustomerFeedbackApi-getItemReviewTopics");
            call = apiClient.getHttpClient().newCall(request);
        }

        if (disableRateLimiting || getItemReviewTopicsBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<ItemReviewTopicsResponse>() {}.getType();
            return apiClient.execute(call, localVarReturnType);
        } else throw new ApiException.RateLimitExceeded("getItemReviewTopics operation exceeds rate limit");
    }

    /**
     * Retrieve an item&#x27;s ten most positive and ten most negative review topics.
     *
     * @param asin The Amazon Standard Identification Number (ASIN) is the unique identifier of a product within a
     *     marketplace. The value must be a child ASIN. (required)
     * @param marketplaceId The MarketplaceId is the globally unique identifier of a marketplace, you can refer to the
     *     marketplaceId here : https://developer-docs.amazon.com/sp-api/docs/marketplace-ids. (required)
     * @param sortBy The metric by which to sort data in the response. (required)
     * @return ApiResponse&lt;ItemReviewTopicsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<ItemReviewTopicsResponse> getItemReviewTopicsWithHttpInfo(
            String asin, String marketplaceId, String sortBy) throws ApiException, LWAException {
        return getItemReviewTopicsWithHttpInfo(asin, marketplaceId, sortBy, null);
    }

    /**
     * (asynchronously) Retrieve an item&#x27;s ten most positive and ten most negative review topics.
     *
     * @param asin The Amazon Standard Identification Number (ASIN) is the unique identifier of a product within a
     *     marketplace. The value must be a child ASIN. (required)
     * @param marketplaceId The MarketplaceId is the globally unique identifier of a marketplace, you can refer to the
     *     marketplaceId here : https://developer-docs.amazon.com/sp-api/docs/marketplace-ids. (required)
     * @param sortBy The metric by which to sort data in the response. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call getItemReviewTopicsAsync(
            String asin, String marketplaceId, String sortBy, final ApiCallback<ItemReviewTopicsResponse> callback)
            throws ApiException, LWAException {
        return getItemReviewTopicsAsync(asin, marketplaceId, sortBy, callback, null);
    }
    /**
     * (asynchronously) Retrieve an item&#x27;s ten most positive and ten most negative review topics.
     *
     * @param asin The Amazon Standard Identification Number (ASIN) is the unique identifier of a product within a
     *     marketplace. The value must be a child ASIN. (required)
     * @param marketplaceId The MarketplaceId is the globally unique identifier of a marketplace, you can refer to the
     *     marketplaceId here : https://developer-docs.amazon.com/sp-api/docs/marketplace-ids. (required)
     * @param sortBy The metric by which to sort data in the response. (required)
     * @param callback The callback to be executed when the API call finishes
     * @param restrictedDataToken Restricted Data Token (optional)
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call getItemReviewTopicsAsync(
            String asin,
            String marketplaceId,
            String sortBy,
            final ApiCallback<ItemReviewTopicsResponse> callback,
            String restrictedDataToken)
            throws ApiException, LWAException {

        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = getItemReviewTopicsValidateBeforeCall(asin, marketplaceId, sortBy, progressRequestListener);

        if (restrictedDataToken != null) {
            okhttp3.Request request = call.request();
            request = RestrictedDataTokenSigner.sign(
                    request, restrictedDataToken, "CustomerFeedbackApi-getItemReviewTopics");
            call = apiClient.getHttpClient().newCall(request);
        }

        if (disableRateLimiting || getItemReviewTopicsBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<ItemReviewTopicsResponse>() {}.getType();
            apiClient.executeAsync(call, localVarReturnType, callback);
            return call;
        } else throw new ApiException.RateLimitExceeded("getItemReviewTopics operation exceeds rate limit");
    }
    /**
     * Build call for getItemReviewTrends
     *
     * @param asin The Amazon Standard Identification Number (ASIN) is the unique identifier of a product within a
     *     marketplace. This API takes child ASIN as an input. (required)
     * @param marketplaceId The MarketplaceId is the globally unique identifier of a marketplace, you can refer to the
     *     marketplaceId here : https://developer-docs.amazon.com/sp-api/docs/marketplace-ids. (required)
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    private okhttp3.Call getItemReviewTrendsCall(
            String asin,
            String marketplaceId,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/customerFeedback/2024-06-01/items/{asin}/reviews/trends"
                .replaceAll("\\{" + "asin" + "\\}", apiClient.escapeString(asin.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (marketplaceId != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("marketplaceId", marketplaceId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {};

        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        return apiClient.buildCall(
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                progressRequestListener);
    }

    private okhttp3.Call getItemReviewTrendsValidateBeforeCall(
            String asin,
            String marketplaceId,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        // verify the required parameter 'asin' is set
        if (asin == null) {
            throw new ApiException("Missing the required parameter 'asin' when calling getItemReviewTrends(Async)");
        }
        // verify the required parameter 'marketplaceId' is set
        if (marketplaceId == null) {
            throw new ApiException(
                    "Missing the required parameter 'marketplaceId' when calling getItemReviewTrends(Async)");
        }

        return getItemReviewTrendsCall(asin, marketplaceId, progressRequestListener);
    }

    /**
     * Retrieve an item&#x27;s positive and negative review trends for the past six months.
     *
     * @param asin The Amazon Standard Identification Number (ASIN) is the unique identifier of a product within a
     *     marketplace. This API takes child ASIN as an input. (required)
     * @param marketplaceId The MarketplaceId is the globally unique identifier of a marketplace, you can refer to the
     *     marketplaceId here : https://developer-docs.amazon.com/sp-api/docs/marketplace-ids. (required)
     * @param restrictedDataToken Restricted Data Token (optional)
     * @return ItemReviewTrendsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ItemReviewTrendsResponse getItemReviewTrends(String asin, String marketplaceId, String restrictedDataToken)
            throws ApiException, LWAException {
        ApiResponse<ItemReviewTrendsResponse> resp =
                getItemReviewTrendsWithHttpInfo(asin, marketplaceId, restrictedDataToken);
        return resp.getData();
    }

    /**
     * Retrieve an item&#x27;s positive and negative review trends for the past six months.
     *
     * @param asin The Amazon Standard Identification Number (ASIN) is the unique identifier of a product within a
     *     marketplace. This API takes child ASIN as an input. (required)
     * @param marketplaceId The MarketplaceId is the globally unique identifier of a marketplace, you can refer to the
     *     marketplaceId here : https://developer-docs.amazon.com/sp-api/docs/marketplace-ids. (required)
     * @return ItemReviewTrendsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ItemReviewTrendsResponse getItemReviewTrends(String asin, String marketplaceId)
            throws ApiException, LWAException {
        ApiResponse<ItemReviewTrendsResponse> resp = getItemReviewTrendsWithHttpInfo(asin, marketplaceId, null);
        return resp.getData();
    }

    /**
     * Retrieve an item&#x27;s positive and negative review trends for the past six months.
     *
     * @param asin The Amazon Standard Identification Number (ASIN) is the unique identifier of a product within a
     *     marketplace. This API takes child ASIN as an input. (required)
     * @param marketplaceId The MarketplaceId is the globally unique identifier of a marketplace, you can refer to the
     *     marketplaceId here : https://developer-docs.amazon.com/sp-api/docs/marketplace-ids. (required)
     * @param restrictedDataToken Restricted Data Token (optional)
     * @return ApiResponse&lt;ItemReviewTrendsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<ItemReviewTrendsResponse> getItemReviewTrendsWithHttpInfo(
            String asin, String marketplaceId, String restrictedDataToken) throws ApiException, LWAException {
        okhttp3.Call call = getItemReviewTrendsValidateBeforeCall(asin, marketplaceId, null);

        if (restrictedDataToken != null) {
            okhttp3.Request request = call.request();
            request = RestrictedDataTokenSigner.sign(
                    request, restrictedDataToken, "CustomerFeedbackApi-getItemReviewTrends");
            call = apiClient.getHttpClient().newCall(request);
        }

        if (disableRateLimiting || getItemReviewTrendsBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<ItemReviewTrendsResponse>() {}.getType();
            return apiClient.execute(call, localVarReturnType);
        } else throw new ApiException.RateLimitExceeded("getItemReviewTrends operation exceeds rate limit");
    }

    /**
     * Retrieve an item&#x27;s positive and negative review trends for the past six months.
     *
     * @param asin The Amazon Standard Identification Number (ASIN) is the unique identifier of a product within a
     *     marketplace. This API takes child ASIN as an input. (required)
     * @param marketplaceId The MarketplaceId is the globally unique identifier of a marketplace, you can refer to the
     *     marketplaceId here : https://developer-docs.amazon.com/sp-api/docs/marketplace-ids. (required)
     * @return ApiResponse&lt;ItemReviewTrendsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<ItemReviewTrendsResponse> getItemReviewTrendsWithHttpInfo(String asin, String marketplaceId)
            throws ApiException, LWAException {
        return getItemReviewTrendsWithHttpInfo(asin, marketplaceId, null);
    }

    /**
     * (asynchronously) Retrieve an item&#x27;s positive and negative review trends for the past six months.
     *
     * @param asin The Amazon Standard Identification Number (ASIN) is the unique identifier of a product within a
     *     marketplace. This API takes child ASIN as an input. (required)
     * @param marketplaceId The MarketplaceId is the globally unique identifier of a marketplace, you can refer to the
     *     marketplaceId here : https://developer-docs.amazon.com/sp-api/docs/marketplace-ids. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call getItemReviewTrendsAsync(
            String asin, String marketplaceId, final ApiCallback<ItemReviewTrendsResponse> callback)
            throws ApiException, LWAException {
        return getItemReviewTrendsAsync(asin, marketplaceId, callback, null);
    }
    /**
     * (asynchronously) Retrieve an item&#x27;s positive and negative review trends for the past six months.
     *
     * @param asin The Amazon Standard Identification Number (ASIN) is the unique identifier of a product within a
     *     marketplace. This API takes child ASIN as an input. (required)
     * @param marketplaceId The MarketplaceId is the globally unique identifier of a marketplace, you can refer to the
     *     marketplaceId here : https://developer-docs.amazon.com/sp-api/docs/marketplace-ids. (required)
     * @param callback The callback to be executed when the API call finishes
     * @param restrictedDataToken Restricted Data Token (optional)
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call getItemReviewTrendsAsync(
            String asin,
            String marketplaceId,
            final ApiCallback<ItemReviewTrendsResponse> callback,
            String restrictedDataToken)
            throws ApiException, LWAException {

        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = getItemReviewTrendsValidateBeforeCall(asin, marketplaceId, progressRequestListener);

        if (restrictedDataToken != null) {
            okhttp3.Request request = call.request();
            request = RestrictedDataTokenSigner.sign(
                    request, restrictedDataToken, "CustomerFeedbackApi-getItemReviewTrends");
            call = apiClient.getHttpClient().newCall(request);
        }

        if (disableRateLimiting || getItemReviewTrendsBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<ItemReviewTrendsResponse>() {}.getType();
            apiClient.executeAsync(call, localVarReturnType, callback);
            return call;
        } else throw new ApiException.RateLimitExceeded("getItemReviewTrends operation exceeds rate limit");
    }

    public static class Builder {
        private LWAAuthorizationCredentials lwaAuthorizationCredentials;
        private String endpoint;
        private LWAAccessTokenCache lwaAccessTokenCache;
        private Boolean disableAccessTokenCache = false;
        private Boolean disableRateLimiting = false;

        public Builder lwaAuthorizationCredentials(LWAAuthorizationCredentials lwaAuthorizationCredentials) {
            this.lwaAuthorizationCredentials = lwaAuthorizationCredentials;
            return this;
        }

        public Builder endpoint(String endpoint) {
            this.endpoint = endpoint;
            return this;
        }

        public Builder lwaAccessTokenCache(LWAAccessTokenCache lwaAccessTokenCache) {
            this.lwaAccessTokenCache = lwaAccessTokenCache;
            return this;
        }

        public Builder disableAccessTokenCache() {
            this.disableAccessTokenCache = true;
            return this;
        }

        public Builder disableRateLimiting() {
            this.disableRateLimiting = true;
            return this;
        }

        public CustomerFeedbackApi build() {
            if (lwaAuthorizationCredentials == null) {
                throw new RuntimeException("LWAAuthorizationCredentials not set");
            }

            if (StringUtil.isEmpty(endpoint)) {
                throw new RuntimeException("Endpoint not set");
            }

            LWAAuthorizationSigner lwaAuthorizationSigner = null;
            if (disableAccessTokenCache) {
                lwaAuthorizationSigner = new LWAAuthorizationSigner(lwaAuthorizationCredentials);
            } else {
                if (lwaAccessTokenCache == null) {
                    lwaAccessTokenCache = new LWAAccessTokenCacheImpl();
                }
                lwaAuthorizationSigner = new LWAAuthorizationSigner(lwaAuthorizationCredentials, lwaAccessTokenCache);
            }

            return new CustomerFeedbackApi(
                    new ApiClient()
                            .setLWAAuthorizationSigner(lwaAuthorizationSigner)
                            .setBasePath(endpoint),
                    disableRateLimiting);
        }
    }
}
