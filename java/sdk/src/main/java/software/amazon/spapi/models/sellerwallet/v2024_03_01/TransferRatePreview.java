/*
 * The Selling Partner API for Amazon Seller Wallet Open Banking API
 * The Selling Partner API for Seller Wallet (Seller Wallet API) provides financial information that is relevant to a seller's Seller Wallet account. You can obtain financial events, balances, and transfer schedules for Seller Wallet accounts. You can also schedule and initiate transactions.
 *
 * OpenAPI spec version: 2024-03-01
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package software.amazon.spapi.models.sellerwallet.v2024_03_01;

import com.google.gson.annotations.SerializedName;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * The fees and foreign exchange rates that apply to the transaction. If the fees are in terms of the
 * &#x60;baseAmount&#x60; (source account) currency, then the effective rate is equal to **1 - (fees *
 * &#x60;baseRate&#x60; / &#x60;baseAmount&#x60;)**. If the fees are in terms of the &#x60;transferAmount&#x60;
 * (destination account) currency, then the effective rate is equal to **&#x60;baseRate&#x60; - (fees /
 * &#x60;baseAmount&#x60;)**. In the preceding expressions, **fees** is equal to the sum of all
 * &#x60;feeAmount.currencyAmount&#x60; values in the &#x60;fees&#x60; array.
 */
@Schema(
        description =
                "The fees and foreign exchange rates that apply to the transaction.  If the fees are in terms of the `baseAmount` (source account) currency, then the effective rate is equal to **1 - (fees * `baseRate` / `baseAmount`)**.  If the fees are in terms of the `transferAmount` (destination account) currency, then the effective rate is equal to **`baseRate` - (fees / `baseAmount`)**.  In the preceding expressions, **fees** is equal to the sum of all `feeAmount.currencyAmount` values in the `fees` array.")
public class TransferRatePreview {
    @SerializedName("baseAmount")
    private Currency baseAmount = null;

    @SerializedName("fxRateDetails")
    private FxRateDetails fxRateDetails = null;

    @SerializedName("transferAmount")
    private Currency transferAmount = null;

    @SerializedName("fees")
    private List<Fee> fees = new ArrayList<>();

    public TransferRatePreview baseAmount(Currency baseAmount) {
        this.baseAmount = baseAmount;
        return this;
    }

    /**
     * Get baseAmount
     *
     * @return baseAmount
     */
    @Schema(required = true, description = "")
    public Currency getBaseAmount() {
        return baseAmount;
    }

    public void setBaseAmount(Currency baseAmount) {
        this.baseAmount = baseAmount;
    }

    public TransferRatePreview fxRateDetails(FxRateDetails fxRateDetails) {
        this.fxRateDetails = fxRateDetails;
        return this;
    }

    /**
     * Get fxRateDetails
     *
     * @return fxRateDetails
     */
    @Schema(required = true, description = "")
    public FxRateDetails getFxRateDetails() {
        return fxRateDetails;
    }

    public void setFxRateDetails(FxRateDetails fxRateDetails) {
        this.fxRateDetails = fxRateDetails;
    }

    public TransferRatePreview transferAmount(Currency transferAmount) {
        this.transferAmount = transferAmount;
        return this;
    }

    /**
     * Get transferAmount
     *
     * @return transferAmount
     */
    @Schema(required = true, description = "")
    public Currency getTransferAmount() {
        return transferAmount;
    }

    public void setTransferAmount(Currency transferAmount) {
        this.transferAmount = transferAmount;
    }

    public TransferRatePreview fees(List<Fee> fees) {
        this.fees = fees;
        return this;
    }

    public TransferRatePreview addFeesItem(Fee feesItem) {
        this.fees.add(feesItem);
        return this;
    }

    /**
     * List of fees
     *
     * @return fees
     */
    @Schema(required = true, description = "List of fees ")
    public List<Fee> getFees() {
        return fees;
    }

    public void setFees(List<Fee> fees) {
        this.fees = fees;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TransferRatePreview transferRatePreview = (TransferRatePreview) o;
        return Objects.equals(this.baseAmount, transferRatePreview.baseAmount)
                && Objects.equals(this.fxRateDetails, transferRatePreview.fxRateDetails)
                && Objects.equals(this.transferAmount, transferRatePreview.transferAmount)
                && Objects.equals(this.fees, transferRatePreview.fees);
    }

    @Override
    public int hashCode() {
        return Objects.hash(baseAmount, fxRateDetails, transferAmount, fees);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class TransferRatePreview {\n");

        sb.append("    baseAmount: ").append(toIndentedString(baseAmount)).append("\n");
        sb.append("    fxRateDetails: ").append(toIndentedString(fxRateDetails)).append("\n");
        sb.append("    transferAmount: ")
                .append(toIndentedString(transferAmount))
                .append("\n");
        sb.append("    fees: ").append(toIndentedString(fees)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /** Convert the given object to string with each line indented by 4 spaces (except the first line). */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }
}
