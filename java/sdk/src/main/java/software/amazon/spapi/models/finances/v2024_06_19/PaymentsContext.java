/*
 * The Selling Partner API for Finances
 * The Selling Partner API for Finances helps you obtain financial information relevant to a seller's business. You can obtain financial events for a given order or date range without having to wait until a statement period closes.
 *
 * OpenAPI spec version: 2024-06-19
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package software.amazon.spapi.models.finances.v2024_06_19;

import com.google.gson.annotations.SerializedName;
import io.swagger.v3.oas.annotations.media.Schema;
import java.time.OffsetDateTime;
import java.util.Objects;

/** Additional information related to Payments related transactions. */
@Schema(description = "Additional information related to Payments related transactions.")
public class PaymentsContext {
    @SerializedName("paymentType")
    private String paymentType = null;

    @SerializedName("paymentMethod")
    private String paymentMethod = null;

    @SerializedName("paymentReference")
    private String paymentReference = null;

    @SerializedName("paymentDate")
    private OffsetDateTime paymentDate = null;

    public PaymentsContext paymentType(String paymentType) {
        this.paymentType = paymentType;
        return this;
    }

    /**
     * Type of payment made.
     *
     * @return paymentType
     */
    @Schema(description = "Type of payment made.")
    public String getPaymentType() {
        return paymentType;
    }

    public void setPaymentType(String paymentType) {
        this.paymentType = paymentType;
    }

    public PaymentsContext paymentMethod(String paymentMethod) {
        this.paymentMethod = paymentMethod;
        return this;
    }

    /**
     * Method of payment made.
     *
     * @return paymentMethod
     */
    @Schema(description = "Method of payment made.")
    public String getPaymentMethod() {
        return paymentMethod;
    }

    public void setPaymentMethod(String paymentMethod) {
        this.paymentMethod = paymentMethod;
    }

    public PaymentsContext paymentReference(String paymentReference) {
        this.paymentReference = paymentReference;
        return this;
    }

    /**
     * Reference number of payment made.
     *
     * @return paymentReference
     */
    @Schema(description = "Reference number of payment made.")
    public String getPaymentReference() {
        return paymentReference;
    }

    public void setPaymentReference(String paymentReference) {
        this.paymentReference = paymentReference;
    }

    public PaymentsContext paymentDate(OffsetDateTime paymentDate) {
        this.paymentDate = paymentDate;
        return this;
    }

    /**
     * Get paymentDate
     *
     * @return paymentDate
     */
    @Schema(description = "")
    public OffsetDateTime getPaymentDate() {
        return paymentDate;
    }

    public void setPaymentDate(OffsetDateTime paymentDate) {
        this.paymentDate = paymentDate;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PaymentsContext paymentsContext = (PaymentsContext) o;
        return Objects.equals(this.paymentType, paymentsContext.paymentType)
                && Objects.equals(this.paymentMethod, paymentsContext.paymentMethod)
                && Objects.equals(this.paymentReference, paymentsContext.paymentReference)
                && Objects.equals(this.paymentDate, paymentsContext.paymentDate);
    }

    @Override
    public int hashCode() {
        return Objects.hash(paymentType, paymentMethod, paymentReference, paymentDate);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class PaymentsContext {\n");

        sb.append("    paymentType: ").append(toIndentedString(paymentType)).append("\n");
        sb.append("    paymentMethod: ").append(toIndentedString(paymentMethod)).append("\n");
        sb.append("    paymentReference: ")
                .append(toIndentedString(paymentReference))
                .append("\n");
        sb.append("    paymentDate: ").append(toIndentedString(paymentDate)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /** Convert the given object to string with each line indented by 4 spaces (except the first line). */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }
}
