/*
 * The Selling Partner API for Finances
 * The Selling Partner API for Finances helps you obtain financial information relevant to a seller's business. You can obtain financial events for a given order or date range without having to wait until a statement period closes.
 *
 * OpenAPI spec version: 2024-06-19
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package software.amazon.spapi.models.finances.v2024_06_19;

import com.google.gson.annotations.SerializedName;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * Breakdown provides details regarding the money movement under the financial transaction. Breakdowns get categorized
 * further into breakdown types, breakdown amounts, and further breakdowns into a hierarchical structure.
 */
@Schema(
        description =
                "Breakdown provides details regarding the money movement under the financial transaction. Breakdowns get categorized further into breakdown types, breakdown amounts, and further breakdowns into a hierarchical structure.")
public class Breakdown {
    @SerializedName("breakdownType")
    private String breakdownType = null;

    @SerializedName("breakdownAmount")
    private Currency breakdownAmount = null;

    @SerializedName("breakdowns")
    private List<Breakdown> breakdowns = null;

    public Breakdown breakdownType(String breakdownType) {
        this.breakdownType = breakdownType;
        return this;
    }

    /**
     * The type of charge.
     *
     * @return breakdownType
     */
    @Schema(description = "The type of charge.")
    public String getBreakdownType() {
        return breakdownType;
    }

    public void setBreakdownType(String breakdownType) {
        this.breakdownType = breakdownType;
    }

    public Breakdown breakdownAmount(Currency breakdownAmount) {
        this.breakdownAmount = breakdownAmount;
        return this;
    }

    /**
     * Get breakdownAmount
     *
     * @return breakdownAmount
     */
    @Schema(description = "")
    public Currency getBreakdownAmount() {
        return breakdownAmount;
    }

    public void setBreakdownAmount(Currency breakdownAmount) {
        this.breakdownAmount = breakdownAmount;
    }

    public Breakdown breakdowns(List<Breakdown> breakdowns) {
        this.breakdowns = breakdowns;
        return this;
    }

    public Breakdown addBreakdownsItem(Breakdown breakdownsItem) {
        if (this.breakdowns == null) {
            this.breakdowns = new ArrayList<>();
        }
        this.breakdowns.add(breakdownsItem);
        return this;
    }

    /**
     * A list of breakdowns that detail how the total amount is calculated for the transaction.
     *
     * @return breakdowns
     */
    @Schema(description = "A list of breakdowns that detail how the total amount is calculated for the transaction.")
    public List<Breakdown> getBreakdowns() {
        return breakdowns;
    }

    public void setBreakdowns(List<Breakdown> breakdowns) {
        this.breakdowns = breakdowns;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Breakdown breakdown = (Breakdown) o;
        return Objects.equals(this.breakdownType, breakdown.breakdownType)
                && Objects.equals(this.breakdownAmount, breakdown.breakdownAmount)
                && Objects.equals(this.breakdowns, breakdown.breakdowns);
    }

    @Override
    public int hashCode() {
        return Objects.hash(breakdownType, breakdownAmount, breakdowns);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class Breakdown {\n");

        sb.append("    breakdownType: ").append(toIndentedString(breakdownType)).append("\n");
        sb.append("    breakdownAmount: ")
                .append(toIndentedString(breakdownAmount))
                .append("\n");
        sb.append("    breakdowns: ").append(toIndentedString(breakdowns)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /** Convert the given object to string with each line indented by 4 spaces (except the first line). */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }
}
