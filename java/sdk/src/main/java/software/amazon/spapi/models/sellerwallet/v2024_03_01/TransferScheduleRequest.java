/*
 * The Selling Partner API for Amazon Seller Wallet Open Banking API
 * The Selling Partner API for Seller Wallet (Seller Wallet API) provides financial information that is relevant to a seller's Seller Wallet account. You can obtain financial events, balances, and transfer schedules for Seller Wallet accounts. You can also schedule and initiate transactions.
 *
 * OpenAPI spec version: 2024-03-01
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package software.amazon.spapi.models.sellerwallet.v2024_03_01;

import com.google.gson.annotations.SerializedName;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.Objects;

/** Request body to initiate a scheduled transfer from a SW bank account to another customer defined bank account */
@Schema(
        description =
                "Request body to initiate a scheduled transfer from a SW bank account to another customer defined bank account ")
public class TransferScheduleRequest {
    @SerializedName("sourceAccountId")
    private String sourceAccountId = null;

    @SerializedName("sourceCurrencyCode")
    private String sourceCurrencyCode = null;

    @SerializedName("destinationAccountId")
    private String destinationAccountId = null;

    @SerializedName("destinationTransactionInstrument")
    private TransactionInstrumentDetails destinationTransactionInstrument = null;

    @SerializedName("transactionType")
    private TransactionType transactionType = null;

    @SerializedName("transferScheduleInformation")
    private TransferScheduleInformation transferScheduleInformation = null;

    @SerializedName("paymentPreference")
    private PaymentPreference paymentPreference = null;

    @SerializedName("transferScheduleStatus")
    private TransferScheduleStatus transferScheduleStatus = null;

    public TransferScheduleRequest sourceAccountId(String sourceAccountId) {
        this.sourceAccountId = sourceAccountId;
        return this;
    }

    /**
     * The unique identifier of the source Amazon SW bank account from where the money needs to be debited
     *
     * @return sourceAccountId
     */
    @Schema(
            example = "amzn1.account.SMUGN2EN3ZHWSRJKH2KCJPII5JEI",
            required = true,
            description =
                    "The unique identifier of the source Amazon SW bank account from where the money needs to be debited ")
    public String getSourceAccountId() {
        return sourceAccountId;
    }

    public void setSourceAccountId(String sourceAccountId) {
        this.sourceAccountId = sourceAccountId;
    }

    public TransferScheduleRequest sourceCurrencyCode(String sourceCurrencyCode) {
        this.sourceCurrencyCode = sourceCurrencyCode;
        return this;
    }

    /**
     * Represents 3 letter currency code in ISO 4217 standard format of the source payment method country
     *
     * @return sourceCurrencyCode
     */
    @Schema(
            example = "GBP",
            required = true,
            description =
                    "Represents 3 letter currency code in ISO 4217 standard format of the source payment method country ")
    public String getSourceCurrencyCode() {
        return sourceCurrencyCode;
    }

    public void setSourceCurrencyCode(String sourceCurrencyCode) {
        this.sourceCurrencyCode = sourceCurrencyCode;
    }

    public TransferScheduleRequest destinationAccountId(String destinationAccountId) {
        this.destinationAccountId = destinationAccountId;
        return this;
    }

    /**
     * Optional field to specify the unique identifier of the destination bank account where the money needs to be
     * deposited
     *
     * @return destinationAccountId
     */
    @Schema(
            example = "amzn1.account.AJKBFWEJFBNH2KCJPII5FBN",
            required = true,
            description =
                    "Optional field to specify the unique identifier of the destination bank account where the money needs to be deposited ")
    public String getDestinationAccountId() {
        return destinationAccountId;
    }

    public void setDestinationAccountId(String destinationAccountId) {
        this.destinationAccountId = destinationAccountId;
    }

    public TransferScheduleRequest destinationTransactionInstrument(
            TransactionInstrumentDetails destinationTransactionInstrument) {
        this.destinationTransactionInstrument = destinationTransactionInstrument;
        return this;
    }

    /**
     * Get destinationTransactionInstrument
     *
     * @return destinationTransactionInstrument
     */
    @Schema(required = true, description = "")
    public TransactionInstrumentDetails getDestinationTransactionInstrument() {
        return destinationTransactionInstrument;
    }

    public void setDestinationTransactionInstrument(TransactionInstrumentDetails destinationTransactionInstrument) {
        this.destinationTransactionInstrument = destinationTransactionInstrument;
    }

    public TransferScheduleRequest transactionType(TransactionType transactionType) {
        this.transactionType = transactionType;
        return this;
    }

    /**
     * Get transactionType
     *
     * @return transactionType
     */
    @Schema(required = true, description = "")
    public TransactionType getTransactionType() {
        return transactionType;
    }

    public void setTransactionType(TransactionType transactionType) {
        this.transactionType = transactionType;
    }

    public TransferScheduleRequest transferScheduleInformation(
            TransferScheduleInformation transferScheduleInformation) {
        this.transferScheduleInformation = transferScheduleInformation;
        return this;
    }

    /**
     * Get transferScheduleInformation
     *
     * @return transferScheduleInformation
     */
    @Schema(required = true, description = "")
    public TransferScheduleInformation getTransferScheduleInformation() {
        return transferScheduleInformation;
    }

    public void setTransferScheduleInformation(TransferScheduleInformation transferScheduleInformation) {
        this.transferScheduleInformation = transferScheduleInformation;
    }

    public TransferScheduleRequest paymentPreference(PaymentPreference paymentPreference) {
        this.paymentPreference = paymentPreference;
        return this;
    }

    /**
     * Get paymentPreference
     *
     * @return paymentPreference
     */
    @Schema(required = true, description = "")
    public PaymentPreference getPaymentPreference() {
        return paymentPreference;
    }

    public void setPaymentPreference(PaymentPreference paymentPreference) {
        this.paymentPreference = paymentPreference;
    }

    public TransferScheduleRequest transferScheduleStatus(TransferScheduleStatus transferScheduleStatus) {
        this.transferScheduleStatus = transferScheduleStatus;
        return this;
    }

    /**
     * Get transferScheduleStatus
     *
     * @return transferScheduleStatus
     */
    @Schema(description = "")
    public TransferScheduleStatus getTransferScheduleStatus() {
        return transferScheduleStatus;
    }

    public void setTransferScheduleStatus(TransferScheduleStatus transferScheduleStatus) {
        this.transferScheduleStatus = transferScheduleStatus;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TransferScheduleRequest transferScheduleRequest = (TransferScheduleRequest) o;
        return Objects.equals(this.sourceAccountId, transferScheduleRequest.sourceAccountId)
                && Objects.equals(this.sourceCurrencyCode, transferScheduleRequest.sourceCurrencyCode)
                && Objects.equals(this.destinationAccountId, transferScheduleRequest.destinationAccountId)
                && Objects.equals(
                        this.destinationTransactionInstrument, transferScheduleRequest.destinationTransactionInstrument)
                && Objects.equals(this.transactionType, transferScheduleRequest.transactionType)
                && Objects.equals(this.transferScheduleInformation, transferScheduleRequest.transferScheduleInformation)
                && Objects.equals(this.paymentPreference, transferScheduleRequest.paymentPreference)
                && Objects.equals(this.transferScheduleStatus, transferScheduleRequest.transferScheduleStatus);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                sourceAccountId,
                sourceCurrencyCode,
                destinationAccountId,
                destinationTransactionInstrument,
                transactionType,
                transferScheduleInformation,
                paymentPreference,
                transferScheduleStatus);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class TransferScheduleRequest {\n");

        sb.append("    sourceAccountId: ")
                .append(toIndentedString(sourceAccountId))
                .append("\n");
        sb.append("    sourceCurrencyCode: ")
                .append(toIndentedString(sourceCurrencyCode))
                .append("\n");
        sb.append("    destinationAccountId: ")
                .append(toIndentedString(destinationAccountId))
                .append("\n");
        sb.append("    destinationTransactionInstrument: ")
                .append(toIndentedString(destinationTransactionInstrument))
                .append("\n");
        sb.append("    transactionType: ")
                .append(toIndentedString(transactionType))
                .append("\n");
        sb.append("    transferScheduleInformation: ")
                .append(toIndentedString(transferScheduleInformation))
                .append("\n");
        sb.append("    paymentPreference: ")
                .append(toIndentedString(paymentPreference))
                .append("\n");
        sb.append("    transferScheduleStatus: ")
                .append(toIndentedString(transferScheduleStatus))
                .append("\n");
        sb.append("}");
        return sb.toString();
    }

    /** Convert the given object to string with each line indented by 4 spaces (except the first line). */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }
}
