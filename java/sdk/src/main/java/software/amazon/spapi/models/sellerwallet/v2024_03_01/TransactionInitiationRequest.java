/*
 * The Selling Partner API for Amazon Seller Wallet Open Banking API
 * The Selling Partner API for Seller Wallet (Seller Wallet API) provides financial information that is relevant to a seller's Seller Wallet account. You can obtain financial events, balances, and transfer schedules for Seller Wallet accounts. You can also schedule and initiate transactions.
 *
 * OpenAPI spec version: 2024-03-01
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package software.amazon.spapi.models.sellerwallet.v2024_03_01;

import com.google.gson.annotations.SerializedName;
import io.swagger.v3.oas.annotations.media.Schema;
import java.time.OffsetDateTime;
import java.util.Objects;

/** Request body to initiate a transaction from a SW bank account to another customer defined bank account */
@Schema(
        description =
                "Request body to initiate a transaction from a SW bank account to another customer defined bank account ")
public class TransactionInitiationRequest {
    @SerializedName("sourceAccountId")
    private String sourceAccountId = null;

    @SerializedName("destinationAccountId")
    private String destinationAccountId = null;

    @SerializedName("description")
    private String description = null;

    @SerializedName("destinationTransactionInstrument")
    private TransactionInstrumentDetails destinationTransactionInstrument = null;

    @SerializedName("destinationAccountHolderAddress")
    private AccountHolderAddress destinationAccountHolderAddress = null;

    @SerializedName("sourceAmount")
    private Currency sourceAmount = null;

    @SerializedName("transferRateDetails")
    private TransferRatePreview transferRateDetails = null;

    @SerializedName("requestTime")
    private OffsetDateTime requestTime = null;

    public TransactionInitiationRequest sourceAccountId(String sourceAccountId) {
        this.sourceAccountId = sourceAccountId;
        return this;
    }

    /**
     * The unique identifier of the source Amazon SW bank account from where the money needs to be debited
     *
     * @return sourceAccountId
     */
    @Schema(
            example = "amzn1.account.SMUGN2EN3ZHWSRJKH2KCJPII5JEI",
            required = true,
            description =
                    "The unique identifier of the source Amazon SW bank account from where the money needs to be debited ")
    public String getSourceAccountId() {
        return sourceAccountId;
    }

    public void setSourceAccountId(String sourceAccountId) {
        this.sourceAccountId = sourceAccountId;
    }

    public TransactionInitiationRequest destinationAccountId(String destinationAccountId) {
        this.destinationAccountId = destinationAccountId;
        return this;
    }

    /**
     * Optional field to specify the unique identifier of the destination bank account where the money needs to be
     * deposited
     *
     * @return destinationAccountId
     */
    @Schema(
            example = "amzn1.account.AJKBFWEJFBNH2KCJPII5FBN",
            description =
                    "Optional field to specify the unique identifier of the destination bank account where the money needs to be deposited ")
    public String getDestinationAccountId() {
        return destinationAccountId;
    }

    public void setDestinationAccountId(String destinationAccountId) {
        this.destinationAccountId = destinationAccountId;
    }

    public TransactionInitiationRequest description(String description) {
        this.description = description;
        return this;
    }

    /**
     * Optional field to specify description for the transaction
     *
     * @return description
     */
    @Schema(
            example = "Payment to the delivery partner",
            required = true,
            description = "Optional field to specify description for the transaction ")
    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public TransactionInitiationRequest destinationTransactionInstrument(
            TransactionInstrumentDetails destinationTransactionInstrument) {
        this.destinationTransactionInstrument = destinationTransactionInstrument;
        return this;
    }

    /**
     * Get destinationTransactionInstrument
     *
     * @return destinationTransactionInstrument
     */
    @Schema(required = true, description = "")
    public TransactionInstrumentDetails getDestinationTransactionInstrument() {
        return destinationTransactionInstrument;
    }

    public void setDestinationTransactionInstrument(TransactionInstrumentDetails destinationTransactionInstrument) {
        this.destinationTransactionInstrument = destinationTransactionInstrument;
    }

    public TransactionInitiationRequest destinationAccountHolderAddress(
            AccountHolderAddress destinationAccountHolderAddress) {
        this.destinationAccountHolderAddress = destinationAccountHolderAddress;
        return this;
    }

    /**
     * Get destinationAccountHolderAddress
     *
     * @return destinationAccountHolderAddress
     */
    @Schema(description = "")
    public AccountHolderAddress getDestinationAccountHolderAddress() {
        return destinationAccountHolderAddress;
    }

    public void setDestinationAccountHolderAddress(AccountHolderAddress destinationAccountHolderAddress) {
        this.destinationAccountHolderAddress = destinationAccountHolderAddress;
    }

    public TransactionInitiationRequest sourceAmount(Currency sourceAmount) {
        this.sourceAmount = sourceAmount;
        return this;
    }

    /**
     * Get sourceAmount
     *
     * @return sourceAmount
     */
    @Schema(required = true, description = "")
    public Currency getSourceAmount() {
        return sourceAmount;
    }

    public void setSourceAmount(Currency sourceAmount) {
        this.sourceAmount = sourceAmount;
    }

    public TransactionInitiationRequest transferRateDetails(TransferRatePreview transferRateDetails) {
        this.transferRateDetails = transferRateDetails;
        return this;
    }

    /**
     * Get transferRateDetails
     *
     * @return transferRateDetails
     */
    @Schema(description = "")
    public TransferRatePreview getTransferRateDetails() {
        return transferRateDetails;
    }

    public void setTransferRateDetails(TransferRatePreview transferRateDetails) {
        this.transferRateDetails = transferRateDetails;
    }

    public TransactionInitiationRequest requestTime(OffsetDateTime requestTime) {
        this.requestTime = requestTime;
        return this;
    }

    /**
     * The transaction initiation request time in date-time format
     *
     * @return requestTime
     */
    @Schema(
            example = "2024-03-26T02:32:59.787Z",
            required = true,
            description = "The transaction initiation request time in date-time format ")
    public OffsetDateTime getRequestTime() {
        return requestTime;
    }

    public void setRequestTime(OffsetDateTime requestTime) {
        this.requestTime = requestTime;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TransactionInitiationRequest transactionInitiationRequest = (TransactionInitiationRequest) o;
        return Objects.equals(this.sourceAccountId, transactionInitiationRequest.sourceAccountId)
                && Objects.equals(this.destinationAccountId, transactionInitiationRequest.destinationAccountId)
                && Objects.equals(this.description, transactionInitiationRequest.description)
                && Objects.equals(
                        this.destinationTransactionInstrument,
                        transactionInitiationRequest.destinationTransactionInstrument)
                && Objects.equals(
                        this.destinationAccountHolderAddress,
                        transactionInitiationRequest.destinationAccountHolderAddress)
                && Objects.equals(this.sourceAmount, transactionInitiationRequest.sourceAmount)
                && Objects.equals(this.transferRateDetails, transactionInitiationRequest.transferRateDetails)
                && Objects.equals(this.requestTime, transactionInitiationRequest.requestTime);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                sourceAccountId,
                destinationAccountId,
                description,
                destinationTransactionInstrument,
                destinationAccountHolderAddress,
                sourceAmount,
                transferRateDetails,
                requestTime);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class TransactionInitiationRequest {\n");

        sb.append("    sourceAccountId: ")
                .append(toIndentedString(sourceAccountId))
                .append("\n");
        sb.append("    destinationAccountId: ")
                .append(toIndentedString(destinationAccountId))
                .append("\n");
        sb.append("    description: ").append(toIndentedString(description)).append("\n");
        sb.append("    destinationTransactionInstrument: ")
                .append(toIndentedString(destinationTransactionInstrument))
                .append("\n");
        sb.append("    destinationAccountHolderAddress: ")
                .append(toIndentedString(destinationAccountHolderAddress))
                .append("\n");
        sb.append("    sourceAmount: ").append(toIndentedString(sourceAmount)).append("\n");
        sb.append("    transferRateDetails: ")
                .append(toIndentedString(transferRateDetails))
                .append("\n");
        sb.append("    requestTime: ").append(toIndentedString(requestTime)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /** Convert the given object to string with each line indented by 4 spaces (except the first line). */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }
}
