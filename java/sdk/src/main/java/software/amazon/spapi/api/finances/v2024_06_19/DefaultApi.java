/*
 * The Selling Partner API for Finances
 * The Selling Partner API for Finances helps you obtain financial information relevant to a seller's business. You can obtain financial events for a given order or date range without having to wait until a statement period closes.
 *
 * OpenAPI spec version: 2024-06-19
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package software.amazon.spapi.api.finances.v2024_06_19;

import com.amazon.SellingPartnerAPIAA.LWAAccessTokenCache;
import com.amazon.SellingPartnerAPIAA.LWAAccessTokenCacheImpl;
import com.amazon.SellingPartnerAPIAA.LWAAuthorizationCredentials;
import com.amazon.SellingPartnerAPIAA.LWAAuthorizationSigner;
import com.amazon.SellingPartnerAPIAA.LWAException;
import com.amazon.SellingPartnerAPIAA.RestrictedDataTokenSigner;
import com.google.gson.reflect.TypeToken;
import io.github.bucket4j.Bucket;
import java.lang.reflect.Type;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import software.amazon.spapi.ApiCallback;
import software.amazon.spapi.ApiClient;
import software.amazon.spapi.ApiException;
import software.amazon.spapi.ApiResponse;
import software.amazon.spapi.Configuration;
import software.amazon.spapi.Pair;
import software.amazon.spapi.ProgressRequestBody;
import software.amazon.spapi.StringUtil;
import software.amazon.spapi.models.finances.v2024_06_19.ListTransactionsResponse;

public class DefaultApi {
    private ApiClient apiClient;
    private Boolean disableRateLimiting;

    public DefaultApi(ApiClient apiClient, Boolean disableRateLimiting) {
        this.apiClient = apiClient;
        this.disableRateLimiting = disableRateLimiting;
    }

    private final Configuration config = Configuration.get();

    public final Bucket listTransactionsBucket = Bucket.builder()
            .addLimit(config.getLimit("DefaultApi-listTransactions"))
            .build();

    /**
     * Build call for listTransactions
     *
     * @param postedAfter The response includes financial events posted on or after this date. This date must be in [ISO
     *     8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format. The date-time must be more
     *     than two minutes before the time of the request. (required)
     * @param postedBefore A date used for selecting transactions posted before (but not at) a specified time. The
     *     date-time must be later than PostedAfter and no later than two minutes before the request was submitted, in
     *     ISO 8601 date time format. If PostedAfter and PostedBefore are more than 180 days apart, no transactions are
     *     returned. You must specify the PostedAfter parameter if you specify the PostedBefore parameter. Default: Now
     *     minus two minutes. (optional)
     * @param marketplaceId The identifier of the marketplace from which you want to retrieve transactions. The
     *     marketplace ID is the globally unique identifier of a marketplace. To find the ID for your marketplace, refer
     *     to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids). (optional)
     * @param transactionStatus The status of the transaction. **Possible values:** * &#x60;DEFERRED&#x60;: the
     *     transaction is currently deferred. * &#x60;RELEASED&#x60;: the transaction is currently released. *
     *     &#x60;DEFERRED_RELEASED&#x60;: the transaction was deferred in the past, but is now released. The status of a
     *     deferred transaction is updated to &#x60;DEFERRED_RELEASED&#x60; when the transaction is released. (optional)
     * @param nextToken A string token returned in the response of your previous request. (optional)
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    private okhttp3.Call listTransactionsCall(
            OffsetDateTime postedAfter,
            OffsetDateTime postedBefore,
            String marketplaceId,
            String transactionStatus,
            String nextToken,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/finances/2024-06-19/transactions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (postedAfter != null) localVarQueryParams.addAll(apiClient.parameterToPair("postedAfter", postedAfter));
        if (postedBefore != null) localVarQueryParams.addAll(apiClient.parameterToPair("postedBefore", postedBefore));
        if (marketplaceId != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("marketplaceId", marketplaceId));
        if (transactionStatus != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("transactionStatus", transactionStatus));
        if (nextToken != null) localVarQueryParams.addAll(apiClient.parameterToPair("nextToken", nextToken));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {};

        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        return apiClient.buildCall(
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                progressRequestListener);
    }

    private okhttp3.Call listTransactionsValidateBeforeCall(
            OffsetDateTime postedAfter,
            OffsetDateTime postedBefore,
            String marketplaceId,
            String transactionStatus,
            String nextToken,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        // verify the required parameter 'postedAfter' is set
        if (postedAfter == null) {
            throw new ApiException("Missing the required parameter 'postedAfter' when calling listTransactions(Async)");
        }

        return listTransactionsCall(
                postedAfter, postedBefore, marketplaceId, transactionStatus, nextToken, progressRequestListener);
    }

    /**
     * Returns transactions for the given parameters. Financial events might not include orders from the last 48 hours.
     * **Usage plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 0.5 | 10 | The
     * &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the
     * requested operation, when available. The preceding table contains the default rate and burst values for this
     * operation. Selling partners whose business demands require higher throughput may have higher rate and burst
     * values than those shown here. For more information, refer to [Usage Plans and Rate
     * Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits).
     *
     * @param postedAfter The response includes financial events posted on or after this date. This date must be in [ISO
     *     8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format. The date-time must be more
     *     than two minutes before the time of the request. (required)
     * @param postedBefore A date used for selecting transactions posted before (but not at) a specified time. The
     *     date-time must be later than PostedAfter and no later than two minutes before the request was submitted, in
     *     ISO 8601 date time format. If PostedAfter and PostedBefore are more than 180 days apart, no transactions are
     *     returned. You must specify the PostedAfter parameter if you specify the PostedBefore parameter. Default: Now
     *     minus two minutes. (optional)
     * @param marketplaceId The identifier of the marketplace from which you want to retrieve transactions. The
     *     marketplace ID is the globally unique identifier of a marketplace. To find the ID for your marketplace, refer
     *     to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids). (optional)
     * @param transactionStatus The status of the transaction. **Possible values:** * &#x60;DEFERRED&#x60;: the
     *     transaction is currently deferred. * &#x60;RELEASED&#x60;: the transaction is currently released. *
     *     &#x60;DEFERRED_RELEASED&#x60;: the transaction was deferred in the past, but is now released. The status of a
     *     deferred transaction is updated to &#x60;DEFERRED_RELEASED&#x60; when the transaction is released. (optional)
     * @param nextToken A string token returned in the response of your previous request. (optional)
     * @param restrictedDataToken Restricted Data Token (optional)
     * @return ListTransactionsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ListTransactionsResponse listTransactions(
            OffsetDateTime postedAfter,
            OffsetDateTime postedBefore,
            String marketplaceId,
            String transactionStatus,
            String nextToken,
            String restrictedDataToken)
            throws ApiException, LWAException {
        ApiResponse<ListTransactionsResponse> resp = listTransactionsWithHttpInfo(
                postedAfter, postedBefore, marketplaceId, transactionStatus, nextToken, restrictedDataToken);
        return resp.getData();
    }

    /**
     * Returns transactions for the given parameters. Financial events might not include orders from the last 48 hours.
     * **Usage plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 0.5 | 10 | The
     * &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the
     * requested operation, when available. The preceding table contains the default rate and burst values for this
     * operation. Selling partners whose business demands require higher throughput may have higher rate and burst
     * values than those shown here. For more information, refer to [Usage Plans and Rate
     * Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits).
     *
     * @param postedAfter The response includes financial events posted on or after this date. This date must be in [ISO
     *     8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format. The date-time must be more
     *     than two minutes before the time of the request. (required)
     * @param postedBefore A date used for selecting transactions posted before (but not at) a specified time. The
     *     date-time must be later than PostedAfter and no later than two minutes before the request was submitted, in
     *     ISO 8601 date time format. If PostedAfter and PostedBefore are more than 180 days apart, no transactions are
     *     returned. You must specify the PostedAfter parameter if you specify the PostedBefore parameter. Default: Now
     *     minus two minutes. (optional)
     * @param marketplaceId The identifier of the marketplace from which you want to retrieve transactions. The
     *     marketplace ID is the globally unique identifier of a marketplace. To find the ID for your marketplace, refer
     *     to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids). (optional)
     * @param transactionStatus The status of the transaction. **Possible values:** * &#x60;DEFERRED&#x60;: the
     *     transaction is currently deferred. * &#x60;RELEASED&#x60;: the transaction is currently released. *
     *     &#x60;DEFERRED_RELEASED&#x60;: the transaction was deferred in the past, but is now released. The status of a
     *     deferred transaction is updated to &#x60;DEFERRED_RELEASED&#x60; when the transaction is released. (optional)
     * @param nextToken A string token returned in the response of your previous request. (optional)
     * @return ListTransactionsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ListTransactionsResponse listTransactions(
            OffsetDateTime postedAfter,
            OffsetDateTime postedBefore,
            String marketplaceId,
            String transactionStatus,
            String nextToken)
            throws ApiException, LWAException {
        ApiResponse<ListTransactionsResponse> resp = listTransactionsWithHttpInfo(
                postedAfter, postedBefore, marketplaceId, transactionStatus, nextToken, null);
        return resp.getData();
    }

    /**
     * Returns transactions for the given parameters. Financial events might not include orders from the last 48 hours.
     * **Usage plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 0.5 | 10 | The
     * &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the
     * requested operation, when available. The preceding table contains the default rate and burst values for this
     * operation. Selling partners whose business demands require higher throughput may have higher rate and burst
     * values than those shown here. For more information, refer to [Usage Plans and Rate
     * Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits).
     *
     * @param postedAfter The response includes financial events posted on or after this date. This date must be in [ISO
     *     8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format. The date-time must be more
     *     than two minutes before the time of the request. (required)
     * @param postedBefore A date used for selecting transactions posted before (but not at) a specified time. The
     *     date-time must be later than PostedAfter and no later than two minutes before the request was submitted, in
     *     ISO 8601 date time format. If PostedAfter and PostedBefore are more than 180 days apart, no transactions are
     *     returned. You must specify the PostedAfter parameter if you specify the PostedBefore parameter. Default: Now
     *     minus two minutes. (optional)
     * @param marketplaceId The identifier of the marketplace from which you want to retrieve transactions. The
     *     marketplace ID is the globally unique identifier of a marketplace. To find the ID for your marketplace, refer
     *     to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids). (optional)
     * @param transactionStatus The status of the transaction. **Possible values:** * &#x60;DEFERRED&#x60;: the
     *     transaction is currently deferred. * &#x60;RELEASED&#x60;: the transaction is currently released. *
     *     &#x60;DEFERRED_RELEASED&#x60;: the transaction was deferred in the past, but is now released. The status of a
     *     deferred transaction is updated to &#x60;DEFERRED_RELEASED&#x60; when the transaction is released. (optional)
     * @param nextToken A string token returned in the response of your previous request. (optional)
     * @param restrictedDataToken Restricted Data Token (optional)
     * @return ApiResponse&lt;ListTransactionsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<ListTransactionsResponse> listTransactionsWithHttpInfo(
            OffsetDateTime postedAfter,
            OffsetDateTime postedBefore,
            String marketplaceId,
            String transactionStatus,
            String nextToken,
            String restrictedDataToken)
            throws ApiException, LWAException {
        okhttp3.Call call = listTransactionsValidateBeforeCall(
                postedAfter, postedBefore, marketplaceId, transactionStatus, nextToken, null);

        if (restrictedDataToken != null) {
            okhttp3.Request request = call.request();
            request = RestrictedDataTokenSigner.sign(request, restrictedDataToken, "DefaultApi-listTransactions");
            call = apiClient.getHttpClient().newCall(request);
        }

        if (disableRateLimiting || listTransactionsBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<ListTransactionsResponse>() {}.getType();
            return apiClient.execute(call, localVarReturnType);
        } else throw new ApiException.RateLimitExceeded("listTransactions operation exceeds rate limit");
    }

    /**
     * Returns transactions for the given parameters. Financial events might not include orders from the last 48 hours.
     * **Usage plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 0.5 | 10 | The
     * &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the
     * requested operation, when available. The preceding table contains the default rate and burst values for this
     * operation. Selling partners whose business demands require higher throughput may have higher rate and burst
     * values than those shown here. For more information, refer to [Usage Plans and Rate
     * Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits).
     *
     * @param postedAfter The response includes financial events posted on or after this date. This date must be in [ISO
     *     8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format. The date-time must be more
     *     than two minutes before the time of the request. (required)
     * @param postedBefore A date used for selecting transactions posted before (but not at) a specified time. The
     *     date-time must be later than PostedAfter and no later than two minutes before the request was submitted, in
     *     ISO 8601 date time format. If PostedAfter and PostedBefore are more than 180 days apart, no transactions are
     *     returned. You must specify the PostedAfter parameter if you specify the PostedBefore parameter. Default: Now
     *     minus two minutes. (optional)
     * @param marketplaceId The identifier of the marketplace from which you want to retrieve transactions. The
     *     marketplace ID is the globally unique identifier of a marketplace. To find the ID for your marketplace, refer
     *     to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids). (optional)
     * @param transactionStatus The status of the transaction. **Possible values:** * &#x60;DEFERRED&#x60;: the
     *     transaction is currently deferred. * &#x60;RELEASED&#x60;: the transaction is currently released. *
     *     &#x60;DEFERRED_RELEASED&#x60;: the transaction was deferred in the past, but is now released. The status of a
     *     deferred transaction is updated to &#x60;DEFERRED_RELEASED&#x60; when the transaction is released. (optional)
     * @param nextToken A string token returned in the response of your previous request. (optional)
     * @return ApiResponse&lt;ListTransactionsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<ListTransactionsResponse> listTransactionsWithHttpInfo(
            OffsetDateTime postedAfter,
            OffsetDateTime postedBefore,
            String marketplaceId,
            String transactionStatus,
            String nextToken)
            throws ApiException, LWAException {
        return listTransactionsWithHttpInfo(
                postedAfter, postedBefore, marketplaceId, transactionStatus, nextToken, null);
    }

    /**
     * (asynchronously) Returns transactions for the given parameters. Financial events might not include orders from
     * the last 48 hours. **Usage plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 0.5 | 10 | The
     * &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the
     * requested operation, when available. The preceding table contains the default rate and burst values for this
     * operation. Selling partners whose business demands require higher throughput may have higher rate and burst
     * values than those shown here. For more information, refer to [Usage Plans and Rate
     * Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits).
     *
     * @param postedAfter The response includes financial events posted on or after this date. This date must be in [ISO
     *     8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format. The date-time must be more
     *     than two minutes before the time of the request. (required)
     * @param postedBefore A date used for selecting transactions posted before (but not at) a specified time. The
     *     date-time must be later than PostedAfter and no later than two minutes before the request was submitted, in
     *     ISO 8601 date time format. If PostedAfter and PostedBefore are more than 180 days apart, no transactions are
     *     returned. You must specify the PostedAfter parameter if you specify the PostedBefore parameter. Default: Now
     *     minus two minutes. (optional)
     * @param marketplaceId The identifier of the marketplace from which you want to retrieve transactions. The
     *     marketplace ID is the globally unique identifier of a marketplace. To find the ID for your marketplace, refer
     *     to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids). (optional)
     * @param transactionStatus The status of the transaction. **Possible values:** * &#x60;DEFERRED&#x60;: the
     *     transaction is currently deferred. * &#x60;RELEASED&#x60;: the transaction is currently released. *
     *     &#x60;DEFERRED_RELEASED&#x60;: the transaction was deferred in the past, but is now released. The status of a
     *     deferred transaction is updated to &#x60;DEFERRED_RELEASED&#x60; when the transaction is released. (optional)
     * @param nextToken A string token returned in the response of your previous request. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call listTransactionsAsync(
            OffsetDateTime postedAfter,
            OffsetDateTime postedBefore,
            String marketplaceId,
            String transactionStatus,
            String nextToken,
            final ApiCallback<ListTransactionsResponse> callback)
            throws ApiException, LWAException {
        return listTransactionsAsync(
                postedAfter, postedBefore, marketplaceId, transactionStatus, nextToken, callback, null);
    }
    /**
     * (asynchronously) Returns transactions for the given parameters. Financial events might not include orders from
     * the last 48 hours. **Usage plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 0.5 | 10 | The
     * &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the
     * requested operation, when available. The preceding table contains the default rate and burst values for this
     * operation. Selling partners whose business demands require higher throughput may have higher rate and burst
     * values than those shown here. For more information, refer to [Usage Plans and Rate
     * Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits).
     *
     * @param postedAfter The response includes financial events posted on or after this date. This date must be in [ISO
     *     8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format. The date-time must be more
     *     than two minutes before the time of the request. (required)
     * @param postedBefore A date used for selecting transactions posted before (but not at) a specified time. The
     *     date-time must be later than PostedAfter and no later than two minutes before the request was submitted, in
     *     ISO 8601 date time format. If PostedAfter and PostedBefore are more than 180 days apart, no transactions are
     *     returned. You must specify the PostedAfter parameter if you specify the PostedBefore parameter. Default: Now
     *     minus two minutes. (optional)
     * @param marketplaceId The identifier of the marketplace from which you want to retrieve transactions. The
     *     marketplace ID is the globally unique identifier of a marketplace. To find the ID for your marketplace, refer
     *     to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids). (optional)
     * @param transactionStatus The status of the transaction. **Possible values:** * &#x60;DEFERRED&#x60;: the
     *     transaction is currently deferred. * &#x60;RELEASED&#x60;: the transaction is currently released. *
     *     &#x60;DEFERRED_RELEASED&#x60;: the transaction was deferred in the past, but is now released. The status of a
     *     deferred transaction is updated to &#x60;DEFERRED_RELEASED&#x60; when the transaction is released. (optional)
     * @param nextToken A string token returned in the response of your previous request. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @param restrictedDataToken Restricted Data Token (optional)
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call listTransactionsAsync(
            OffsetDateTime postedAfter,
            OffsetDateTime postedBefore,
            String marketplaceId,
            String transactionStatus,
            String nextToken,
            final ApiCallback<ListTransactionsResponse> callback,
            String restrictedDataToken)
            throws ApiException, LWAException {

        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = listTransactionsValidateBeforeCall(
                postedAfter, postedBefore, marketplaceId, transactionStatus, nextToken, progressRequestListener);

        if (restrictedDataToken != null) {
            okhttp3.Request request = call.request();
            request = RestrictedDataTokenSigner.sign(request, restrictedDataToken, "DefaultApi-listTransactions");
            call = apiClient.getHttpClient().newCall(request);
        }

        if (disableRateLimiting || listTransactionsBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<ListTransactionsResponse>() {}.getType();
            apiClient.executeAsync(call, localVarReturnType, callback);
            return call;
        } else throw new ApiException.RateLimitExceeded("listTransactions operation exceeds rate limit");
    }

    public static class Builder {
        private LWAAuthorizationCredentials lwaAuthorizationCredentials;
        private String endpoint;
        private LWAAccessTokenCache lwaAccessTokenCache;
        private Boolean disableAccessTokenCache = false;
        private Boolean disableRateLimiting = false;

        public Builder lwaAuthorizationCredentials(LWAAuthorizationCredentials lwaAuthorizationCredentials) {
            this.lwaAuthorizationCredentials = lwaAuthorizationCredentials;
            return this;
        }

        public Builder endpoint(String endpoint) {
            this.endpoint = endpoint;
            return this;
        }

        public Builder lwaAccessTokenCache(LWAAccessTokenCache lwaAccessTokenCache) {
            this.lwaAccessTokenCache = lwaAccessTokenCache;
            return this;
        }

        public Builder disableAccessTokenCache() {
            this.disableAccessTokenCache = true;
            return this;
        }

        public Builder disableRateLimiting() {
            this.disableRateLimiting = true;
            return this;
        }

        public DefaultApi build() {
            if (lwaAuthorizationCredentials == null) {
                throw new RuntimeException("LWAAuthorizationCredentials not set");
            }

            if (StringUtil.isEmpty(endpoint)) {
                throw new RuntimeException("Endpoint not set");
            }

            LWAAuthorizationSigner lwaAuthorizationSigner = null;
            if (disableAccessTokenCache) {
                lwaAuthorizationSigner = new LWAAuthorizationSigner(lwaAuthorizationCredentials);
            } else {
                if (lwaAccessTokenCache == null) {
                    lwaAccessTokenCache = new LWAAccessTokenCacheImpl();
                }
                lwaAuthorizationSigner = new LWAAuthorizationSigner(lwaAuthorizationCredentials, lwaAccessTokenCache);
            }

            return new DefaultApi(
                    new ApiClient()
                            .setLWAAuthorizationSigner(lwaAuthorizationSigner)
                            .setBasePath(endpoint),
                    disableRateLimiting);
        }
    }
}
