/*
 * Selling Partner API for Feeds
 * The Selling Partner API for Feeds lets you upload data to Amazon on behalf of a selling partner.
 *
 * OpenAPI spec version: 2021-06-30
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package software.amazon.spapi.api.feeds.v2021_06_30;

import com.amazon.SellingPartnerAPIAA.LWAAccessTokenCache;
import com.amazon.SellingPartnerAPIAA.LWAAccessTokenCacheImpl;
import com.amazon.SellingPartnerAPIAA.LWAAuthorizationCredentials;
import com.amazon.SellingPartnerAPIAA.LWAAuthorizationSigner;
import com.amazon.SellingPartnerAPIAA.LWAException;
import com.amazon.SellingPartnerAPIAA.RestrictedDataTokenSigner;
import com.google.gson.reflect.TypeToken;
import io.github.bucket4j.Bucket;
import java.lang.reflect.Type;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import software.amazon.spapi.ApiCallback;
import software.amazon.spapi.ApiClient;
import software.amazon.spapi.ApiException;
import software.amazon.spapi.ApiResponse;
import software.amazon.spapi.Configuration;
import software.amazon.spapi.Pair;
import software.amazon.spapi.ProgressRequestBody;
import software.amazon.spapi.StringUtil;
import software.amazon.spapi.models.feeds.v2021_06_30.CreateFeedDocumentResponse;
import software.amazon.spapi.models.feeds.v2021_06_30.CreateFeedDocumentSpecification;
import software.amazon.spapi.models.feeds.v2021_06_30.CreateFeedResponse;
import software.amazon.spapi.models.feeds.v2021_06_30.CreateFeedSpecification;
import software.amazon.spapi.models.feeds.v2021_06_30.Feed;
import software.amazon.spapi.models.feeds.v2021_06_30.FeedDocument;
import software.amazon.spapi.models.feeds.v2021_06_30.GetFeedsResponse;

public class FeedsApi {
    private ApiClient apiClient;
    private Boolean disableRateLimiting;

    public FeedsApi(ApiClient apiClient, Boolean disableRateLimiting) {
        this.apiClient = apiClient;
        this.disableRateLimiting = disableRateLimiting;
    }

    private final Configuration config = Configuration.get();

    public final Bucket cancelFeedBucket =
            Bucket.builder().addLimit(config.getLimit("FeedsApi-cancelFeed")).build();

    public final Bucket createFeedBucket =
            Bucket.builder().addLimit(config.getLimit("FeedsApi-createFeed")).build();

    public final Bucket createFeedDocumentBucket = Bucket.builder()
            .addLimit(config.getLimit("FeedsApi-createFeedDocument"))
            .build();

    public final Bucket getFeedBucket =
            Bucket.builder().addLimit(config.getLimit("FeedsApi-getFeed")).build();

    public final Bucket getFeedDocumentBucket = Bucket.builder()
            .addLimit(config.getLimit("FeedsApi-getFeedDocument"))
            .build();

    public final Bucket getFeedsBucket =
            Bucket.builder().addLimit(config.getLimit("FeedsApi-getFeeds")).build();

    /**
     * Build call for cancelFeed
     *
     * @param feedId The identifier for the feed. This identifier is unique only in combination with a seller ID.
     *     (required)
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    private okhttp3.Call cancelFeedCall(
            String feedId, final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/feeds/2021-06-30/feeds/{feedId}"
                .replaceAll("\\{" + "feedId" + "\\}", apiClient.escapeString(feedId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {};

        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        return apiClient.buildCall(
                localVarPath,
                "DELETE",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                progressRequestListener);
    }

    private okhttp3.Call cancelFeedValidateBeforeCall(
            String feedId, final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        // verify the required parameter 'feedId' is set
        if (feedId == null) {
            throw new ApiException("Missing the required parameter 'feedId' when calling cancelFeed(Async)");
        }

        return cancelFeedCall(feedId, progressRequestListener);
    }

    /**
     * Cancels the feed that you specify. Only feeds with &#x60;processingStatus&#x3D;IN_QUEUE&#x60; can be cancelled.
     * Cancelled feeds are returned in subsequent calls to the
     * [&#x60;getFeed&#x60;](https://developer-docs.amazon.com/sp-api/reference/getfeed) and
     * [&#x60;getFeeds&#x60;](https://developer-docs.amazon.com/sp-api/reference/getfeeds) operations. **Usage Plan:** |
     * Rate (requests per second) | Burst | | ---- | ---- | | 2 | 15 | The &#x60;x-amzn-RateLimit-Limit&#x60; response
     * header returns the usage plan rate limits that were applied to the requested operation, when available. The
     * preceding table indicates the default rate and burst values for this operation. Selling partners whose business
     * demands require higher throughput may have higher rate and burst values than those shown here. For more
     * information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param feedId The identifier for the feed. This identifier is unique only in combination with a seller ID.
     *     (required)
     * @param restrictedDataToken Restricted Data Token (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public void cancelFeed(String feedId, String restrictedDataToken) throws ApiException, LWAException {
        cancelFeedWithHttpInfo(feedId, restrictedDataToken);
    }

    /**
     * Cancels the feed that you specify. Only feeds with &#x60;processingStatus&#x3D;IN_QUEUE&#x60; can be cancelled.
     * Cancelled feeds are returned in subsequent calls to the
     * [&#x60;getFeed&#x60;](https://developer-docs.amazon.com/sp-api/reference/getfeed) and
     * [&#x60;getFeeds&#x60;](https://developer-docs.amazon.com/sp-api/reference/getfeeds) operations. **Usage Plan:** |
     * Rate (requests per second) | Burst | | ---- | ---- | | 2 | 15 | The &#x60;x-amzn-RateLimit-Limit&#x60; response
     * header returns the usage plan rate limits that were applied to the requested operation, when available. The
     * preceding table indicates the default rate and burst values for this operation. Selling partners whose business
     * demands require higher throughput may have higher rate and burst values than those shown here. For more
     * information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param feedId The identifier for the feed. This identifier is unique only in combination with a seller ID.
     *     (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public void cancelFeed(String feedId) throws ApiException, LWAException {
        cancelFeedWithHttpInfo(feedId, null);
    }

    /**
     * Cancels the feed that you specify. Only feeds with &#x60;processingStatus&#x3D;IN_QUEUE&#x60; can be cancelled.
     * Cancelled feeds are returned in subsequent calls to the
     * [&#x60;getFeed&#x60;](https://developer-docs.amazon.com/sp-api/reference/getfeed) and
     * [&#x60;getFeeds&#x60;](https://developer-docs.amazon.com/sp-api/reference/getfeeds) operations. **Usage Plan:** |
     * Rate (requests per second) | Burst | | ---- | ---- | | 2 | 15 | The &#x60;x-amzn-RateLimit-Limit&#x60; response
     * header returns the usage plan rate limits that were applied to the requested operation, when available. The
     * preceding table indicates the default rate and burst values for this operation. Selling partners whose business
     * demands require higher throughput may have higher rate and burst values than those shown here. For more
     * information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param feedId The identifier for the feed. This identifier is unique only in combination with a seller ID.
     *     (required)
     * @param restrictedDataToken Restricted Data Token (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<Void> cancelFeedWithHttpInfo(String feedId, String restrictedDataToken)
            throws ApiException, LWAException {
        okhttp3.Call call = cancelFeedValidateBeforeCall(feedId, null);

        if (restrictedDataToken != null) {
            okhttp3.Request request = call.request();
            request = RestrictedDataTokenSigner.sign(request, restrictedDataToken, "FeedsApi-cancelFeed");
            call = apiClient.getHttpClient().newCall(request);
        }

        if (disableRateLimiting || cancelFeedBucket.tryConsume(1)) {
            return apiClient.execute(call);
        } else throw new ApiException.RateLimitExceeded("cancelFeed operation exceeds rate limit");
    }

    /**
     * Cancels the feed that you specify. Only feeds with &#x60;processingStatus&#x3D;IN_QUEUE&#x60; can be cancelled.
     * Cancelled feeds are returned in subsequent calls to the
     * [&#x60;getFeed&#x60;](https://developer-docs.amazon.com/sp-api/reference/getfeed) and
     * [&#x60;getFeeds&#x60;](https://developer-docs.amazon.com/sp-api/reference/getfeeds) operations. **Usage Plan:** |
     * Rate (requests per second) | Burst | | ---- | ---- | | 2 | 15 | The &#x60;x-amzn-RateLimit-Limit&#x60; response
     * header returns the usage plan rate limits that were applied to the requested operation, when available. The
     * preceding table indicates the default rate and burst values for this operation. Selling partners whose business
     * demands require higher throughput may have higher rate and burst values than those shown here. For more
     * information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param feedId The identifier for the feed. This identifier is unique only in combination with a seller ID.
     *     (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<Void> cancelFeedWithHttpInfo(String feedId) throws ApiException, LWAException {
        return cancelFeedWithHttpInfo(feedId, null);
    }

    /**
     * (asynchronously) Cancels the feed that you specify. Only feeds with &#x60;processingStatus&#x3D;IN_QUEUE&#x60;
     * can be cancelled. Cancelled feeds are returned in subsequent calls to the
     * [&#x60;getFeed&#x60;](https://developer-docs.amazon.com/sp-api/reference/getfeed) and
     * [&#x60;getFeeds&#x60;](https://developer-docs.amazon.com/sp-api/reference/getfeeds) operations. **Usage Plan:** |
     * Rate (requests per second) | Burst | | ---- | ---- | | 2 | 15 | The &#x60;x-amzn-RateLimit-Limit&#x60; response
     * header returns the usage plan rate limits that were applied to the requested operation, when available. The
     * preceding table indicates the default rate and burst values for this operation. Selling partners whose business
     * demands require higher throughput may have higher rate and burst values than those shown here. For more
     * information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param feedId The identifier for the feed. This identifier is unique only in combination with a seller ID.
     *     (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call cancelFeedAsync(String feedId, final ApiCallback<Void> callback)
            throws ApiException, LWAException {
        return cancelFeedAsync(feedId, callback, null);
    }
    /**
     * (asynchronously) Cancels the feed that you specify. Only feeds with &#x60;processingStatus&#x3D;IN_QUEUE&#x60;
     * can be cancelled. Cancelled feeds are returned in subsequent calls to the
     * [&#x60;getFeed&#x60;](https://developer-docs.amazon.com/sp-api/reference/getfeed) and
     * [&#x60;getFeeds&#x60;](https://developer-docs.amazon.com/sp-api/reference/getfeeds) operations. **Usage Plan:** |
     * Rate (requests per second) | Burst | | ---- | ---- | | 2 | 15 | The &#x60;x-amzn-RateLimit-Limit&#x60; response
     * header returns the usage plan rate limits that were applied to the requested operation, when available. The
     * preceding table indicates the default rate and burst values for this operation. Selling partners whose business
     * demands require higher throughput may have higher rate and burst values than those shown here. For more
     * information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param feedId The identifier for the feed. This identifier is unique only in combination with a seller ID.
     *     (required)
     * @param callback The callback to be executed when the API call finishes
     * @param restrictedDataToken Restricted Data Token (optional)
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call cancelFeedAsync(String feedId, final ApiCallback<Void> callback, String restrictedDataToken)
            throws ApiException, LWAException {

        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = cancelFeedValidateBeforeCall(feedId, progressRequestListener);

        if (restrictedDataToken != null) {
            okhttp3.Request request = call.request();
            request = RestrictedDataTokenSigner.sign(request, restrictedDataToken, "FeedsApi-cancelFeed");
            call = apiClient.getHttpClient().newCall(request);
        }

        if (disableRateLimiting || cancelFeedBucket.tryConsume(1)) {
            apiClient.executeAsync(call, callback);
            return call;
        } else throw new ApiException.RateLimitExceeded("cancelFeed operation exceeds rate limit");
    }
    /**
     * Build call for createFeed
     *
     * @param body Information required to create the feed. (required)
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    private okhttp3.Call createFeedCall(
            CreateFeedSpecification body, final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/feeds/2021-06-30/feeds";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        return apiClient.buildCall(
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                progressRequestListener);
    }

    private okhttp3.Call createFeedValidateBeforeCall(
            CreateFeedSpecification body, final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createFeed(Async)");
        }

        return createFeedCall(body, progressRequestListener);
    }

    /**
     * Creates a feed. Upload the contents of the feed document before calling this operation. **Usage Plan:** | Rate
     * (requests per second) | Burst | | ---- | ---- | | 0.0083 | 15 | The &#x60;x-amzn-RateLimit-Limit&#x60; response
     * header returns the usage plan rate limits that were applied to the requested operation, when available. The
     * preceding table indicates the default rate and burst values for this operation. Selling partners whose business
     * demands require higher throughput may have higher rate and burst values than those shown here. For more
     * information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). The rate limit for
     * the
     * [&#x60;JSON_LISTINGS_FEED&#x60;](https://developer-docs.amazon.com/sp-api/docs/listings-feed-type-values#listings-feed)
     * feed type differs from the rate limit for the
     * [&#x60;createFeed&#x60;](https://developer-docs.amazon.com/sp-api/reference/createfeed) operation. For more
     * information, refer to the [Building Listings Management Workflows
     * Guide](https://developer-docs.amazon.com/sp-api/docs/building-listings-management-workflows-guide#should-i-submit-in-bulk-using-the-json_listings_feed-or-individually-with-the-listings-items-api).
     *
     * @param body Information required to create the feed. (required)
     * @param restrictedDataToken Restricted Data Token (optional)
     * @return CreateFeedResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public CreateFeedResponse createFeed(CreateFeedSpecification body, String restrictedDataToken)
            throws ApiException, LWAException {
        ApiResponse<CreateFeedResponse> resp = createFeedWithHttpInfo(body, restrictedDataToken);
        return resp.getData();
    }

    /**
     * Creates a feed. Upload the contents of the feed document before calling this operation. **Usage Plan:** | Rate
     * (requests per second) | Burst | | ---- | ---- | | 0.0083 | 15 | The &#x60;x-amzn-RateLimit-Limit&#x60; response
     * header returns the usage plan rate limits that were applied to the requested operation, when available. The
     * preceding table indicates the default rate and burst values for this operation. Selling partners whose business
     * demands require higher throughput may have higher rate and burst values than those shown here. For more
     * information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). The rate limit for
     * the
     * [&#x60;JSON_LISTINGS_FEED&#x60;](https://developer-docs.amazon.com/sp-api/docs/listings-feed-type-values#listings-feed)
     * feed type differs from the rate limit for the
     * [&#x60;createFeed&#x60;](https://developer-docs.amazon.com/sp-api/reference/createfeed) operation. For more
     * information, refer to the [Building Listings Management Workflows
     * Guide](https://developer-docs.amazon.com/sp-api/docs/building-listings-management-workflows-guide#should-i-submit-in-bulk-using-the-json_listings_feed-or-individually-with-the-listings-items-api).
     *
     * @param body Information required to create the feed. (required)
     * @return CreateFeedResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public CreateFeedResponse createFeed(CreateFeedSpecification body) throws ApiException, LWAException {
        ApiResponse<CreateFeedResponse> resp = createFeedWithHttpInfo(body, null);
        return resp.getData();
    }

    /**
     * Creates a feed. Upload the contents of the feed document before calling this operation. **Usage Plan:** | Rate
     * (requests per second) | Burst | | ---- | ---- | | 0.0083 | 15 | The &#x60;x-amzn-RateLimit-Limit&#x60; response
     * header returns the usage plan rate limits that were applied to the requested operation, when available. The
     * preceding table indicates the default rate and burst values for this operation. Selling partners whose business
     * demands require higher throughput may have higher rate and burst values than those shown here. For more
     * information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). The rate limit for
     * the
     * [&#x60;JSON_LISTINGS_FEED&#x60;](https://developer-docs.amazon.com/sp-api/docs/listings-feed-type-values#listings-feed)
     * feed type differs from the rate limit for the
     * [&#x60;createFeed&#x60;](https://developer-docs.amazon.com/sp-api/reference/createfeed) operation. For more
     * information, refer to the [Building Listings Management Workflows
     * Guide](https://developer-docs.amazon.com/sp-api/docs/building-listings-management-workflows-guide#should-i-submit-in-bulk-using-the-json_listings_feed-or-individually-with-the-listings-items-api).
     *
     * @param body Information required to create the feed. (required)
     * @param restrictedDataToken Restricted Data Token (optional)
     * @return ApiResponse&lt;CreateFeedResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<CreateFeedResponse> createFeedWithHttpInfo(
            CreateFeedSpecification body, String restrictedDataToken) throws ApiException, LWAException {
        okhttp3.Call call = createFeedValidateBeforeCall(body, null);

        if (restrictedDataToken != null) {
            okhttp3.Request request = call.request();
            request = RestrictedDataTokenSigner.sign(request, restrictedDataToken, "FeedsApi-createFeed");
            call = apiClient.getHttpClient().newCall(request);
        }

        if (disableRateLimiting || createFeedBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<CreateFeedResponse>() {}.getType();
            return apiClient.execute(call, localVarReturnType);
        } else throw new ApiException.RateLimitExceeded("createFeed operation exceeds rate limit");
    }

    /**
     * Creates a feed. Upload the contents of the feed document before calling this operation. **Usage Plan:** | Rate
     * (requests per second) | Burst | | ---- | ---- | | 0.0083 | 15 | The &#x60;x-amzn-RateLimit-Limit&#x60; response
     * header returns the usage plan rate limits that were applied to the requested operation, when available. The
     * preceding table indicates the default rate and burst values for this operation. Selling partners whose business
     * demands require higher throughput may have higher rate and burst values than those shown here. For more
     * information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). The rate limit for
     * the
     * [&#x60;JSON_LISTINGS_FEED&#x60;](https://developer-docs.amazon.com/sp-api/docs/listings-feed-type-values#listings-feed)
     * feed type differs from the rate limit for the
     * [&#x60;createFeed&#x60;](https://developer-docs.amazon.com/sp-api/reference/createfeed) operation. For more
     * information, refer to the [Building Listings Management Workflows
     * Guide](https://developer-docs.amazon.com/sp-api/docs/building-listings-management-workflows-guide#should-i-submit-in-bulk-using-the-json_listings_feed-or-individually-with-the-listings-items-api).
     *
     * @param body Information required to create the feed. (required)
     * @return ApiResponse&lt;CreateFeedResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<CreateFeedResponse> createFeedWithHttpInfo(CreateFeedSpecification body)
            throws ApiException, LWAException {
        return createFeedWithHttpInfo(body, null);
    }

    /**
     * (asynchronously) Creates a feed. Upload the contents of the feed document before calling this operation. **Usage
     * Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 0.0083 | 15 | The
     * &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the
     * requested operation, when available. The preceding table indicates the default rate and burst values for this
     * operation. Selling partners whose business demands require higher throughput may have higher rate and burst
     * values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). The rate limit for
     * the
     * [&#x60;JSON_LISTINGS_FEED&#x60;](https://developer-docs.amazon.com/sp-api/docs/listings-feed-type-values#listings-feed)
     * feed type differs from the rate limit for the
     * [&#x60;createFeed&#x60;](https://developer-docs.amazon.com/sp-api/reference/createfeed) operation. For more
     * information, refer to the [Building Listings Management Workflows
     * Guide](https://developer-docs.amazon.com/sp-api/docs/building-listings-management-workflows-guide#should-i-submit-in-bulk-using-the-json_listings_feed-or-individually-with-the-listings-items-api).
     *
     * @param body Information required to create the feed. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call createFeedAsync(CreateFeedSpecification body, final ApiCallback<CreateFeedResponse> callback)
            throws ApiException, LWAException {
        return createFeedAsync(body, callback, null);
    }
    /**
     * (asynchronously) Creates a feed. Upload the contents of the feed document before calling this operation. **Usage
     * Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 0.0083 | 15 | The
     * &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the
     * requested operation, when available. The preceding table indicates the default rate and burst values for this
     * operation. Selling partners whose business demands require higher throughput may have higher rate and burst
     * values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). The rate limit for
     * the
     * [&#x60;JSON_LISTINGS_FEED&#x60;](https://developer-docs.amazon.com/sp-api/docs/listings-feed-type-values#listings-feed)
     * feed type differs from the rate limit for the
     * [&#x60;createFeed&#x60;](https://developer-docs.amazon.com/sp-api/reference/createfeed) operation. For more
     * information, refer to the [Building Listings Management Workflows
     * Guide](https://developer-docs.amazon.com/sp-api/docs/building-listings-management-workflows-guide#should-i-submit-in-bulk-using-the-json_listings_feed-or-individually-with-the-listings-items-api).
     *
     * @param body Information required to create the feed. (required)
     * @param callback The callback to be executed when the API call finishes
     * @param restrictedDataToken Restricted Data Token (optional)
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call createFeedAsync(
            CreateFeedSpecification body, final ApiCallback<CreateFeedResponse> callback, String restrictedDataToken)
            throws ApiException, LWAException {

        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = createFeedValidateBeforeCall(body, progressRequestListener);

        if (restrictedDataToken != null) {
            okhttp3.Request request = call.request();
            request = RestrictedDataTokenSigner.sign(request, restrictedDataToken, "FeedsApi-createFeed");
            call = apiClient.getHttpClient().newCall(request);
        }

        if (disableRateLimiting || createFeedBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<CreateFeedResponse>() {}.getType();
            apiClient.executeAsync(call, localVarReturnType, callback);
            return call;
        } else throw new ApiException.RateLimitExceeded("createFeed operation exceeds rate limit");
    }
    /**
     * Build call for createFeedDocument
     *
     * @param body Specifies the content type for the createFeedDocument operation. (required)
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    private okhttp3.Call createFeedDocumentCall(
            CreateFeedDocumentSpecification body,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/feeds/2021-06-30/documents";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {"application/json"};
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        return apiClient.buildCall(
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                progressRequestListener);
    }

    private okhttp3.Call createFeedDocumentValidateBeforeCall(
            CreateFeedDocumentSpecification body,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createFeedDocument(Async)");
        }

        return createFeedDocumentCall(body, progressRequestListener);
    }

    /**
     * Creates a feed document for the feed type that you specify. This operation returns a presigned URL for uploading
     * the feed document contents. It also returns a &#x60;feedDocumentId&#x60; value that you can pass in with a
     * subsequent call to the [&#x60;createFeed&#x60;](https://developer-docs.amazon.com/sp-api/reference/createfeed)
     * operation. **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 0.5 | 15 | The
     * &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the
     * requested operation, when available. The preceding table indicates the default rate and burst values for this
     * operation. Selling partners whose business demands require higher throughput may have higher rate and burst
     * values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param body Specifies the content type for the createFeedDocument operation. (required)
     * @param restrictedDataToken Restricted Data Token (optional)
     * @return CreateFeedDocumentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public CreateFeedDocumentResponse createFeedDocument(
            CreateFeedDocumentSpecification body, String restrictedDataToken) throws ApiException, LWAException {
        ApiResponse<CreateFeedDocumentResponse> resp = createFeedDocumentWithHttpInfo(body, restrictedDataToken);
        return resp.getData();
    }

    /**
     * Creates a feed document for the feed type that you specify. This operation returns a presigned URL for uploading
     * the feed document contents. It also returns a &#x60;feedDocumentId&#x60; value that you can pass in with a
     * subsequent call to the [&#x60;createFeed&#x60;](https://developer-docs.amazon.com/sp-api/reference/createfeed)
     * operation. **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 0.5 | 15 | The
     * &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the
     * requested operation, when available. The preceding table indicates the default rate and burst values for this
     * operation. Selling partners whose business demands require higher throughput may have higher rate and burst
     * values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param body Specifies the content type for the createFeedDocument operation. (required)
     * @return CreateFeedDocumentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public CreateFeedDocumentResponse createFeedDocument(CreateFeedDocumentSpecification body)
            throws ApiException, LWAException {
        ApiResponse<CreateFeedDocumentResponse> resp = createFeedDocumentWithHttpInfo(body, null);
        return resp.getData();
    }

    /**
     * Creates a feed document for the feed type that you specify. This operation returns a presigned URL for uploading
     * the feed document contents. It also returns a &#x60;feedDocumentId&#x60; value that you can pass in with a
     * subsequent call to the [&#x60;createFeed&#x60;](https://developer-docs.amazon.com/sp-api/reference/createfeed)
     * operation. **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 0.5 | 15 | The
     * &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the
     * requested operation, when available. The preceding table indicates the default rate and burst values for this
     * operation. Selling partners whose business demands require higher throughput may have higher rate and burst
     * values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param body Specifies the content type for the createFeedDocument operation. (required)
     * @param restrictedDataToken Restricted Data Token (optional)
     * @return ApiResponse&lt;CreateFeedDocumentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<CreateFeedDocumentResponse> createFeedDocumentWithHttpInfo(
            CreateFeedDocumentSpecification body, String restrictedDataToken) throws ApiException, LWAException {
        okhttp3.Call call = createFeedDocumentValidateBeforeCall(body, null);

        if (restrictedDataToken != null) {
            okhttp3.Request request = call.request();
            request = RestrictedDataTokenSigner.sign(request, restrictedDataToken, "FeedsApi-createFeedDocument");
            call = apiClient.getHttpClient().newCall(request);
        }

        if (disableRateLimiting || createFeedDocumentBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<CreateFeedDocumentResponse>() {}.getType();
            return apiClient.execute(call, localVarReturnType);
        } else throw new ApiException.RateLimitExceeded("createFeedDocument operation exceeds rate limit");
    }

    /**
     * Creates a feed document for the feed type that you specify. This operation returns a presigned URL for uploading
     * the feed document contents. It also returns a &#x60;feedDocumentId&#x60; value that you can pass in with a
     * subsequent call to the [&#x60;createFeed&#x60;](https://developer-docs.amazon.com/sp-api/reference/createfeed)
     * operation. **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 0.5 | 15 | The
     * &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the
     * requested operation, when available. The preceding table indicates the default rate and burst values for this
     * operation. Selling partners whose business demands require higher throughput may have higher rate and burst
     * values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param body Specifies the content type for the createFeedDocument operation. (required)
     * @return ApiResponse&lt;CreateFeedDocumentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<CreateFeedDocumentResponse> createFeedDocumentWithHttpInfo(CreateFeedDocumentSpecification body)
            throws ApiException, LWAException {
        return createFeedDocumentWithHttpInfo(body, null);
    }

    /**
     * (asynchronously) Creates a feed document for the feed type that you specify. This operation returns a presigned
     * URL for uploading the feed document contents. It also returns a &#x60;feedDocumentId&#x60; value that you can
     * pass in with a subsequent call to the
     * [&#x60;createFeed&#x60;](https://developer-docs.amazon.com/sp-api/reference/createfeed) operation. **Usage
     * Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 0.5 | 15 | The
     * &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the
     * requested operation, when available. The preceding table indicates the default rate and burst values for this
     * operation. Selling partners whose business demands require higher throughput may have higher rate and burst
     * values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param body Specifies the content type for the createFeedDocument operation. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call createFeedDocumentAsync(
            CreateFeedDocumentSpecification body, final ApiCallback<CreateFeedDocumentResponse> callback)
            throws ApiException, LWAException {
        return createFeedDocumentAsync(body, callback, null);
    }
    /**
     * (asynchronously) Creates a feed document for the feed type that you specify. This operation returns a presigned
     * URL for uploading the feed document contents. It also returns a &#x60;feedDocumentId&#x60; value that you can
     * pass in with a subsequent call to the
     * [&#x60;createFeed&#x60;](https://developer-docs.amazon.com/sp-api/reference/createfeed) operation. **Usage
     * Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 0.5 | 15 | The
     * &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the
     * requested operation, when available. The preceding table indicates the default rate and burst values for this
     * operation. Selling partners whose business demands require higher throughput may have higher rate and burst
     * values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param body Specifies the content type for the createFeedDocument operation. (required)
     * @param callback The callback to be executed when the API call finishes
     * @param restrictedDataToken Restricted Data Token (optional)
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call createFeedDocumentAsync(
            CreateFeedDocumentSpecification body,
            final ApiCallback<CreateFeedDocumentResponse> callback,
            String restrictedDataToken)
            throws ApiException, LWAException {

        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = createFeedDocumentValidateBeforeCall(body, progressRequestListener);

        if (restrictedDataToken != null) {
            okhttp3.Request request = call.request();
            request = RestrictedDataTokenSigner.sign(request, restrictedDataToken, "FeedsApi-createFeedDocument");
            call = apiClient.getHttpClient().newCall(request);
        }

        if (disableRateLimiting || createFeedDocumentBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<CreateFeedDocumentResponse>() {}.getType();
            apiClient.executeAsync(call, localVarReturnType, callback);
            return call;
        } else throw new ApiException.RateLimitExceeded("createFeedDocument operation exceeds rate limit");
    }
    /**
     * Build call for getFeed
     *
     * @param feedId The identifier for the feed. This identifier is unique only in combination with a seller ID.
     *     (required)
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    private okhttp3.Call getFeedCall(
            String feedId, final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/feeds/2021-06-30/feeds/{feedId}"
                .replaceAll("\\{" + "feedId" + "\\}", apiClient.escapeString(feedId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {};

        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        return apiClient.buildCall(
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                progressRequestListener);
    }

    private okhttp3.Call getFeedValidateBeforeCall(
            String feedId, final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        // verify the required parameter 'feedId' is set
        if (feedId == null) {
            throw new ApiException("Missing the required parameter 'feedId' when calling getFeed(Async)");
        }

        return getFeedCall(feedId, progressRequestListener);
    }

    /**
     * Returns feed details (including the &#x60;resultDocumentId&#x60;, if available) for the feed that you specify.
     * **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 15 | The
     * &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the
     * requested operation, when available. The preceding table indicates the default rate and burst values for this
     * operation. Selling partners whose business demands require higher throughput may have higher rate and burst
     * values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param feedId The identifier for the feed. This identifier is unique only in combination with a seller ID.
     *     (required)
     * @param restrictedDataToken Restricted Data Token (optional)
     * @return Feed
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public Feed getFeed(String feedId, String restrictedDataToken) throws ApiException, LWAException {
        ApiResponse<Feed> resp = getFeedWithHttpInfo(feedId, restrictedDataToken);
        return resp.getData();
    }

    /**
     * Returns feed details (including the &#x60;resultDocumentId&#x60;, if available) for the feed that you specify.
     * **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 15 | The
     * &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the
     * requested operation, when available. The preceding table indicates the default rate and burst values for this
     * operation. Selling partners whose business demands require higher throughput may have higher rate and burst
     * values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param feedId The identifier for the feed. This identifier is unique only in combination with a seller ID.
     *     (required)
     * @return Feed
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public Feed getFeed(String feedId) throws ApiException, LWAException {
        ApiResponse<Feed> resp = getFeedWithHttpInfo(feedId, null);
        return resp.getData();
    }

    /**
     * Returns feed details (including the &#x60;resultDocumentId&#x60;, if available) for the feed that you specify.
     * **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 15 | The
     * &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the
     * requested operation, when available. The preceding table indicates the default rate and burst values for this
     * operation. Selling partners whose business demands require higher throughput may have higher rate and burst
     * values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param feedId The identifier for the feed. This identifier is unique only in combination with a seller ID.
     *     (required)
     * @param restrictedDataToken Restricted Data Token (optional)
     * @return ApiResponse&lt;Feed&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<Feed> getFeedWithHttpInfo(String feedId, String restrictedDataToken)
            throws ApiException, LWAException {
        okhttp3.Call call = getFeedValidateBeforeCall(feedId, null);

        if (restrictedDataToken != null) {
            okhttp3.Request request = call.request();
            request = RestrictedDataTokenSigner.sign(request, restrictedDataToken, "FeedsApi-getFeed");
            call = apiClient.getHttpClient().newCall(request);
        }

        if (disableRateLimiting || getFeedBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<Feed>() {}.getType();
            return apiClient.execute(call, localVarReturnType);
        } else throw new ApiException.RateLimitExceeded("getFeed operation exceeds rate limit");
    }

    /**
     * Returns feed details (including the &#x60;resultDocumentId&#x60;, if available) for the feed that you specify.
     * **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 15 | The
     * &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the
     * requested operation, when available. The preceding table indicates the default rate and burst values for this
     * operation. Selling partners whose business demands require higher throughput may have higher rate and burst
     * values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param feedId The identifier for the feed. This identifier is unique only in combination with a seller ID.
     *     (required)
     * @return ApiResponse&lt;Feed&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<Feed> getFeedWithHttpInfo(String feedId) throws ApiException, LWAException {
        return getFeedWithHttpInfo(feedId, null);
    }

    /**
     * (asynchronously) Returns feed details (including the &#x60;resultDocumentId&#x60;, if available) for the feed
     * that you specify. **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 15 | The
     * &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the
     * requested operation, when available. The preceding table indicates the default rate and burst values for this
     * operation. Selling partners whose business demands require higher throughput may have higher rate and burst
     * values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param feedId The identifier for the feed. This identifier is unique only in combination with a seller ID.
     *     (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call getFeedAsync(String feedId, final ApiCallback<Feed> callback)
            throws ApiException, LWAException {
        return getFeedAsync(feedId, callback, null);
    }
    /**
     * (asynchronously) Returns feed details (including the &#x60;resultDocumentId&#x60;, if available) for the feed
     * that you specify. **Usage Plan:** | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 15 | The
     * &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the
     * requested operation, when available. The preceding table indicates the default rate and burst values for this
     * operation. Selling partners whose business demands require higher throughput may have higher rate and burst
     * values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param feedId The identifier for the feed. This identifier is unique only in combination with a seller ID.
     *     (required)
     * @param callback The callback to be executed when the API call finishes
     * @param restrictedDataToken Restricted Data Token (optional)
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call getFeedAsync(String feedId, final ApiCallback<Feed> callback, String restrictedDataToken)
            throws ApiException, LWAException {

        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = getFeedValidateBeforeCall(feedId, progressRequestListener);

        if (restrictedDataToken != null) {
            okhttp3.Request request = call.request();
            request = RestrictedDataTokenSigner.sign(request, restrictedDataToken, "FeedsApi-getFeed");
            call = apiClient.getHttpClient().newCall(request);
        }

        if (disableRateLimiting || getFeedBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<Feed>() {}.getType();
            apiClient.executeAsync(call, localVarReturnType, callback);
            return call;
        } else throw new ApiException.RateLimitExceeded("getFeed operation exceeds rate limit");
    }
    /**
     * Build call for getFeedDocument
     *
     * @param feedDocumentId The identifier of the feed document. (required)
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    private okhttp3.Call getFeedDocumentCall(
            String feedDocumentId, final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/feeds/2021-06-30/documents/{feedDocumentId}"
                .replaceAll("\\{" + "feedDocumentId" + "\\}", apiClient.escapeString(feedDocumentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {};

        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        return apiClient.buildCall(
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                progressRequestListener);
    }

    private okhttp3.Call getFeedDocumentValidateBeforeCall(
            String feedDocumentId, final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        // verify the required parameter 'feedDocumentId' is set
        if (feedDocumentId == null) {
            throw new ApiException(
                    "Missing the required parameter 'feedDocumentId' when calling getFeedDocument(Async)");
        }

        return getFeedDocumentCall(feedDocumentId, progressRequestListener);
    }

    /**
     * Returns the information required for retrieving a feed document&#x27;s contents. **Usage Plan:** | Rate (requests
     * per second) | Burst | | ---- | ---- | | 0.0222 | 10 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header
     * returns the usage plan rate limits that were applied to the requested operation, when available. The preceding
     * table indicates the default rate and burst values for this operation. Selling partners whose business demands
     * require higher throughput may have higher rate and burst values than those shown here. For more information,
     * refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param feedDocumentId The identifier of the feed document. (required)
     * @param restrictedDataToken Restricted Data Token (optional)
     * @return FeedDocument
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public FeedDocument getFeedDocument(String feedDocumentId, String restrictedDataToken)
            throws ApiException, LWAException {
        ApiResponse<FeedDocument> resp = getFeedDocumentWithHttpInfo(feedDocumentId, restrictedDataToken);
        return resp.getData();
    }

    /**
     * Returns the information required for retrieving a feed document&#x27;s contents. **Usage Plan:** | Rate (requests
     * per second) | Burst | | ---- | ---- | | 0.0222 | 10 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header
     * returns the usage plan rate limits that were applied to the requested operation, when available. The preceding
     * table indicates the default rate and burst values for this operation. Selling partners whose business demands
     * require higher throughput may have higher rate and burst values than those shown here. For more information,
     * refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param feedDocumentId The identifier of the feed document. (required)
     * @return FeedDocument
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public FeedDocument getFeedDocument(String feedDocumentId) throws ApiException, LWAException {
        ApiResponse<FeedDocument> resp = getFeedDocumentWithHttpInfo(feedDocumentId, null);
        return resp.getData();
    }

    /**
     * Returns the information required for retrieving a feed document&#x27;s contents. **Usage Plan:** | Rate (requests
     * per second) | Burst | | ---- | ---- | | 0.0222 | 10 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header
     * returns the usage plan rate limits that were applied to the requested operation, when available. The preceding
     * table indicates the default rate and burst values for this operation. Selling partners whose business demands
     * require higher throughput may have higher rate and burst values than those shown here. For more information,
     * refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param feedDocumentId The identifier of the feed document. (required)
     * @param restrictedDataToken Restricted Data Token (optional)
     * @return ApiResponse&lt;FeedDocument&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<FeedDocument> getFeedDocumentWithHttpInfo(String feedDocumentId, String restrictedDataToken)
            throws ApiException, LWAException {
        okhttp3.Call call = getFeedDocumentValidateBeforeCall(feedDocumentId, null);

        if (restrictedDataToken != null) {
            okhttp3.Request request = call.request();
            request = RestrictedDataTokenSigner.sign(request, restrictedDataToken, "FeedsApi-getFeedDocument");
            call = apiClient.getHttpClient().newCall(request);
        }

        if (disableRateLimiting || getFeedDocumentBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<FeedDocument>() {}.getType();
            return apiClient.execute(call, localVarReturnType);
        } else throw new ApiException.RateLimitExceeded("getFeedDocument operation exceeds rate limit");
    }

    /**
     * Returns the information required for retrieving a feed document&#x27;s contents. **Usage Plan:** | Rate (requests
     * per second) | Burst | | ---- | ---- | | 0.0222 | 10 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header
     * returns the usage plan rate limits that were applied to the requested operation, when available. The preceding
     * table indicates the default rate and burst values for this operation. Selling partners whose business demands
     * require higher throughput may have higher rate and burst values than those shown here. For more information,
     * refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param feedDocumentId The identifier of the feed document. (required)
     * @return ApiResponse&lt;FeedDocument&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<FeedDocument> getFeedDocumentWithHttpInfo(String feedDocumentId)
            throws ApiException, LWAException {
        return getFeedDocumentWithHttpInfo(feedDocumentId, null);
    }

    /**
     * (asynchronously) Returns the information required for retrieving a feed document&#x27;s contents. **Usage Plan:**
     * | Rate (requests per second) | Burst | | ---- | ---- | | 0.0222 | 10 | The &#x60;x-amzn-RateLimit-Limit&#x60;
     * response header returns the usage plan rate limits that were applied to the requested operation, when available.
     * The preceding table indicates the default rate and burst values for this operation. Selling partners whose
     * business demands require higher throughput may have higher rate and burst values than those shown here. For more
     * information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param feedDocumentId The identifier of the feed document. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call getFeedDocumentAsync(String feedDocumentId, final ApiCallback<FeedDocument> callback)
            throws ApiException, LWAException {
        return getFeedDocumentAsync(feedDocumentId, callback, null);
    }
    /**
     * (asynchronously) Returns the information required for retrieving a feed document&#x27;s contents. **Usage Plan:**
     * | Rate (requests per second) | Burst | | ---- | ---- | | 0.0222 | 10 | The &#x60;x-amzn-RateLimit-Limit&#x60;
     * response header returns the usage plan rate limits that were applied to the requested operation, when available.
     * The preceding table indicates the default rate and burst values for this operation. Selling partners whose
     * business demands require higher throughput may have higher rate and burst values than those shown here. For more
     * information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param feedDocumentId The identifier of the feed document. (required)
     * @param callback The callback to be executed when the API call finishes
     * @param restrictedDataToken Restricted Data Token (optional)
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call getFeedDocumentAsync(
            String feedDocumentId, final ApiCallback<FeedDocument> callback, String restrictedDataToken)
            throws ApiException, LWAException {

        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = getFeedDocumentValidateBeforeCall(feedDocumentId, progressRequestListener);

        if (restrictedDataToken != null) {
            okhttp3.Request request = call.request();
            request = RestrictedDataTokenSigner.sign(request, restrictedDataToken, "FeedsApi-getFeedDocument");
            call = apiClient.getHttpClient().newCall(request);
        }

        if (disableRateLimiting || getFeedDocumentBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<FeedDocument>() {}.getType();
            apiClient.executeAsync(call, localVarReturnType, callback);
            return call;
        } else throw new ApiException.RateLimitExceeded("getFeedDocument operation exceeds rate limit");
    }
    /**
     * Build call for getFeeds
     *
     * @param feedTypes A list of feed types used to filter feeds. When feedTypes is provided, the other filter
     *     parameters (processingStatuses, marketplaceIds, createdSince, createdUntil) and pageSize may also be
     *     provided. Either feedTypes or nextToken is required. (optional)
     * @param marketplaceIds A list of marketplace identifiers used to filter feeds. The feeds returned will match at
     *     least one of the marketplaces that you specify. (optional)
     * @param pageSize The maximum number of feeds to return in a single call. (optional, default to 10)
     * @param processingStatuses A list of processing statuses used to filter feeds. (optional)
     * @param createdSince The earliest feed creation date and time for feeds included in the response, in ISO 8601
     *     format. The default is 90 days ago. Feeds are retained for a maximum of 90 days. (optional)
     * @param createdUntil The latest feed creation date and time for feeds included in the response, in ISO 8601
     *     format. The default is now. (optional)
     * @param nextToken A string token returned in the response to your previous request. nextToken is returned when the
     *     number of results exceeds the specified pageSize value. To get the next page of results, call the getFeeds
     *     operation and include this token as the only parameter. Specifying nextToken with any other parameters will
     *     cause the request to fail. (optional)
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    private okhttp3.Call getFeedsCall(
            List<String> feedTypes,
            List<String> marketplaceIds,
            Integer pageSize,
            List<String> processingStatuses,
            OffsetDateTime createdSince,
            OffsetDateTime createdUntil,
            String nextToken,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/feeds/2021-06-30/feeds";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (feedTypes != null)
            localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "feedTypes", feedTypes));
        if (marketplaceIds != null)
            localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "marketplaceIds", marketplaceIds));
        if (pageSize != null) localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));
        if (processingStatuses != null)
            localVarCollectionQueryParams.addAll(
                    apiClient.parameterToPairs("csv", "processingStatuses", processingStatuses));
        if (createdSince != null) localVarQueryParams.addAll(apiClient.parameterToPair("createdSince", createdSince));
        if (createdUntil != null) localVarQueryParams.addAll(apiClient.parameterToPair("createdUntil", createdUntil));
        if (nextToken != null) localVarQueryParams.addAll(apiClient.parameterToPair("nextToken", nextToken));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {};

        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        return apiClient.buildCall(
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                progressRequestListener);
    }

    private okhttp3.Call getFeedsValidateBeforeCall(
            List<String> feedTypes,
            List<String> marketplaceIds,
            Integer pageSize,
            List<String> processingStatuses,
            OffsetDateTime createdSince,
            OffsetDateTime createdUntil,
            String nextToken,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener)
            throws ApiException, LWAException {

        return getFeedsCall(
                feedTypes,
                marketplaceIds,
                pageSize,
                processingStatuses,
                createdSince,
                createdUntil,
                nextToken,
                progressRequestListener);
    }

    /**
     * Returns feed details for the feeds that match the filters that you specify. **Usage Plan:** | Rate (requests per
     * second) | Burst | | ---- | ---- | | 0.0222 | 10 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns
     * the usage plan rate limits that were applied to the requested operation, when available. The preceding table
     * indicates the default rate and burst values for this operation. Selling partners whose business demands require
     * higher throughput may have higher rate and burst values than those shown here. For more information, refer to
     * [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param feedTypes A list of feed types used to filter feeds. When feedTypes is provided, the other filter
     *     parameters (processingStatuses, marketplaceIds, createdSince, createdUntil) and pageSize may also be
     *     provided. Either feedTypes or nextToken is required. (optional)
     * @param marketplaceIds A list of marketplace identifiers used to filter feeds. The feeds returned will match at
     *     least one of the marketplaces that you specify. (optional)
     * @param pageSize The maximum number of feeds to return in a single call. (optional, default to 10)
     * @param processingStatuses A list of processing statuses used to filter feeds. (optional)
     * @param createdSince The earliest feed creation date and time for feeds included in the response, in ISO 8601
     *     format. The default is 90 days ago. Feeds are retained for a maximum of 90 days. (optional)
     * @param createdUntil The latest feed creation date and time for feeds included in the response, in ISO 8601
     *     format. The default is now. (optional)
     * @param nextToken A string token returned in the response to your previous request. nextToken is returned when the
     *     number of results exceeds the specified pageSize value. To get the next page of results, call the getFeeds
     *     operation and include this token as the only parameter. Specifying nextToken with any other parameters will
     *     cause the request to fail. (optional)
     * @param restrictedDataToken Restricted Data Token (optional)
     * @return GetFeedsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public GetFeedsResponse getFeeds(
            List<String> feedTypes,
            List<String> marketplaceIds,
            Integer pageSize,
            List<String> processingStatuses,
            OffsetDateTime createdSince,
            OffsetDateTime createdUntil,
            String nextToken,
            String restrictedDataToken)
            throws ApiException, LWAException {
        ApiResponse<GetFeedsResponse> resp = getFeedsWithHttpInfo(
                feedTypes,
                marketplaceIds,
                pageSize,
                processingStatuses,
                createdSince,
                createdUntil,
                nextToken,
                restrictedDataToken);
        return resp.getData();
    }

    /**
     * Returns feed details for the feeds that match the filters that you specify. **Usage Plan:** | Rate (requests per
     * second) | Burst | | ---- | ---- | | 0.0222 | 10 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns
     * the usage plan rate limits that were applied to the requested operation, when available. The preceding table
     * indicates the default rate and burst values for this operation. Selling partners whose business demands require
     * higher throughput may have higher rate and burst values than those shown here. For more information, refer to
     * [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param feedTypes A list of feed types used to filter feeds. When feedTypes is provided, the other filter
     *     parameters (processingStatuses, marketplaceIds, createdSince, createdUntil) and pageSize may also be
     *     provided. Either feedTypes or nextToken is required. (optional)
     * @param marketplaceIds A list of marketplace identifiers used to filter feeds. The feeds returned will match at
     *     least one of the marketplaces that you specify. (optional)
     * @param pageSize The maximum number of feeds to return in a single call. (optional, default to 10)
     * @param processingStatuses A list of processing statuses used to filter feeds. (optional)
     * @param createdSince The earliest feed creation date and time for feeds included in the response, in ISO 8601
     *     format. The default is 90 days ago. Feeds are retained for a maximum of 90 days. (optional)
     * @param createdUntil The latest feed creation date and time for feeds included in the response, in ISO 8601
     *     format. The default is now. (optional)
     * @param nextToken A string token returned in the response to your previous request. nextToken is returned when the
     *     number of results exceeds the specified pageSize value. To get the next page of results, call the getFeeds
     *     operation and include this token as the only parameter. Specifying nextToken with any other parameters will
     *     cause the request to fail. (optional)
     * @return GetFeedsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public GetFeedsResponse getFeeds(
            List<String> feedTypes,
            List<String> marketplaceIds,
            Integer pageSize,
            List<String> processingStatuses,
            OffsetDateTime createdSince,
            OffsetDateTime createdUntil,
            String nextToken)
            throws ApiException, LWAException {
        ApiResponse<GetFeedsResponse> resp = getFeedsWithHttpInfo(
                feedTypes, marketplaceIds, pageSize, processingStatuses, createdSince, createdUntil, nextToken, null);
        return resp.getData();
    }

    /**
     * Returns feed details for the feeds that match the filters that you specify. **Usage Plan:** | Rate (requests per
     * second) | Burst | | ---- | ---- | | 0.0222 | 10 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns
     * the usage plan rate limits that were applied to the requested operation, when available. The preceding table
     * indicates the default rate and burst values for this operation. Selling partners whose business demands require
     * higher throughput may have higher rate and burst values than those shown here. For more information, refer to
     * [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param feedTypes A list of feed types used to filter feeds. When feedTypes is provided, the other filter
     *     parameters (processingStatuses, marketplaceIds, createdSince, createdUntil) and pageSize may also be
     *     provided. Either feedTypes or nextToken is required. (optional)
     * @param marketplaceIds A list of marketplace identifiers used to filter feeds. The feeds returned will match at
     *     least one of the marketplaces that you specify. (optional)
     * @param pageSize The maximum number of feeds to return in a single call. (optional, default to 10)
     * @param processingStatuses A list of processing statuses used to filter feeds. (optional)
     * @param createdSince The earliest feed creation date and time for feeds included in the response, in ISO 8601
     *     format. The default is 90 days ago. Feeds are retained for a maximum of 90 days. (optional)
     * @param createdUntil The latest feed creation date and time for feeds included in the response, in ISO 8601
     *     format. The default is now. (optional)
     * @param nextToken A string token returned in the response to your previous request. nextToken is returned when the
     *     number of results exceeds the specified pageSize value. To get the next page of results, call the getFeeds
     *     operation and include this token as the only parameter. Specifying nextToken with any other parameters will
     *     cause the request to fail. (optional)
     * @param restrictedDataToken Restricted Data Token (optional)
     * @return ApiResponse&lt;GetFeedsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<GetFeedsResponse> getFeedsWithHttpInfo(
            List<String> feedTypes,
            List<String> marketplaceIds,
            Integer pageSize,
            List<String> processingStatuses,
            OffsetDateTime createdSince,
            OffsetDateTime createdUntil,
            String nextToken,
            String restrictedDataToken)
            throws ApiException, LWAException {
        okhttp3.Call call = getFeedsValidateBeforeCall(
                feedTypes, marketplaceIds, pageSize, processingStatuses, createdSince, createdUntil, nextToken, null);

        if (restrictedDataToken != null) {
            okhttp3.Request request = call.request();
            request = RestrictedDataTokenSigner.sign(request, restrictedDataToken, "FeedsApi-getFeeds");
            call = apiClient.getHttpClient().newCall(request);
        }

        if (disableRateLimiting || getFeedsBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<GetFeedsResponse>() {}.getType();
            return apiClient.execute(call, localVarReturnType);
        } else throw new ApiException.RateLimitExceeded("getFeeds operation exceeds rate limit");
    }

    /**
     * Returns feed details for the feeds that match the filters that you specify. **Usage Plan:** | Rate (requests per
     * second) | Burst | | ---- | ---- | | 0.0222 | 10 | The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns
     * the usage plan rate limits that were applied to the requested operation, when available. The preceding table
     * indicates the default rate and burst values for this operation. Selling partners whose business demands require
     * higher throughput may have higher rate and burst values than those shown here. For more information, refer to
     * [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param feedTypes A list of feed types used to filter feeds. When feedTypes is provided, the other filter
     *     parameters (processingStatuses, marketplaceIds, createdSince, createdUntil) and pageSize may also be
     *     provided. Either feedTypes or nextToken is required. (optional)
     * @param marketplaceIds A list of marketplace identifiers used to filter feeds. The feeds returned will match at
     *     least one of the marketplaces that you specify. (optional)
     * @param pageSize The maximum number of feeds to return in a single call. (optional, default to 10)
     * @param processingStatuses A list of processing statuses used to filter feeds. (optional)
     * @param createdSince The earliest feed creation date and time for feeds included in the response, in ISO 8601
     *     format. The default is 90 days ago. Feeds are retained for a maximum of 90 days. (optional)
     * @param createdUntil The latest feed creation date and time for feeds included in the response, in ISO 8601
     *     format. The default is now. (optional)
     * @param nextToken A string token returned in the response to your previous request. nextToken is returned when the
     *     number of results exceeds the specified pageSize value. To get the next page of results, call the getFeeds
     *     operation and include this token as the only parameter. Specifying nextToken with any other parameters will
     *     cause the request to fail. (optional)
     * @return ApiResponse&lt;GetFeedsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public ApiResponse<GetFeedsResponse> getFeedsWithHttpInfo(
            List<String> feedTypes,
            List<String> marketplaceIds,
            Integer pageSize,
            List<String> processingStatuses,
            OffsetDateTime createdSince,
            OffsetDateTime createdUntil,
            String nextToken)
            throws ApiException, LWAException {
        return getFeedsWithHttpInfo(
                feedTypes, marketplaceIds, pageSize, processingStatuses, createdSince, createdUntil, nextToken, null);
    }

    /**
     * (asynchronously) Returns feed details for the feeds that match the filters that you specify. **Usage Plan:** |
     * Rate (requests per second) | Burst | | ---- | ---- | | 0.0222 | 10 | The &#x60;x-amzn-RateLimit-Limit&#x60;
     * response header returns the usage plan rate limits that were applied to the requested operation, when available.
     * The preceding table indicates the default rate and burst values for this operation. Selling partners whose
     * business demands require higher throughput may have higher rate and burst values than those shown here. For more
     * information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param feedTypes A list of feed types used to filter feeds. When feedTypes is provided, the other filter
     *     parameters (processingStatuses, marketplaceIds, createdSince, createdUntil) and pageSize may also be
     *     provided. Either feedTypes or nextToken is required. (optional)
     * @param marketplaceIds A list of marketplace identifiers used to filter feeds. The feeds returned will match at
     *     least one of the marketplaces that you specify. (optional)
     * @param pageSize The maximum number of feeds to return in a single call. (optional, default to 10)
     * @param processingStatuses A list of processing statuses used to filter feeds. (optional)
     * @param createdSince The earliest feed creation date and time for feeds included in the response, in ISO 8601
     *     format. The default is 90 days ago. Feeds are retained for a maximum of 90 days. (optional)
     * @param createdUntil The latest feed creation date and time for feeds included in the response, in ISO 8601
     *     format. The default is now. (optional)
     * @param nextToken A string token returned in the response to your previous request. nextToken is returned when the
     *     number of results exceeds the specified pageSize value. To get the next page of results, call the getFeeds
     *     operation and include this token as the only parameter. Specifying nextToken with any other parameters will
     *     cause the request to fail. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call getFeedsAsync(
            List<String> feedTypes,
            List<String> marketplaceIds,
            Integer pageSize,
            List<String> processingStatuses,
            OffsetDateTime createdSince,
            OffsetDateTime createdUntil,
            String nextToken,
            final ApiCallback<GetFeedsResponse> callback)
            throws ApiException, LWAException {
        return getFeedsAsync(
                feedTypes,
                marketplaceIds,
                pageSize,
                processingStatuses,
                createdSince,
                createdUntil,
                nextToken,
                callback,
                null);
    }
    /**
     * (asynchronously) Returns feed details for the feeds that match the filters that you specify. **Usage Plan:** |
     * Rate (requests per second) | Burst | | ---- | ---- | | 0.0222 | 10 | The &#x60;x-amzn-RateLimit-Limit&#x60;
     * response header returns the usage plan rate limits that were applied to the requested operation, when available.
     * The preceding table indicates the default rate and burst values for this operation. Selling partners whose
     * business demands require higher throughput may have higher rate and burst values than those shown here. For more
     * information, refer to [Usage Plans and Rate Limits in the Selling Partner
     * API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @param feedTypes A list of feed types used to filter feeds. When feedTypes is provided, the other filter
     *     parameters (processingStatuses, marketplaceIds, createdSince, createdUntil) and pageSize may also be
     *     provided. Either feedTypes or nextToken is required. (optional)
     * @param marketplaceIds A list of marketplace identifiers used to filter feeds. The feeds returned will match at
     *     least one of the marketplaces that you specify. (optional)
     * @param pageSize The maximum number of feeds to return in a single call. (optional, default to 10)
     * @param processingStatuses A list of processing statuses used to filter feeds. (optional)
     * @param createdSince The earliest feed creation date and time for feeds included in the response, in ISO 8601
     *     format. The default is 90 days ago. Feeds are retained for a maximum of 90 days. (optional)
     * @param createdUntil The latest feed creation date and time for feeds included in the response, in ISO 8601
     *     format. The default is now. (optional)
     * @param nextToken A string token returned in the response to your previous request. nextToken is returned when the
     *     number of results exceeds the specified pageSize value. To get the next page of results, call the getFeeds
     *     operation and include this token as the only parameter. Specifying nextToken with any other parameters will
     *     cause the request to fail. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @param restrictedDataToken Restricted Data Token (optional)
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws LWAException If calls to fetch LWA access token fails
     */
    public okhttp3.Call getFeedsAsync(
            List<String> feedTypes,
            List<String> marketplaceIds,
            Integer pageSize,
            List<String> processingStatuses,
            OffsetDateTime createdSince,
            OffsetDateTime createdUntil,
            String nextToken,
            final ApiCallback<GetFeedsResponse> callback,
            String restrictedDataToken)
            throws ApiException, LWAException {

        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressRequestListener = callback::onUploadProgress;
        }

        okhttp3.Call call = getFeedsValidateBeforeCall(
                feedTypes,
                marketplaceIds,
                pageSize,
                processingStatuses,
                createdSince,
                createdUntil,
                nextToken,
                progressRequestListener);

        if (restrictedDataToken != null) {
            okhttp3.Request request = call.request();
            request = RestrictedDataTokenSigner.sign(request, restrictedDataToken, "FeedsApi-getFeeds");
            call = apiClient.getHttpClient().newCall(request);
        }

        if (disableRateLimiting || getFeedsBucket.tryConsume(1)) {
            Type localVarReturnType = new TypeToken<GetFeedsResponse>() {}.getType();
            apiClient.executeAsync(call, localVarReturnType, callback);
            return call;
        } else throw new ApiException.RateLimitExceeded("getFeeds operation exceeds rate limit");
    }

    public static class Builder {
        private LWAAuthorizationCredentials lwaAuthorizationCredentials;
        private String endpoint;
        private LWAAccessTokenCache lwaAccessTokenCache;
        private Boolean disableAccessTokenCache = false;
        private Boolean disableRateLimiting = false;

        public Builder lwaAuthorizationCredentials(LWAAuthorizationCredentials lwaAuthorizationCredentials) {
            this.lwaAuthorizationCredentials = lwaAuthorizationCredentials;
            return this;
        }

        public Builder endpoint(String endpoint) {
            this.endpoint = endpoint;
            return this;
        }

        public Builder lwaAccessTokenCache(LWAAccessTokenCache lwaAccessTokenCache) {
            this.lwaAccessTokenCache = lwaAccessTokenCache;
            return this;
        }

        public Builder disableAccessTokenCache() {
            this.disableAccessTokenCache = true;
            return this;
        }

        public Builder disableRateLimiting() {
            this.disableRateLimiting = true;
            return this;
        }

        public FeedsApi build() {
            if (lwaAuthorizationCredentials == null) {
                throw new RuntimeException("LWAAuthorizationCredentials not set");
            }

            if (StringUtil.isEmpty(endpoint)) {
                throw new RuntimeException("Endpoint not set");
            }

            LWAAuthorizationSigner lwaAuthorizationSigner = null;
            if (disableAccessTokenCache) {
                lwaAuthorizationSigner = new LWAAuthorizationSigner(lwaAuthorizationCredentials);
            } else {
                if (lwaAccessTokenCache == null) {
                    lwaAccessTokenCache = new LWAAccessTokenCacheImpl();
                }
                lwaAuthorizationSigner = new LWAAuthorizationSigner(lwaAuthorizationCredentials, lwaAccessTokenCache);
            }

            return new FeedsApi(
                    new ApiClient()
                            .setLWAAuthorizationSigner(lwaAuthorizationSigner)
                            .setBasePath(endpoint),
                    disableRateLimiting);
        }
    }
}
