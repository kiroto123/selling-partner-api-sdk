/*
 * The Selling Partner API for CustomerFeedback
 * The Selling Partner API for Customer Feedback (Customer Feedback API) provides information about customer reviews and returns at both the item and browse node level.
 *
 * OpenAPI spec version: 2024-06-01
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package software.amazon.spapi.api.customerfeedback.v2024_06_01;

import static org.junit.jupiter.api.Assertions.*;

import com.amazon.SellingPartnerAPIAA.LWAAuthorizationCredentials;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse.BodyHandlers;
import java.util.*;
import org.jeasy.random.EasyRandom;
import org.jeasy.random.EasyRandomParameters;
import org.junit.jupiter.api.Test;
import org.threeten.bp.LocalDate;
import org.threeten.bp.OffsetDateTime;
import software.amazon.spapi.ApiResponse;
import software.amazon.spapi.models.customerfeedback.v2024_06_01.BrowseNodeResponse;
import software.amazon.spapi.models.customerfeedback.v2024_06_01.BrowseNodeReturnTopicsResponse;
import software.amazon.spapi.models.customerfeedback.v2024_06_01.BrowseNodeReturnTrendsResponse;
import software.amazon.spapi.models.customerfeedback.v2024_06_01.BrowseNodeReviewTopicsResponse;
import software.amazon.spapi.models.customerfeedback.v2024_06_01.BrowseNodeReviewTrendsResponse;
import software.amazon.spapi.models.customerfeedback.v2024_06_01.ItemReviewTopicsResponse;
import software.amazon.spapi.models.customerfeedback.v2024_06_01.ItemReviewTrendsResponse;

public class CustomerFeedbackApiTest {

    private static final String endpoint = "http://localhost:3000";
    private static final String authEndpoint = "http://localhost:3000/auth/o2/token";
    private static final LWAAuthorizationCredentials credentials = LWAAuthorizationCredentials.builder()
            .clientId("clientId")
            .clientSecret("clientSecret")
            .refreshToken("refreshToken")
            .endpoint(authEndpoint)
            .build();

    private final CustomerFeedbackApi api = new CustomerFeedbackApi.Builder()
            .lwaAuthorizationCredentials(credentials)
            .endpoint(endpoint)
            .build();

    private final EasyRandom easyRandom = new EasyRandom(new EasyRandomParameters()
            .randomize(OffsetDateTime.class, OffsetDateTime::now)
            .randomize(LocalDate.class, LocalDate::now)
            .collectionSizeRange(1, 2));

    @Test
    public void getBrowseNodeReturnTopicsTest() throws Exception {
        instructBackendMock("getBrowseNodeReturnTopics", "200");
        String browseNodeId = easyRandom.nextObject(String.class);
        String marketplaceId = easyRandom.nextObject(String.class);

        ApiResponse<BrowseNodeReturnTopicsResponse> response =
                api.getBrowseNodeReturnTopicsWithHttpInfo(browseNodeId, marketplaceId);

        assertEquals(200, response.getStatusCode());
        assertValidResponsePayload(200, response.getData());
    }

    @Test
    public void getBrowseNodeReturnTrendsTest() throws Exception {
        instructBackendMock("getBrowseNodeReturnTrends", "200");
        String browseNodeId = easyRandom.nextObject(String.class);
        String marketplaceId = easyRandom.nextObject(String.class);

        ApiResponse<BrowseNodeReturnTrendsResponse> response =
                api.getBrowseNodeReturnTrendsWithHttpInfo(browseNodeId, marketplaceId);

        assertEquals(200, response.getStatusCode());
        assertValidResponsePayload(200, response.getData());
    }

    @Test
    public void getBrowseNodeReviewTopicsTest() throws Exception {
        instructBackendMock("getBrowseNodeReviewTopics", "200");
        String browseNodeId = easyRandom.nextObject(String.class);
        String marketplaceId = easyRandom.nextObject(String.class);
        String sortBy = easyRandom.nextObject(String.class);

        ApiResponse<BrowseNodeReviewTopicsResponse> response =
                api.getBrowseNodeReviewTopicsWithHttpInfo(browseNodeId, marketplaceId, sortBy);

        assertEquals(200, response.getStatusCode());
        assertValidResponsePayload(200, response.getData());
    }

    @Test
    public void getBrowseNodeReviewTrendsTest() throws Exception {
        instructBackendMock("getBrowseNodeReviewTrends", "200");
        String browseNodeId = easyRandom.nextObject(String.class);
        String marketplaceId = easyRandom.nextObject(String.class);

        ApiResponse<BrowseNodeReviewTrendsResponse> response =
                api.getBrowseNodeReviewTrendsWithHttpInfo(browseNodeId, marketplaceId);

        assertEquals(200, response.getStatusCode());
        assertValidResponsePayload(200, response.getData());
    }

    @Test
    public void getItemBrowseNodeTest() throws Exception {
        instructBackendMock("getItemBrowseNode", "200");
        String asin = easyRandom.nextObject(String.class);
        String marketplaceId = easyRandom.nextObject(String.class);

        ApiResponse<BrowseNodeResponse> response = api.getItemBrowseNodeWithHttpInfo(asin, marketplaceId);

        assertEquals(200, response.getStatusCode());
        assertValidResponsePayload(200, response.getData());
    }

    @Test
    public void getItemReviewTopicsTest() throws Exception {
        instructBackendMock("getItemReviewTopics", "200");
        String asin = easyRandom.nextObject(String.class);
        String marketplaceId = easyRandom.nextObject(String.class);
        String sortBy = easyRandom.nextObject(String.class);

        ApiResponse<ItemReviewTopicsResponse> response =
                api.getItemReviewTopicsWithHttpInfo(asin, marketplaceId, sortBy);

        assertEquals(200, response.getStatusCode());
        assertValidResponsePayload(200, response.getData());
    }

    @Test
    public void getItemReviewTrendsTest() throws Exception {
        instructBackendMock("getItemReviewTrends", "200");
        String asin = easyRandom.nextObject(String.class);
        String marketplaceId = easyRandom.nextObject(String.class);

        ApiResponse<ItemReviewTrendsResponse> response = api.getItemReviewTrendsWithHttpInfo(asin, marketplaceId);

        assertEquals(200, response.getStatusCode());
        assertValidResponsePayload(200, response.getData());
    }

    private void instructBackendMock(String response, String code) throws Exception {
        HttpRequest request = HttpRequest.newBuilder()
                .uri(new URI(endpoint + "/response/" + response + "/code/" + code))
                .POST(HttpRequest.BodyPublishers.noBody())
                .build();

        HttpClient.newHttpClient().send(request, BodyHandlers.discarding());
    }

    private static void assertValidResponsePayload(int statusCode, Object body) {
        if (statusCode != 204) assertNotNull(body);
    }
}
